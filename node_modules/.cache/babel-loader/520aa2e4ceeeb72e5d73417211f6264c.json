{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from \"./valueUtil\";\n\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n      treeCheckStrictly = props.treeCheckStrictly,\n      treeCheckable = props.treeCheckable,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      multiple = props.multiple,\n      showCheckedStrategy = props.showCheckedStrategy,\n      maxCount = props.maxCount;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n\n  if (maxCount && (showCheckedStrategy === 'SHOW_ALL' && !treeCheckStrictly || showCheckedStrategy === 'SHOW_PARENT')) {\n    warning(false, '`maxCount` not work with `showCheckedStrategy=SHOW_ALL` (when `treeCheckStrictly=false`) or `showCheckedStrategy=SHOW_PARENT`.');\n  }\n}\n\nexport default warningProps;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-tree-select/es/utils/warningPropsUtil.js"],"names":["_typeof","warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","showCheckedStrategy","maxCount","every","val","Array","isArray"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,iBAAiB,GAAGD,KAAK,CAACC,iBAA9B;AAAA,MACEC,iBAAiB,GAAGF,KAAK,CAACE,iBAD5B;AAAA,MAEEC,aAAa,GAAGH,KAAK,CAACG,aAFxB;AAAA,MAGEC,YAAY,GAAGJ,KAAK,CAACI,YAHvB;AAAA,MAIEC,KAAK,GAAGL,KAAK,CAACK,KAJhB;AAAA,MAKEC,QAAQ,GAAGN,KAAK,CAACM,QALnB;AAAA,MAMEC,mBAAmB,GAAGP,KAAK,CAACO,mBAN9B;AAAA,MAOEC,QAAQ,GAAGR,KAAK,CAACQ,QAPnB;AAQAX,EAAAA,OAAO,CAAC,CAACI,iBAAF,EAAqB,uCAArB,CAAP;;AACA,MAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAA1C,EAAiD;AAC/CP,IAAAA,OAAO,CAAC,KAAD,EAAQ,8DAAR,CAAP;AACD;;AACD,MAAIO,YAAY,IAAIF,iBAApB,EAAuC;AACrCL,IAAAA,OAAO,CAACC,OAAO,CAACO,KAAD,CAAP,CAAeI,KAAf,CAAqB,UAAUC,GAAV,EAAe;AAC1C,aAAOA,GAAG,IAAId,OAAO,CAACc,GAAD,CAAP,KAAiB,QAAxB,IAAoC,WAAWA,GAAtD;AACD,KAFO,CAAD,EAEH,iKAFG,CAAP;AAGD;;AACD,MAAIR,iBAAiB,IAAII,QAArB,IAAiCH,aAArC,EAAoD;AAClDN,IAAAA,OAAO,CAAC,CAACQ,KAAD,IAAUM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAX,EAAiC,wEAAjC,CAAP;AACD,GAFD,MAEO;AACLR,IAAAA,OAAO,CAAC,CAACc,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAF,EAAwB,+DAAxB,CAAP;AACD;;AACD,MAAIG,QAAQ,KAAKD,mBAAmB,KAAK,UAAxB,IAAsC,CAACL,iBAAvC,IAA4DK,mBAAmB,KAAK,aAAzF,CAAZ,EAAqH;AACnHV,IAAAA,OAAO,CAAC,KAAD,EAAQ,gIAAR,CAAP;AACD;AACF;;AACD,eAAeE,YAAf","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from \"./valueUtil\";\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n    treeCheckStrictly = props.treeCheckStrictly,\n    treeCheckable = props.treeCheckable,\n    labelInValue = props.labelInValue,\n    value = props.value,\n    multiple = props.multiple,\n    showCheckedStrategy = props.showCheckedStrategy,\n    maxCount = props.maxCount;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n  if (maxCount && (showCheckedStrategy === 'SHOW_ALL' && !treeCheckStrictly || showCheckedStrategy === 'SHOW_PARENT')) {\n    warning(false, '`maxCount` not work with `showCheckedStrategy=SHOW_ALL` (when `treeCheckStrictly=false`) or `showCheckedStrategy=SHOW_PARENT`.');\n  }\n}\nexport default warningProps;"]},"metadata":{},"sourceType":"module"}