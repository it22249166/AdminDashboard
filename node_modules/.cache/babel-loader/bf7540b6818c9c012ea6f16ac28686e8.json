{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\n\nvar useCheckedKeys = function useCheckedKeys(rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var extractValues = function extractValues(values) {\n      return values.map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      });\n    };\n\n    var checkedKeys = extractValues(rawLabeledValues);\n    var halfCheckedKeys = extractValues(rawHalfCheckedValues);\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n    var finalCheckedKeys = checkedKeys;\n    var finalHalfCheckedKeys = halfCheckedKeys;\n\n    if (treeConduction) {\n      var conductResult = conductCheck(checkedKeys, true, keyEntities);\n      finalCheckedKeys = conductResult.checkedKeys;\n      finalHalfCheckedKeys = conductResult.halfCheckedKeys;\n    }\n\n    return [Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(finalCheckedKeys)))), finalHalfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n};\n\nexport default useCheckedKeys;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-tree-select/es/hooks/useCheckedKeys.js"],"names":["_toConsumableArray","React","conductCheck","useCheckedKeys","rawLabeledValues","rawHalfCheckedValues","treeConduction","keyEntities","useMemo","extractValues","values","map","_ref","value","checkedKeys","halfCheckedKeys","missingValues","filter","key","finalCheckedKeys","finalHalfCheckedKeys","conductResult","Array","from","Set","concat"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,8BAA7B;;AACA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,gBAAxB,EAA0CC,oBAA1C,EAAgEC,cAAhE,EAAgFC,WAAhF,EAA6F;AAChH,SAAON,KAAK,CAACO,OAAN,CAAc,YAAY;AAC/B,QAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACjD,aAAOA,MAAM,CAACC,GAAP,CAAW,UAAUC,IAAV,EAAgB;AAChC,YAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,eAAOA,KAAP;AACD,OAHM,CAAP;AAID,KALD;;AAMA,QAAIC,WAAW,GAAGL,aAAa,CAACL,gBAAD,CAA/B;AACA,QAAIW,eAAe,GAAGN,aAAa,CAACJ,oBAAD,CAAnC;AACA,QAAIW,aAAa,GAAGF,WAAW,CAACG,MAAZ,CAAmB,UAAUC,GAAV,EAAe;AACpD,aAAO,CAACX,WAAW,CAACW,GAAD,CAAnB;AACD,KAFmB,CAApB;AAGA,QAAIC,gBAAgB,GAAGL,WAAvB;AACA,QAAIM,oBAAoB,GAAGL,eAA3B;;AACA,QAAIT,cAAJ,EAAoB;AAClB,UAAIe,aAAa,GAAGnB,YAAY,CAACY,WAAD,EAAc,IAAd,EAAoBP,WAApB,CAAhC;AACAY,MAAAA,gBAAgB,GAAGE,aAAa,CAACP,WAAjC;AACAM,MAAAA,oBAAoB,GAAGC,aAAa,CAACN,eAArC;AACD;;AACD,WAAO,CAACO,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,GAAGC,MAAH,CAAUzB,kBAAkB,CAACgB,aAAD,CAA5B,EAA6ChB,kBAAkB,CAACmB,gBAAD,CAA/D,CAAR,CAAX,CAAD,EAA0GC,oBAA1G,CAAP;AACD,GApBM,EAoBJ,CAAChB,gBAAD,EAAmBC,oBAAnB,EAAyCC,cAAzC,EAAyDC,WAAzD,CApBI,CAAP;AAqBD,CAtBD;;AAuBA,eAAeJ,cAAf","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nvar useCheckedKeys = function useCheckedKeys(rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var extractValues = function extractValues(values) {\n      return values.map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      });\n    };\n    var checkedKeys = extractValues(rawLabeledValues);\n    var halfCheckedKeys = extractValues(rawHalfCheckedValues);\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n    var finalCheckedKeys = checkedKeys;\n    var finalHalfCheckedKeys = halfCheckedKeys;\n    if (treeConduction) {\n      var conductResult = conductCheck(checkedKeys, true, keyEntities);\n      finalCheckedKeys = conductResult.checkedKeys;\n      finalHalfCheckedKeys = conductResult.halfCheckedKeys;\n    }\n    return [Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(finalCheckedKeys)))), finalHalfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n};\nexport default useCheckedKeys;"]},"metadata":{},"sourceType":"module"}