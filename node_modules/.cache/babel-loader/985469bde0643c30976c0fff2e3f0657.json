{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useLockEffect from \"./useLockEffect\";\n/**\n * When user first focus one input, any submit will trigger focus another one.\n * When second time focus one input, submit will not trigger focus again.\n * When click outside to close the panel, trigger event if it can trigger onChange.\n */\n\nexport default function useRangeActive(disabled) {\n  var empty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var mergedOpen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeIndex = _React$useState2[0],\n      setActiveIndex = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n\n  var activeListRef = React.useRef([]);\n  var submitIndexRef = React.useRef(null);\n  var lastOperationRef = React.useRef(null);\n\n  var updateSubmitIndex = function updateSubmitIndex(index) {\n    submitIndexRef.current = index;\n  };\n\n  var hasActiveSubmitValue = function hasActiveSubmitValue(index) {\n    return submitIndexRef.current === index;\n  };\n\n  var triggerFocus = function triggerFocus(nextFocus) {\n    setFocused(nextFocus);\n  }; // ============================= Record =============================\n\n\n  var lastOperation = function lastOperation(type) {\n    if (type) {\n      lastOperationRef.current = type;\n    }\n\n    return lastOperationRef.current;\n  }; // ============================ Strategy ============================\n  // Trigger when input enter or input blur or panel close\n\n\n  var nextActiveIndex = function nextActiveIndex(nextValue) {\n    var list = activeListRef.current;\n    var filledActiveSet = new Set(list.filter(function (index) {\n      return nextValue[index] || empty[index];\n    }));\n    var nextIndex = list[list.length - 1] === 0 ? 1 : 0;\n\n    if (filledActiveSet.size >= 2 || disabled[nextIndex]) {\n      return null;\n    }\n\n    return nextIndex;\n  }; // ============================= Effect =============================\n  // Wait in case it's from the click outside to blur\n\n\n  useLockEffect(focused || mergedOpen, function () {\n    if (!focused) {\n      activeListRef.current = [];\n      updateSubmitIndex(null);\n    }\n  });\n  React.useEffect(function () {\n    if (focused) {\n      activeListRef.current.push(activeIndex);\n    }\n  }, [focused, activeIndex]);\n  return [focused, triggerFocus, lastOperation, activeIndex, setActiveIndex, nextActiveIndex, activeListRef.current, updateSubmitIndex, hasActiveSubmitValue];\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-picker/es/PickerInput/hooks/useRangeActive.js"],"names":["_slicedToArray","React","useLockEffect","useRangeActive","disabled","empty","arguments","length","undefined","mergedOpen","_React$useState","useState","_React$useState2","activeIndex","setActiveIndex","_React$useState3","_React$useState4","focused","setFocused","activeListRef","useRef","submitIndexRef","lastOperationRef","updateSubmitIndex","index","current","hasActiveSubmitValue","triggerFocus","nextFocus","lastOperation","type","nextActiveIndex","nextValue","list","filledActiveSet","Set","filter","nextIndex","size","useEffect","push"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useLockEffect from \"./useLockEffect\";\n/**\n * When user first focus one input, any submit will trigger focus another one.\n * When second time focus one input, submit will not trigger focus again.\n * When click outside to close the panel, trigger event if it can trigger onChange.\n */\nexport default function useRangeActive(disabled) {\n  var empty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var mergedOpen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    activeIndex = _React$useState2[0],\n    setActiveIndex = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    focused = _React$useState4[0],\n    setFocused = _React$useState4[1];\n  var activeListRef = React.useRef([]);\n  var submitIndexRef = React.useRef(null);\n  var lastOperationRef = React.useRef(null);\n  var updateSubmitIndex = function updateSubmitIndex(index) {\n    submitIndexRef.current = index;\n  };\n  var hasActiveSubmitValue = function hasActiveSubmitValue(index) {\n    return submitIndexRef.current === index;\n  };\n  var triggerFocus = function triggerFocus(nextFocus) {\n    setFocused(nextFocus);\n  };\n\n  // ============================= Record =============================\n  var lastOperation = function lastOperation(type) {\n    if (type) {\n      lastOperationRef.current = type;\n    }\n    return lastOperationRef.current;\n  };\n\n  // ============================ Strategy ============================\n  // Trigger when input enter or input blur or panel close\n  var nextActiveIndex = function nextActiveIndex(nextValue) {\n    var list = activeListRef.current;\n    var filledActiveSet = new Set(list.filter(function (index) {\n      return nextValue[index] || empty[index];\n    }));\n    var nextIndex = list[list.length - 1] === 0 ? 1 : 0;\n    if (filledActiveSet.size >= 2 || disabled[nextIndex]) {\n      return null;\n    }\n    return nextIndex;\n  };\n\n  // ============================= Effect =============================\n  // Wait in case it's from the click outside to blur\n  useLockEffect(focused || mergedOpen, function () {\n    if (!focused) {\n      activeListRef.current = [];\n      updateSubmitIndex(null);\n    }\n  });\n  React.useEffect(function () {\n    if (focused) {\n      activeListRef.current.push(activeIndex);\n    }\n  }, [focused, activeIndex]);\n  return [focused, triggerFocus, lastOperation, activeIndex, setActiveIndex, nextActiveIndex, activeListRef.current, updateSubmitIndex, hasActiveSubmitValue];\n}"]},"metadata":{},"sourceType":"module"}