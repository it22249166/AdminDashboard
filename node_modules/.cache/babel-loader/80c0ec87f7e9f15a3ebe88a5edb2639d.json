{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nexport function isDOM(node) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element\n  // Since XULElement is also subclass of Element, we only need HTMLElement and SVGElement\n  return node instanceof HTMLElement || node instanceof SVGElement;\n}\n/**\n * Retrieves a DOM node via a ref, and does not invoke `findDOMNode`.\n */\n\nexport function getDOM(node) {\n  if (node && _typeof(node) === 'object' && isDOM(node.nativeElement)) {\n    return node.nativeElement;\n  }\n\n  if (isDOM(node)) {\n    return node;\n  }\n\n  return null;\n}\n/**\n * Return if a node is a DOM node. Else will return by `findDOMNode`\n */\n\nexport default function findDOMNode(node) {\n  var domNode = getDOM(node);\n\n  if (domNode) {\n    return domNode;\n  }\n\n  if (node instanceof React.Component) {\n    var _ReactDOM$findDOMNode;\n\n    return (_ReactDOM$findDOMNode = ReactDOM.findDOMNode) === null || _ReactDOM$findDOMNode === void 0 ? void 0 : _ReactDOM$findDOMNode.call(ReactDOM, node);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-util/es/Dom/findDOMNode.js"],"names":["_typeof","React","ReactDOM","isDOM","node","HTMLElement","SVGElement","getDOM","nativeElement","findDOMNode","domNode","Component","_ReactDOM$findDOMNode","call"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;AAC1B;AACA;AACA,SAAOA,IAAI,YAAYC,WAAhB,IAA+BD,IAAI,YAAYE,UAAtD;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBH,IAAhB,EAAsB;AAC3B,MAAIA,IAAI,IAAIJ,OAAO,CAACI,IAAD,CAAP,KAAkB,QAA1B,IAAsCD,KAAK,CAACC,IAAI,CAACI,aAAN,CAA/C,EAAqE;AACnE,WAAOJ,IAAI,CAACI,aAAZ;AACD;;AACD,MAAIL,KAAK,CAACC,IAAD,CAAT,EAAiB;AACf,WAAOA,IAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;AACA;AACA;;AACA,eAAe,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AACxC,MAAIM,OAAO,GAAGH,MAAM,CAACH,IAAD,CAApB;;AACA,MAAIM,OAAJ,EAAa;AACX,WAAOA,OAAP;AACD;;AACD,MAAIN,IAAI,YAAYH,KAAK,CAACU,SAA1B,EAAqC;AACnC,QAAIC,qBAAJ;;AACA,WAAO,CAACA,qBAAqB,GAAGV,QAAQ,CAACO,WAAlC,MAAmD,IAAnD,IAA2DG,qBAAqB,KAAK,KAAK,CAA1F,GAA8F,KAAK,CAAnG,GAAuGA,qBAAqB,CAACC,IAAtB,CAA2BX,QAA3B,EAAqCE,IAArC,CAA9G;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nexport function isDOM(node) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element\n  // Since XULElement is also subclass of Element, we only need HTMLElement and SVGElement\n  return node instanceof HTMLElement || node instanceof SVGElement;\n}\n\n/**\n * Retrieves a DOM node via a ref, and does not invoke `findDOMNode`.\n */\nexport function getDOM(node) {\n  if (node && _typeof(node) === 'object' && isDOM(node.nativeElement)) {\n    return node.nativeElement;\n  }\n  if (isDOM(node)) {\n    return node;\n  }\n  return null;\n}\n\n/**\n * Return if a node is a DOM node. Else will return by `findDOMNode`\n */\nexport default function findDOMNode(node) {\n  var domNode = getDOM(node);\n  if (domNode) {\n    return domNode;\n  }\n  if (node instanceof React.Component) {\n    var _ReactDOM$findDOMNode;\n    return (_ReactDOM$findDOMNode = ReactDOM.findDOMNode) === null || _ReactDOM$findDOMNode === void 0 ? void 0 : _ReactDOM$findDOMNode.call(ReactDOM, node);\n  }\n  return null;\n}"]},"metadata":{},"sourceType":"module"}