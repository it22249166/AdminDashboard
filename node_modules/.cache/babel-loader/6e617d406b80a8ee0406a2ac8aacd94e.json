{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport Col from '../grid/col';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\n\nfunction toTooltipProps(tooltip) {\n  if (!tooltip) {\n    return null;\n  }\n\n  if (typeof tooltip === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {\n    return tooltip;\n  }\n\n  return {\n    title: tooltip\n  };\n}\n\nconst FormItemLabel = _ref => {\n  let {\n    prefixCls,\n    label,\n    htmlFor,\n    labelCol,\n    labelAlign,\n    colon,\n    required,\n    requiredMark,\n    tooltip,\n    vertical\n  } = _ref;\n\n  var _a;\n\n  const [formLocale] = useLocale('Form');\n  const {\n    labelAlign: contextLabelAlign,\n    labelCol: contextLabelCol,\n    labelWrap,\n    colon: contextColon\n  } = React.useContext(FormContext);\n\n  if (!label) {\n    return null;\n  }\n\n  const mergedLabelCol = labelCol || contextLabelCol || {};\n  const mergedLabelAlign = labelAlign || contextLabelAlign;\n  const labelClsBasic = `${prefixCls}-item-label`;\n  const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className, {\n    [`${labelClsBasic}-wrap`]: !!labelWrap\n  });\n  let labelChildren = label; // Keep label is original where there should have no colon\n\n  const computedColon = colon === true || contextColon !== false && colon !== false;\n  const haveColon = computedColon && !vertical; // Remove duplicated user input colon\n\n  if (haveColon && typeof label === 'string' && label.trim()) {\n    labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n  } // Tooltip\n\n\n  const tooltipProps = toTooltipProps(tooltip);\n\n  if (tooltipProps) {\n    const {\n      icon = /*#__PURE__*/React.createElement(QuestionCircleOutlined, null)\n    } = tooltipProps,\n          restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n\n    const tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n      className: `${prefixCls}-item-tooltip`,\n      title: '',\n      onClick: e => {\n        // Prevent label behavior in tooltip icon\n        // https://github.com/ant-design/ant-design/issues/46154\n        e.preventDefault();\n      },\n      tabIndex: null\n    }));\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n  } // Required Mark\n\n\n  const isOptionalMark = requiredMark === 'optional';\n  const isRenderMark = typeof requiredMark === 'function';\n  const hideRequiredMark = requiredMark === false;\n\n  if (isRenderMark) {\n    labelChildren = requiredMark(labelChildren, {\n      required: !!required\n    });\n  } else if (isOptionalMark && !required) {\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-item-optional`,\n      title: \"\"\n    }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n  } // https://github.com/ant-design/ant-design/pull/52950#discussion_r1980880316\n\n\n  let markType;\n\n  if (hideRequiredMark) {\n    markType = 'hidden';\n  } else if (isOptionalMark || isRenderMark) {\n    markType = 'optional';\n  }\n\n  const labelClassName = classNames({\n    [`${prefixCls}-item-required`]: required,\n    [`${prefixCls}-item-required-mark-${markType}`]: markType,\n    [`${prefixCls}-item-no-colon`]: !computedColon\n  });\n  return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n    className: labelColClassName\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    className: labelClassName,\n    title: typeof label === 'string' ? label : ''\n  }, labelChildren));\n};\n\nexport default FormItemLabel;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/form/FormItemLabel.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","QuestionCircleOutlined","classNames","Col","useLocale","defaultLocale","Tooltip","FormContext","toTooltipProps","tooltip","isValidElement","title","FormItemLabel","_ref","prefixCls","label","htmlFor","labelCol","labelAlign","colon","required","requiredMark","vertical","_a","formLocale","contextLabelAlign","contextLabelCol","labelWrap","contextColon","useContext","mergedLabelCol","mergedLabelAlign","labelClsBasic","labelColClassName","className","labelChildren","computedColon","haveColon","trim","replace","tooltipProps","icon","createElement","restTooltipProps","tooltipNode","assign","cloneElement","onClick","preventDefault","tabIndex","Fragment","isOptionalMark","isRenderMark","hideRequiredMark","optional","Form","markType","labelClassName"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport Col from '../grid/col';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\nfunction toTooltipProps(tooltip) {\n  if (!tooltip) {\n    return null;\n  }\n  if (typeof tooltip === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {\n    return tooltip;\n  }\n  return {\n    title: tooltip\n  };\n}\nconst FormItemLabel = _ref => {\n  let {\n    prefixCls,\n    label,\n    htmlFor,\n    labelCol,\n    labelAlign,\n    colon,\n    required,\n    requiredMark,\n    tooltip,\n    vertical\n  } = _ref;\n  var _a;\n  const [formLocale] = useLocale('Form');\n  const {\n    labelAlign: contextLabelAlign,\n    labelCol: contextLabelCol,\n    labelWrap,\n    colon: contextColon\n  } = React.useContext(FormContext);\n  if (!label) {\n    return null;\n  }\n  const mergedLabelCol = labelCol || contextLabelCol || {};\n  const mergedLabelAlign = labelAlign || contextLabelAlign;\n  const labelClsBasic = `${prefixCls}-item-label`;\n  const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className, {\n    [`${labelClsBasic}-wrap`]: !!labelWrap\n  });\n  let labelChildren = label;\n  // Keep label is original where there should have no colon\n  const computedColon = colon === true || contextColon !== false && colon !== false;\n  const haveColon = computedColon && !vertical;\n  // Remove duplicated user input colon\n  if (haveColon && typeof label === 'string' && label.trim()) {\n    labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n  }\n  // Tooltip\n  const tooltipProps = toTooltipProps(tooltip);\n  if (tooltipProps) {\n    const {\n        icon = /*#__PURE__*/React.createElement(QuestionCircleOutlined, null)\n      } = tooltipProps,\n      restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n    const tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n      className: `${prefixCls}-item-tooltip`,\n      title: '',\n      onClick: e => {\n        // Prevent label behavior in tooltip icon\n        // https://github.com/ant-design/ant-design/issues/46154\n        e.preventDefault();\n      },\n      tabIndex: null\n    }));\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n  }\n  // Required Mark\n  const isOptionalMark = requiredMark === 'optional';\n  const isRenderMark = typeof requiredMark === 'function';\n  const hideRequiredMark = requiredMark === false;\n  if (isRenderMark) {\n    labelChildren = requiredMark(labelChildren, {\n      required: !!required\n    });\n  } else if (isOptionalMark && !required) {\n    labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-item-optional`,\n      title: \"\"\n    }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n  }\n  // https://github.com/ant-design/ant-design/pull/52950#discussion_r1980880316\n  let markType;\n  if (hideRequiredMark) {\n    markType = 'hidden';\n  } else if (isOptionalMark || isRenderMark) {\n    markType = 'optional';\n  }\n  const labelClassName = classNames({\n    [`${prefixCls}-item-required`]: required,\n    [`${prefixCls}-item-required-mark-${markType}`]: markType,\n    [`${prefixCls}-item-no-colon`]: !computedColon\n  });\n  return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n    className: labelColClassName\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: htmlFor,\n    className: labelClassName,\n    title: typeof label === 'string' ? label : ''\n  }, labelChildren));\n};\nexport default FormItemLabel;"]},"metadata":{},"sourceType":"module"}