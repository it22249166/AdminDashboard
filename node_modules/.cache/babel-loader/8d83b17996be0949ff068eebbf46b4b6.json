{"ast":null,"code":"import * as React from 'react';\nimport { VariantContext } from '../context';\nimport { ConfigContext, Variants } from '../../config-provider';\n/**\n * Compatible for legacy `bordered` prop.\n */\n\nconst useVariant = function (component, variant) {\n  let legacyBordered = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n  var _a, _b;\n\n  const {\n    variant: configVariant,\n    [component]: componentConfig\n  } = React.useContext(ConfigContext);\n  const ctxVariant = React.useContext(VariantContext);\n  const configComponentVariant = componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.variant;\n  let mergedVariant;\n\n  if (typeof variant !== 'undefined') {\n    mergedVariant = variant;\n  } else if (legacyBordered === false) {\n    mergedVariant = 'borderless';\n  } else {\n    // form variant > component global variant > global variant\n    mergedVariant = (_b = (_a = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : configComponentVariant) !== null && _a !== void 0 ? _a : configVariant) !== null && _b !== void 0 ? _b : 'outlined';\n  }\n\n  const enableVariantCls = Variants.includes(mergedVariant);\n  return [mergedVariant, enableVariantCls];\n};\n\nexport default useVariant;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/form/hooks/useVariants.js"],"names":["React","VariantContext","ConfigContext","Variants","useVariant","component","variant","legacyBordered","arguments","length","undefined","_a","_b","configVariant","componentConfig","useContext","ctxVariant","configComponentVariant","mergedVariant","enableVariantCls","includes"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,uBAAxC;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AAC/C,MAAIC,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEE,SAAzF;;AACA,MAAIC,EAAJ,EAAQC,EAAR;;AACA,QAAM;AACJN,IAAAA,OAAO,EAAEO,aADL;AAEJ,KAACR,SAAD,GAAaS;AAFT,MAGFd,KAAK,CAACe,UAAN,CAAiBb,aAAjB,CAHJ;AAIA,QAAMc,UAAU,GAAGhB,KAAK,CAACe,UAAN,CAAiBd,cAAjB,CAAnB;AACA,QAAMgB,sBAAsB,GAAGH,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACR,OAAjH;AACA,MAAIY,aAAJ;;AACA,MAAI,OAAOZ,OAAP,KAAmB,WAAvB,EAAoC;AAClCY,IAAAA,aAAa,GAAGZ,OAAhB;AACD,GAFD,MAEO,IAAIC,cAAc,KAAK,KAAvB,EAA8B;AACnCW,IAAAA,aAAa,GAAG,YAAhB;AACD,GAFM,MAEA;AACL;AACAA,IAAAA,aAAa,GAAG,CAACN,EAAE,GAAG,CAACD,EAAE,GAAGK,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4DC,sBAAlE,MAA8F,IAA9F,IAAsGN,EAAE,KAAK,KAAK,CAAlH,GAAsHA,EAAtH,GAA2HE,aAAjI,MAAoJ,IAApJ,IAA4JD,EAAE,KAAK,KAAK,CAAxK,GAA4KA,EAA5K,GAAiL,UAAjM;AACD;;AACD,QAAMO,gBAAgB,GAAGhB,QAAQ,CAACiB,QAAT,CAAkBF,aAAlB,CAAzB;AACA,SAAO,CAACA,aAAD,EAAgBC,gBAAhB,CAAP;AACD,CApBD;;AAqBA,eAAef,UAAf","sourcesContent":["import * as React from 'react';\nimport { VariantContext } from '../context';\nimport { ConfigContext, Variants } from '../../config-provider';\n/**\n * Compatible for legacy `bordered` prop.\n */\nconst useVariant = function (component, variant) {\n  let legacyBordered = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var _a, _b;\n  const {\n    variant: configVariant,\n    [component]: componentConfig\n  } = React.useContext(ConfigContext);\n  const ctxVariant = React.useContext(VariantContext);\n  const configComponentVariant = componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.variant;\n  let mergedVariant;\n  if (typeof variant !== 'undefined') {\n    mergedVariant = variant;\n  } else if (legacyBordered === false) {\n    mergedVariant = 'borderless';\n  } else {\n    // form variant > component global variant > global variant\n    mergedVariant = (_b = (_a = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : configComponentVariant) !== null && _a !== void 0 ? _a : configVariant) !== null && _b !== void 0 ? _b : 'outlined';\n  }\n  const enableVariantCls = Variants.includes(mergedVariant);\n  return [mergedVariant, enableVariantCls];\n};\nexport default useVariant;"]},"metadata":{},"sourceType":"module"}