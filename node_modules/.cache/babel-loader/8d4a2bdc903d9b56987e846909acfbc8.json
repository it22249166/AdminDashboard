{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/g, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let AggregationColor = /*#__PURE__*/function () {\n  function AggregationColor(color) {\n    _classCallCheck(this, AggregationColor);\n\n    var _a;\n\n    this.cleared = false; // Clone from another AggregationColor\n\n    if (color instanceof AggregationColor) {\n      this.metaColor = color.metaColor.clone();\n      this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(info => ({\n        color: new AggregationColor(info.color),\n        percent: info.percent\n      }));\n      this.cleared = color.cleared;\n      return;\n    }\n\n    const isArray = Array.isArray(color);\n\n    if (isArray && color.length) {\n      this.colors = color.map(_ref => {\n        let {\n          color: c,\n          percent\n        } = _ref;\n        return {\n          color: new AggregationColor(c),\n          percent\n        };\n      });\n      this.metaColor = new RcColor(this.colors[0].color.metaColor);\n    } else {\n      this.metaColor = new RcColor(isArray ? '' : color);\n    }\n\n    if (!color || isArray && !this.colors) {\n      this.metaColor = this.metaColor.setA(0);\n      this.cleared = true;\n    }\n  }\n\n  return _createClass(AggregationColor, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.a < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.toHexString();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"isGradient\",\n    value: function isGradient() {\n      return !!this.colors && !this.cleared;\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      return this.colors || [{\n        color: this,\n        percent: 0\n      }];\n    }\n  }, {\n    key: \"toCssString\",\n    value: function toCssString() {\n      const {\n        colors\n      } = this; // CSS line-gradient\n\n      if (colors) {\n        const colorsStr = colors.map(c => `${c.color.toRgbString()} ${c.percent}%`).join(', ');\n        return `linear-gradient(90deg, ${colorsStr})`;\n      }\n\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      if (!color || this.isGradient() !== color.isGradient()) {\n        return false;\n      }\n\n      if (!this.isGradient()) {\n        return this.toHexString() === color.toHexString();\n      }\n\n      return this.colors.length === color.colors.length && this.colors.every((c, i) => {\n        const target = color.colors[i];\n        return c.percent === target.percent && c.color.equals(target.color);\n      });\n    }\n  }]);\n}();","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/color-picker/color.js"],"names":["_classCallCheck","_createClass","Color","RcColor","toHexFormat","value","alpha","replace","slice","getHex","AggregationColor","color","_a","cleared","metaColor","clone","colors","map","info","percent","isArray","Array","length","_ref","c","setA","key","toHsb","toHsbString","toHex","toHexString","a","toRgb","toRgbString","isGradient","getColors","toCssString","colorsStr","join","equals","every","i","target"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/g, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let AggregationColor = /*#__PURE__*/function () {\n  function AggregationColor(color) {\n    _classCallCheck(this, AggregationColor);\n    var _a;\n    this.cleared = false;\n    // Clone from another AggregationColor\n    if (color instanceof AggregationColor) {\n      this.metaColor = color.metaColor.clone();\n      this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(info => ({\n        color: new AggregationColor(info.color),\n        percent: info.percent\n      }));\n      this.cleared = color.cleared;\n      return;\n    }\n    const isArray = Array.isArray(color);\n    if (isArray && color.length) {\n      this.colors = color.map(_ref => {\n        let {\n          color: c,\n          percent\n        } = _ref;\n        return {\n          color: new AggregationColor(c),\n          percent\n        };\n      });\n      this.metaColor = new RcColor(this.colors[0].color.metaColor);\n    } else {\n      this.metaColor = new RcColor(isArray ? '' : color);\n    }\n    if (!color || isArray && !this.colors) {\n      this.metaColor = this.metaColor.setA(0);\n      this.cleared = true;\n    }\n  }\n  return _createClass(AggregationColor, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.a < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.toHexString();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"isGradient\",\n    value: function isGradient() {\n      return !!this.colors && !this.cleared;\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      return this.colors || [{\n        color: this,\n        percent: 0\n      }];\n    }\n  }, {\n    key: \"toCssString\",\n    value: function toCssString() {\n      const {\n        colors\n      } = this;\n      // CSS line-gradient\n      if (colors) {\n        const colorsStr = colors.map(c => `${c.color.toRgbString()} ${c.percent}%`).join(', ');\n        return `linear-gradient(90deg, ${colorsStr})`;\n      }\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      if (!color || this.isGradient() !== color.isGradient()) {\n        return false;\n      }\n      if (!this.isGradient()) {\n        return this.toHexString() === color.toHexString();\n      }\n      return this.colors.length === color.colors.length && this.colors.every((c, i) => {\n        const target = color.colors[i];\n        return c.percent === target.percent && c.color.equals(target.color);\n      });\n    }\n  }]);\n}();"]},"metadata":{},"sourceType":"module"}