{"ast":null,"code":"import { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { initComponentToken, initInputToken } from './token'; // =============================== OTP ================================\n\nconst genOTPStyle = token => {\n  const {\n    componentCls,\n    paddingXS\n  } = token;\n  return {\n    [componentCls]: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      flexWrap: 'nowrap',\n      columnGap: paddingXS,\n      [`${componentCls}-input-wrapper`]: {\n        position: 'relative',\n        [`${componentCls}-mask-icon`]: {\n          position: 'absolute',\n          zIndex: '1',\n          top: '50%',\n          right: '50%',\n          transform: 'translate(50%, -50%)',\n          pointerEvents: 'none'\n        },\n        [`${componentCls}-mask-input`]: {\n          color: 'transparent',\n          caretColor: 'var(--ant-color-text)'\n        },\n        [`${componentCls}-mask-input[type=number]::-webkit-inner-spin-button`]: {\n          '-webkit-appearance': 'none',\n          margin: 0\n        },\n        [`${componentCls}-mask-input[type=number]`]: {\n          '-moz-appearance': 'textfield'\n        }\n      },\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [`${componentCls}-input`]: {\n        textAlign: 'center',\n        paddingInline: token.paddingXXS\n      },\n      // ================= Size =================\n      [`&${componentCls}-sm ${componentCls}-input`]: {\n        paddingInline: token.calc(token.paddingXXS).div(2).equal()\n      },\n      [`&${componentCls}-lg ${componentCls}-input`]: {\n        paddingInline: token.paddingXS\n      }\n    }\n  };\n}; // ============================== Export ==============================\n\n\nexport default genStyleHooks(['Input', 'OTP'], token => {\n  const inputToken = mergeToken(token, initInputToken(token));\n  return [genOTPStyle(inputToken)];\n}, initComponentToken);","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/input/style/otp.js"],"names":["genStyleHooks","mergeToken","initComponentToken","initInputToken","genOTPStyle","token","componentCls","paddingXS","display","alignItems","flexWrap","columnGap","position","zIndex","top","right","transform","pointerEvents","color","caretColor","margin","direction","textAlign","paddingInline","paddingXXS","calc","div","equal","inputToken"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,SAAnD,C,CACA;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA;AAFI,MAGFF,KAHJ;AAIA,SAAO;AACL,KAACC,YAAD,GAAgB;AACdE,MAAAA,OAAO,EAAE,aADK;AAEdC,MAAAA,UAAU,EAAE,QAFE;AAGdC,MAAAA,QAAQ,EAAE,QAHI;AAIdC,MAAAA,SAAS,EAAEJ,SAJG;AAKd,OAAE,GAAED,YAAa,gBAAjB,GAAmC;AACjCM,QAAAA,QAAQ,EAAE,UADuB;AAEjC,SAAE,GAAEN,YAAa,YAAjB,GAA+B;AAC7BM,UAAAA,QAAQ,EAAE,UADmB;AAE7BC,UAAAA,MAAM,EAAE,GAFqB;AAG7BC,UAAAA,GAAG,EAAE,KAHwB;AAI7BC,UAAAA,KAAK,EAAE,KAJsB;AAK7BC,UAAAA,SAAS,EAAE,sBALkB;AAM7BC,UAAAA,aAAa,EAAE;AANc,SAFE;AAUjC,SAAE,GAAEX,YAAa,aAAjB,GAAgC;AAC9BY,UAAAA,KAAK,EAAE,aADuB;AAE9BC,UAAAA,UAAU,EAAE;AAFkB,SAVC;AAcjC,SAAE,GAAEb,YAAa,qDAAjB,GAAwE;AACtE,gCAAsB,MADgD;AAEtEc,UAAAA,MAAM,EAAE;AAF8D,SAdvC;AAkBjC,SAAE,GAAEd,YAAa,0BAAjB,GAA6C;AAC3C,6BAAmB;AADwB;AAlBZ,OALrB;AA2Bd,eAAS;AACPe,QAAAA,SAAS,EAAE;AADJ,OA3BK;AA8Bd,OAAE,GAAEf,YAAa,QAAjB,GAA2B;AACzBgB,QAAAA,SAAS,EAAE,QADc;AAEzBC,QAAAA,aAAa,EAAElB,KAAK,CAACmB;AAFI,OA9Bb;AAkCd;AACA,OAAE,IAAGlB,YAAa,OAAMA,YAAa,QAArC,GAA+C;AAC7CiB,QAAAA,aAAa,EAAElB,KAAK,CAACoB,IAAN,CAAWpB,KAAK,CAACmB,UAAjB,EAA6BE,GAA7B,CAAiC,CAAjC,EAAoCC,KAApC;AAD8B,OAnCjC;AAsCd,OAAE,IAAGrB,YAAa,OAAMA,YAAa,QAArC,GAA+C;AAC7CiB,QAAAA,aAAa,EAAElB,KAAK,CAACE;AADwB;AAtCjC;AADX,GAAP;AA4CD,CAjDD,C,CAkDA;;;AACA,eAAeP,aAAa,CAAC,CAAC,OAAD,EAAU,KAAV,CAAD,EAAmBK,KAAK,IAAI;AACtD,QAAMuB,UAAU,GAAG3B,UAAU,CAACI,KAAD,EAAQF,cAAc,CAACE,KAAD,CAAtB,CAA7B;AACA,SAAO,CAACD,WAAW,CAACwB,UAAD,CAAZ,CAAP;AACD,CAH2B,EAGzB1B,kBAHyB,CAA5B","sourcesContent":["import { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { initComponentToken, initInputToken } from './token';\n// =============================== OTP ================================\nconst genOTPStyle = token => {\n  const {\n    componentCls,\n    paddingXS\n  } = token;\n  return {\n    [componentCls]: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      flexWrap: 'nowrap',\n      columnGap: paddingXS,\n      [`${componentCls}-input-wrapper`]: {\n        position: 'relative',\n        [`${componentCls}-mask-icon`]: {\n          position: 'absolute',\n          zIndex: '1',\n          top: '50%',\n          right: '50%',\n          transform: 'translate(50%, -50%)',\n          pointerEvents: 'none'\n        },\n        [`${componentCls}-mask-input`]: {\n          color: 'transparent',\n          caretColor: 'var(--ant-color-text)'\n        },\n        [`${componentCls}-mask-input[type=number]::-webkit-inner-spin-button`]: {\n          '-webkit-appearance': 'none',\n          margin: 0\n        },\n        [`${componentCls}-mask-input[type=number]`]: {\n          '-moz-appearance': 'textfield'\n        }\n      },\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [`${componentCls}-input`]: {\n        textAlign: 'center',\n        paddingInline: token.paddingXXS\n      },\n      // ================= Size =================\n      [`&${componentCls}-sm ${componentCls}-input`]: {\n        paddingInline: token.calc(token.paddingXXS).div(2).equal()\n      },\n      [`&${componentCls}-lg ${componentCls}-input`]: {\n        paddingInline: token.paddingXS\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Input', 'OTP'], token => {\n  const inputToken = mergeToken(token, initInputToken(token));\n  return [genOTPStyle(inputToken)];\n}, initComponentToken);"]},"metadata":{},"sourceType":"module"}