{"ast":null,"code":"\"use client\";\n\nimport getDesignToken from './getDesignToken';\nimport { defaultConfig, DesignTokenContext as InternalDesignTokenContext, useToken as useInternalToken } from './internal';\nimport compactAlgorithm from './themes/compact';\nimport darkAlgorithm from './themes/dark';\nimport defaultAlgorithm from './themes/default'; // ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n\n/** Get current context Design Token. Will be different if you are using nest theme config. */\n\nfunction useToken() {\n  const [theme, token, hashId] = useInternalToken();\n  return {\n    theme,\n    token,\n    hashId\n  };\n}\n\nexport default {\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken,\n  defaultAlgorithm,\n  darkAlgorithm,\n  compactAlgorithm,\n  getDesignToken,\n\n  /**\n   * @private Private variable\n   * @warring ðŸ”¥ Do not use in production. ðŸ”¥\n   */\n  defaultConfig,\n\n  /**\n   * @private Private variable\n   * @warring ðŸ”¥ Do not use in production. ðŸ”¥\n   */\n  _internalContext: InternalDesignTokenContext\n};","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/theme/index.js"],"names":["getDesignToken","defaultConfig","DesignTokenContext","InternalDesignTokenContext","useToken","useInternalToken","compactAlgorithm","darkAlgorithm","defaultAlgorithm","theme","token","hashId","defaultSeed","_internalContext"],"mappings":"AAAA;;AAEA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,aAAT,EAAwBC,kBAAkB,IAAIC,0BAA9C,EAA0EC,QAAQ,IAAIC,gBAAtF,QAA8G,YAA9G;AACA,OAAOC,gBAAP,MAA6B,kBAA7B;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,gBAAP,MAA6B,kBAA7B,C,CACA;AACA;AACA;;AACA;;AACA,SAASJ,QAAT,GAAoB;AAClB,QAAM,CAACK,KAAD,EAAQC,KAAR,EAAeC,MAAf,IAAyBN,gBAAgB,EAA/C;AACA,SAAO;AACLI,IAAAA,KADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;AACD,eAAe;AACb;AACAC,EAAAA,WAAW,EAAEX,aAAa,CAACS,KAFd;AAGbN,EAAAA,QAHa;AAIbI,EAAAA,gBAJa;AAKbD,EAAAA,aALa;AAMbD,EAAAA,gBANa;AAObN,EAAAA,cAPa;;AAQb;AACF;AACA;AACA;AACEC,EAAAA,aAZa;;AAab;AACF;AACA;AACA;AACEY,EAAAA,gBAAgB,EAAEV;AAjBL,CAAf","sourcesContent":["\"use client\";\n\nimport getDesignToken from './getDesignToken';\nimport { defaultConfig, DesignTokenContext as InternalDesignTokenContext, useToken as useInternalToken } from './internal';\nimport compactAlgorithm from './themes/compact';\nimport darkAlgorithm from './themes/dark';\nimport defaultAlgorithm from './themes/default';\n// ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n/** Get current context Design Token. Will be different if you are using nest theme config. */\nfunction useToken() {\n  const [theme, token, hashId] = useInternalToken();\n  return {\n    theme,\n    token,\n    hashId\n  };\n}\nexport default {\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken,\n  defaultAlgorithm,\n  darkAlgorithm,\n  compactAlgorithm,\n  getDesignToken,\n  /**\n   * @private Private variable\n   * @warring ðŸ”¥ Do not use in production. ðŸ”¥\n   */\n  defaultConfig,\n  /**\n   * @private Private variable\n   * @warring ðŸ”¥ Do not use in production. ðŸ”¥\n   */\n  _internalContext: InternalDesignTokenContext\n};"]},"metadata":{},"sourceType":"module"}