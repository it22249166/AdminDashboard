{"ast":null,"code":"\"use client\";\n/* eslint-disable react/no-array-index-key */\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport { devUseWarning } from '../_util/warning';\nimport { useComponentConfig } from '../config-provider/context';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useItems from './hooks/useItems';\nimport useResizable from './hooks/useResizable';\nimport useResize from './hooks/useResize';\nimport useSizes from './hooks/useSizes';\nimport { InternalPanel } from './Panel';\nimport SplitBar from './SplitBar';\nimport useStyle from './style';\n\nconst Splitter = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    style,\n    layout = 'horizontal',\n    children,\n    rootClassName,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    lazy\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    className: contextClassName,\n    style: contextStyle\n  } = useComponentConfig('splitter');\n  const prefixCls = getPrefixCls('splitter', customizePrefixCls);\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls); // ======================== Direct ========================\n\n  const isVertical = layout === 'vertical';\n  const isRTL = direction === 'rtl';\n  const reverse = !isVertical && isRTL; // ====================== Items Data ======================\n\n  const items = useItems(children); // >>> Warning for uncontrolled\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Splitter');\n    let existSize = false;\n    let existUndefinedSize = false;\n    items.forEach(item => {\n      if (item.size !== undefined) {\n        existSize = true;\n      } else {\n        existUndefinedSize = true;\n      }\n    });\n\n    if (existSize && existUndefinedSize && !onResize) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'When part of `Splitter.Panel` has `size`, `onResize` is required or change `size` to `defaultSize`.') : void 0;\n    }\n  } // ====================== Container =======================\n\n\n  const [containerSize, setContainerSize] = useState();\n\n  const onContainerResize = size => {\n    const {\n      offsetWidth,\n      offsetHeight\n    } = size;\n    const containerSize = isVertical ? offsetHeight : offsetWidth; // Skip when container has no size, Such as nested in a hidden tab panel\n    // to fix: https://github.com/ant-design/ant-design/issues/51106\n\n    if (containerSize === 0) {\n      return;\n    }\n\n    setContainerSize(containerSize);\n  }; // ========================= Size =========================\n\n\n  const [panelSizes, itemPxSizes, itemPtgSizes, itemPtgMinSizes, itemPtgMaxSizes, updateSizes] = useSizes(items, containerSize); // ====================== Resizable =======================\n\n  const resizableInfos = useResizable(items, itemPxSizes, isRTL);\n  const [onOffsetStart, onOffsetUpdate, onOffsetEnd, onCollapse, movingIndex] = useResize(items, resizableInfos, itemPtgSizes, containerSize, updateSizes, isRTL); // ======================== Events ========================\n\n  const onInternalResizeStart = useEvent(index => {\n    onOffsetStart(index);\n    onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(itemPxSizes);\n  });\n  const onInternalResizeUpdate = useEvent((index, offset, lazyEnd) => {\n    const nextSizes = onOffsetUpdate(index, offset);\n\n    if (lazyEnd) {\n      onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n    } else {\n      onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    }\n  });\n  const onInternalResizeEnd = useEvent(() => {\n    onOffsetEnd();\n    onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(itemPxSizes);\n  });\n  const onInternalCollapse = useEvent((index, type) => {\n    const nextSizes = onCollapse(index, type);\n    onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n  }); // ======================== Styles ========================\n\n  const containerClassName = classNames(prefixCls, className, `${prefixCls}-${layout}`, {\n    [`${prefixCls}-rtl`]: isRTL\n  }, rootClassName, contextClassName, cssVarCls, rootCls, hashId); // ======================== Render ========================\n\n  const maskCls = `${prefixCls}-mask`;\n  const stackSizes = React.useMemo(() => {\n    const mergedSizes = [];\n    let stack = 0;\n\n    for (let i = 0; i < items.length; i += 1) {\n      stack += itemPtgSizes[i];\n      mergedSizes.push(stack);\n    }\n\n    return mergedSizes;\n  }, [itemPtgSizes]);\n  const mergedStyle = Object.assign(Object.assign({}, contextStyle), style);\n  return wrapCSSVar( /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onContainerResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyle,\n    className: containerClassName\n  }, items.map((item, idx) => {\n    // Panel\n    const panel = /*#__PURE__*/React.createElement(InternalPanel, Object.assign({}, item, {\n      prefixCls: prefixCls,\n      size: panelSizes[idx]\n    })); // Split Bar\n\n    let splitBar = null;\n    const resizableInfo = resizableInfos[idx];\n\n    if (resizableInfo) {\n      const ariaMinStart = (stackSizes[idx - 1] || 0) + itemPtgMinSizes[idx];\n      const ariaMinEnd = (stackSizes[idx + 1] || 100) - itemPtgMaxSizes[idx + 1];\n      const ariaMaxStart = (stackSizes[idx - 1] || 0) + itemPtgMaxSizes[idx];\n      const ariaMaxEnd = (stackSizes[idx + 1] || 100) - itemPtgMinSizes[idx + 1];\n      splitBar = /*#__PURE__*/React.createElement(SplitBar, {\n        lazy: lazy,\n        index: idx,\n        active: movingIndex === idx,\n        prefixCls: prefixCls,\n        vertical: isVertical,\n        resizable: resizableInfo.resizable,\n        ariaNow: stackSizes[idx] * 100,\n        ariaMin: Math.max(ariaMinStart, ariaMinEnd) * 100,\n        ariaMax: Math.min(ariaMaxStart, ariaMaxEnd) * 100,\n        startCollapsible: resizableInfo.startCollapsible,\n        endCollapsible: resizableInfo.endCollapsible,\n        onOffsetStart: onInternalResizeStart,\n        onOffsetUpdate: (index, offsetX, offsetY, lazyEnd) => {\n          let offset = isVertical ? offsetY : offsetX;\n\n          if (reverse) {\n            offset = -offset;\n          }\n\n          onInternalResizeUpdate(index, offset, lazyEnd);\n        },\n        onOffsetEnd: onInternalResizeEnd,\n        onCollapse: onInternalCollapse,\n        containerSize: containerSize || 0\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: `split-panel-${idx}`\n    }, panel, splitBar);\n  }), typeof movingIndex === 'number' && /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: classNames(maskCls, `${maskCls}-${layout}`)\n  }))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Splitter.displayName = 'Splitter';\n}\n\nexport default Splitter;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/splitter/Splitter.js"],"names":["React","useState","classNames","ResizeObserver","useEvent","devUseWarning","useComponentConfig","useCSSVarCls","useItems","useResizable","useResize","useSizes","InternalPanel","SplitBar","useStyle","Splitter","props","prefixCls","customizePrefixCls","className","style","layout","children","rootClassName","onResizeStart","onResize","onResizeEnd","lazy","getPrefixCls","direction","contextClassName","contextStyle","rootCls","wrapCSSVar","hashId","cssVarCls","isVertical","isRTL","reverse","items","process","env","NODE_ENV","warning","existSize","existUndefinedSize","forEach","item","size","undefined","containerSize","setContainerSize","onContainerResize","offsetWidth","offsetHeight","panelSizes","itemPxSizes","itemPtgSizes","itemPtgMinSizes","itemPtgMaxSizes","updateSizes","resizableInfos","onOffsetStart","onOffsetUpdate","onOffsetEnd","onCollapse","movingIndex","onInternalResizeStart","index","onInternalResizeUpdate","offset","lazyEnd","nextSizes","onInternalResizeEnd","onInternalCollapse","type","containerClassName","maskCls","stackSizes","useMemo","mergedSizes","stack","i","length","push","mergedStyle","Object","assign","createElement","map","idx","panel","splitBar","resizableInfo","ariaMinStart","ariaMinEnd","ariaMaxStart","ariaMaxEnd","active","vertical","resizable","ariaNow","ariaMin","Math","max","ariaMax","min","startCollapsible","endCollapsible","offsetX","offsetY","Fragment","key","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport { devUseWarning } from '../_util/warning';\nimport { useComponentConfig } from '../config-provider/context';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useItems from './hooks/useItems';\nimport useResizable from './hooks/useResizable';\nimport useResize from './hooks/useResize';\nimport useSizes from './hooks/useSizes';\nimport { InternalPanel } from './Panel';\nimport SplitBar from './SplitBar';\nimport useStyle from './style';\nconst Splitter = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    style,\n    layout = 'horizontal',\n    children,\n    rootClassName,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    lazy\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    className: contextClassName,\n    style: contextStyle\n  } = useComponentConfig('splitter');\n  const prefixCls = getPrefixCls('splitter', customizePrefixCls);\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  // ======================== Direct ========================\n  const isVertical = layout === 'vertical';\n  const isRTL = direction === 'rtl';\n  const reverse = !isVertical && isRTL;\n  // ====================== Items Data ======================\n  const items = useItems(children);\n  // >>> Warning for uncontrolled\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Splitter');\n    let existSize = false;\n    let existUndefinedSize = false;\n    items.forEach(item => {\n      if (item.size !== undefined) {\n        existSize = true;\n      } else {\n        existUndefinedSize = true;\n      }\n    });\n    if (existSize && existUndefinedSize && !onResize) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usage', 'When part of `Splitter.Panel` has `size`, `onResize` is required or change `size` to `defaultSize`.') : void 0;\n    }\n  }\n  // ====================== Container =======================\n  const [containerSize, setContainerSize] = useState();\n  const onContainerResize = size => {\n    const {\n      offsetWidth,\n      offsetHeight\n    } = size;\n    const containerSize = isVertical ? offsetHeight : offsetWidth;\n    // Skip when container has no size, Such as nested in a hidden tab panel\n    // to fix: https://github.com/ant-design/ant-design/issues/51106\n    if (containerSize === 0) {\n      return;\n    }\n    setContainerSize(containerSize);\n  };\n  // ========================= Size =========================\n  const [panelSizes, itemPxSizes, itemPtgSizes, itemPtgMinSizes, itemPtgMaxSizes, updateSizes] = useSizes(items, containerSize);\n  // ====================== Resizable =======================\n  const resizableInfos = useResizable(items, itemPxSizes, isRTL);\n  const [onOffsetStart, onOffsetUpdate, onOffsetEnd, onCollapse, movingIndex] = useResize(items, resizableInfos, itemPtgSizes, containerSize, updateSizes, isRTL);\n  // ======================== Events ========================\n  const onInternalResizeStart = useEvent(index => {\n    onOffsetStart(index);\n    onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(itemPxSizes);\n  });\n  const onInternalResizeUpdate = useEvent((index, offset, lazyEnd) => {\n    const nextSizes = onOffsetUpdate(index, offset);\n    if (lazyEnd) {\n      onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n    } else {\n      onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    }\n  });\n  const onInternalResizeEnd = useEvent(() => {\n    onOffsetEnd();\n    onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(itemPxSizes);\n  });\n  const onInternalCollapse = useEvent((index, type) => {\n    const nextSizes = onCollapse(index, type);\n    onResize === null || onResize === void 0 ? void 0 : onResize(nextSizes);\n    onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(nextSizes);\n  });\n  // ======================== Styles ========================\n  const containerClassName = classNames(prefixCls, className, `${prefixCls}-${layout}`, {\n    [`${prefixCls}-rtl`]: isRTL\n  }, rootClassName, contextClassName, cssVarCls, rootCls, hashId);\n  // ======================== Render ========================\n  const maskCls = `${prefixCls}-mask`;\n  const stackSizes = React.useMemo(() => {\n    const mergedSizes = [];\n    let stack = 0;\n    for (let i = 0; i < items.length; i += 1) {\n      stack += itemPtgSizes[i];\n      mergedSizes.push(stack);\n    }\n    return mergedSizes;\n  }, [itemPtgSizes]);\n  const mergedStyle = Object.assign(Object.assign({}, contextStyle), style);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onContainerResize\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: mergedStyle,\n    className: containerClassName\n  }, items.map((item, idx) => {\n    // Panel\n    const panel = /*#__PURE__*/React.createElement(InternalPanel, Object.assign({}, item, {\n      prefixCls: prefixCls,\n      size: panelSizes[idx]\n    }));\n    // Split Bar\n    let splitBar = null;\n    const resizableInfo = resizableInfos[idx];\n    if (resizableInfo) {\n      const ariaMinStart = (stackSizes[idx - 1] || 0) + itemPtgMinSizes[idx];\n      const ariaMinEnd = (stackSizes[idx + 1] || 100) - itemPtgMaxSizes[idx + 1];\n      const ariaMaxStart = (stackSizes[idx - 1] || 0) + itemPtgMaxSizes[idx];\n      const ariaMaxEnd = (stackSizes[idx + 1] || 100) - itemPtgMinSizes[idx + 1];\n      splitBar = /*#__PURE__*/React.createElement(SplitBar, {\n        lazy: lazy,\n        index: idx,\n        active: movingIndex === idx,\n        prefixCls: prefixCls,\n        vertical: isVertical,\n        resizable: resizableInfo.resizable,\n        ariaNow: stackSizes[idx] * 100,\n        ariaMin: Math.max(ariaMinStart, ariaMinEnd) * 100,\n        ariaMax: Math.min(ariaMaxStart, ariaMaxEnd) * 100,\n        startCollapsible: resizableInfo.startCollapsible,\n        endCollapsible: resizableInfo.endCollapsible,\n        onOffsetStart: onInternalResizeStart,\n        onOffsetUpdate: (index, offsetX, offsetY, lazyEnd) => {\n          let offset = isVertical ? offsetY : offsetX;\n          if (reverse) {\n            offset = -offset;\n          }\n          onInternalResizeUpdate(index, offset, lazyEnd);\n        },\n        onOffsetEnd: onInternalResizeEnd,\n        onCollapse: onInternalCollapse,\n        containerSize: containerSize || 0\n      });\n    }\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: `split-panel-${idx}`\n    }, panel, splitBar);\n  }), typeof movingIndex === 'number' && (/*#__PURE__*/React.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: classNames(maskCls, `${maskCls}-${layout}`)\n  })))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Splitter.displayName = 'Splitter';\n}\nexport default Splitter;"]},"metadata":{},"sourceType":"module"}