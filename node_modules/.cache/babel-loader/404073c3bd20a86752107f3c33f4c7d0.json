{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp, react/prop-types */\n\nimport classNames from 'classnames';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport { fillRef, getNodeRef, supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport { Context } from \"./context\";\nimport DomWrapper from \"./DomWrapper\";\nimport useStatus from \"./hooks/useStatus\";\nimport { isActive } from \"./hooks/useStepQueue\";\nimport { STATUS_NONE, STEP_PREPARE, STEP_START } from \"./interface\";\nimport { getTransitionName, supportTransition } from \"./util/motion\";\n/**\n * `transitionSupport` is used for none transition test case.\n * Default we use browser transition event support check.\n */\n\nexport function genCSSMotion(config) {\n  var transitionSupport = config;\n\n  if (_typeof(config) === 'object') {\n    transitionSupport = config.transitionSupport;\n  }\n\n  function isSupportTransition(props, contextMotion) {\n    return !!(props.motionName && transitionSupport && contextMotion !== false);\n  }\n\n  var CSSMotion = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var _props$visible = props.visible,\n        visible = _props$visible === void 0 ? true : _props$visible,\n        _props$removeOnLeave = props.removeOnLeave,\n        removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave,\n        forceRender = props.forceRender,\n        children = props.children,\n        motionName = props.motionName,\n        leavedClassName = props.leavedClassName,\n        eventProps = props.eventProps;\n\n    var _React$useContext = React.useContext(Context),\n        contextMotion = _React$useContext.motion;\n\n    var supportMotion = isSupportTransition(props, contextMotion); // Ref to the react node, it may be a HTMLElement\n\n    var nodeRef = useRef(); // Ref to the dom wrapper in case ref can not pass to HTMLElement\n\n    var wrapperNodeRef = useRef();\n\n    function getDomElement() {\n      try {\n        // Here we're avoiding call for findDOMNode since it's deprecated\n        // in strict mode. We're calling it only when node ref is not\n        // an instance of DOM HTMLElement. Otherwise use\n        // findDOMNode as a final resort\n        return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);\n      } catch (e) {\n        // Only happen when `motionDeadline` trigger but element removed.\n        return null;\n      }\n    }\n\n    var _useStatus = useStatus(supportMotion, visible, getDomElement, props),\n        _useStatus2 = _slicedToArray(_useStatus, 4),\n        status = _useStatus2[0],\n        statusStep = _useStatus2[1],\n        statusStyle = _useStatus2[2],\n        mergedVisible = _useStatus2[3]; // Record whether content has rendered\n    // Will return null for un-rendered even when `removeOnLeave={false}`\n\n\n    var renderedRef = React.useRef(mergedVisible);\n\n    if (mergedVisible) {\n      renderedRef.current = true;\n    } // ====================== Refs ======================\n\n\n    var setNodeRef = React.useCallback(function (node) {\n      nodeRef.current = node;\n      fillRef(ref, node);\n    }, [ref]); // ===================== Render =====================\n\n    var motionChildren;\n\n    var mergedProps = _objectSpread(_objectSpread({}, eventProps), {}, {\n      visible: visible\n    });\n\n    if (!children) {\n      // No children\n      motionChildren = null;\n    } else if (status === STATUS_NONE) {\n      // Stable children\n      if (mergedVisible) {\n        motionChildren = children(_objectSpread({}, mergedProps), setNodeRef);\n      } else if (!removeOnLeave && renderedRef.current && leavedClassName) {\n        motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n          className: leavedClassName\n        }), setNodeRef);\n      } else if (forceRender || !removeOnLeave && !leavedClassName) {\n        motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n          style: {\n            display: 'none'\n          }\n        }), setNodeRef);\n      } else {\n        motionChildren = null;\n      }\n    } else {\n      // In motion\n      var statusSuffix;\n\n      if (statusStep === STEP_PREPARE) {\n        statusSuffix = 'prepare';\n      } else if (isActive(statusStep)) {\n        statusSuffix = 'active';\n      } else if (statusStep === STEP_START) {\n        statusSuffix = 'start';\n      }\n\n      var motionCls = getTransitionName(motionName, \"\".concat(status, \"-\").concat(statusSuffix));\n      motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n        className: classNames(getTransitionName(motionName, status), _defineProperty(_defineProperty({}, motionCls, motionCls && statusSuffix), motionName, typeof motionName === 'string')),\n        style: statusStyle\n      }), setNodeRef);\n    } // Auto inject ref if child node not have `ref` props\n\n\n    if ( /*#__PURE__*/React.isValidElement(motionChildren) && supportRef(motionChildren)) {\n      var originNodeRef = getNodeRef(motionChildren);\n\n      if (!originNodeRef) {\n        motionChildren = /*#__PURE__*/React.cloneElement(motionChildren, {\n          ref: setNodeRef\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(DomWrapper, {\n      ref: wrapperNodeRef\n    }, motionChildren);\n  });\n  CSSMotion.displayName = 'CSSMotion';\n  return CSSMotion;\n}\nexport default genCSSMotion(supportTransition);","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-motion/es/CSSMotion.js"],"names":["_defineProperty","_objectSpread","_slicedToArray","_typeof","classNames","findDOMNode","fillRef","getNodeRef","supportRef","React","useRef","Context","DomWrapper","useStatus","isActive","STATUS_NONE","STEP_PREPARE","STEP_START","getTransitionName","supportTransition","genCSSMotion","config","transitionSupport","isSupportTransition","props","contextMotion","motionName","CSSMotion","forwardRef","ref","_props$visible","visible","_props$removeOnLeave","removeOnLeave","forceRender","children","leavedClassName","eventProps","_React$useContext","useContext","motion","supportMotion","nodeRef","wrapperNodeRef","getDomElement","current","HTMLElement","e","_useStatus","_useStatus2","status","statusStep","statusStyle","mergedVisible","renderedRef","setNodeRef","useCallback","node","motionChildren","mergedProps","className","style","display","statusSuffix","motionCls","concat","isValidElement","originNodeRef","cloneElement","createElement","displayName"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n/* eslint-disable react/default-props-match-prop-types, react/no-multi-comp, react/prop-types */\nimport classNames from 'classnames';\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport { fillRef, getNodeRef, supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport { Context } from \"./context\";\nimport DomWrapper from \"./DomWrapper\";\nimport useStatus from \"./hooks/useStatus\";\nimport { isActive } from \"./hooks/useStepQueue\";\nimport { STATUS_NONE, STEP_PREPARE, STEP_START } from \"./interface\";\nimport { getTransitionName, supportTransition } from \"./util/motion\";\n/**\n * `transitionSupport` is used for none transition test case.\n * Default we use browser transition event support check.\n */\nexport function genCSSMotion(config) {\n  var transitionSupport = config;\n  if (_typeof(config) === 'object') {\n    transitionSupport = config.transitionSupport;\n  }\n  function isSupportTransition(props, contextMotion) {\n    return !!(props.motionName && transitionSupport && contextMotion !== false);\n  }\n  var CSSMotion = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var _props$visible = props.visible,\n      visible = _props$visible === void 0 ? true : _props$visible,\n      _props$removeOnLeave = props.removeOnLeave,\n      removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave,\n      forceRender = props.forceRender,\n      children = props.children,\n      motionName = props.motionName,\n      leavedClassName = props.leavedClassName,\n      eventProps = props.eventProps;\n    var _React$useContext = React.useContext(Context),\n      contextMotion = _React$useContext.motion;\n    var supportMotion = isSupportTransition(props, contextMotion);\n\n    // Ref to the react node, it may be a HTMLElement\n    var nodeRef = useRef();\n    // Ref to the dom wrapper in case ref can not pass to HTMLElement\n    var wrapperNodeRef = useRef();\n    function getDomElement() {\n      try {\n        // Here we're avoiding call for findDOMNode since it's deprecated\n        // in strict mode. We're calling it only when node ref is not\n        // an instance of DOM HTMLElement. Otherwise use\n        // findDOMNode as a final resort\n        return nodeRef.current instanceof HTMLElement ? nodeRef.current : findDOMNode(wrapperNodeRef.current);\n      } catch (e) {\n        // Only happen when `motionDeadline` trigger but element removed.\n        return null;\n      }\n    }\n    var _useStatus = useStatus(supportMotion, visible, getDomElement, props),\n      _useStatus2 = _slicedToArray(_useStatus, 4),\n      status = _useStatus2[0],\n      statusStep = _useStatus2[1],\n      statusStyle = _useStatus2[2],\n      mergedVisible = _useStatus2[3];\n\n    // Record whether content has rendered\n    // Will return null for un-rendered even when `removeOnLeave={false}`\n    var renderedRef = React.useRef(mergedVisible);\n    if (mergedVisible) {\n      renderedRef.current = true;\n    }\n\n    // ====================== Refs ======================\n    var setNodeRef = React.useCallback(function (node) {\n      nodeRef.current = node;\n      fillRef(ref, node);\n    }, [ref]);\n\n    // ===================== Render =====================\n    var motionChildren;\n    var mergedProps = _objectSpread(_objectSpread({}, eventProps), {}, {\n      visible: visible\n    });\n    if (!children) {\n      // No children\n      motionChildren = null;\n    } else if (status === STATUS_NONE) {\n      // Stable children\n      if (mergedVisible) {\n        motionChildren = children(_objectSpread({}, mergedProps), setNodeRef);\n      } else if (!removeOnLeave && renderedRef.current && leavedClassName) {\n        motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n          className: leavedClassName\n        }), setNodeRef);\n      } else if (forceRender || !removeOnLeave && !leavedClassName) {\n        motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n          style: {\n            display: 'none'\n          }\n        }), setNodeRef);\n      } else {\n        motionChildren = null;\n      }\n    } else {\n      // In motion\n      var statusSuffix;\n      if (statusStep === STEP_PREPARE) {\n        statusSuffix = 'prepare';\n      } else if (isActive(statusStep)) {\n        statusSuffix = 'active';\n      } else if (statusStep === STEP_START) {\n        statusSuffix = 'start';\n      }\n      var motionCls = getTransitionName(motionName, \"\".concat(status, \"-\").concat(statusSuffix));\n      motionChildren = children(_objectSpread(_objectSpread({}, mergedProps), {}, {\n        className: classNames(getTransitionName(motionName, status), _defineProperty(_defineProperty({}, motionCls, motionCls && statusSuffix), motionName, typeof motionName === 'string')),\n        style: statusStyle\n      }), setNodeRef);\n    }\n\n    // Auto inject ref if child node not have `ref` props\n    if ( /*#__PURE__*/React.isValidElement(motionChildren) && supportRef(motionChildren)) {\n      var originNodeRef = getNodeRef(motionChildren);\n      if (!originNodeRef) {\n        motionChildren = /*#__PURE__*/React.cloneElement(motionChildren, {\n          ref: setNodeRef\n        });\n      }\n    }\n    return /*#__PURE__*/React.createElement(DomWrapper, {\n      ref: wrapperNodeRef\n    }, motionChildren);\n  });\n  CSSMotion.displayName = 'CSSMotion';\n  return CSSMotion;\n}\nexport default genCSSMotion(supportTransition);"]},"metadata":{},"sourceType":"module"}