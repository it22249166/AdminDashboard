{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useContext } from 'react';\nimport RcColorPicker from '@rc-component/color-picker';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport Segmented from '../../../segmented';\nimport { AggregationColor } from '../../color';\nimport { PanelPickerContext } from '../../context';\nimport { genAlphaColor, generateColor } from '../../util';\nimport ColorClear from '../ColorClear';\nimport ColorInput from '../ColorInput';\nimport ColorSlider from '../ColorSlider';\nimport GradientColorBar from './GradientColorBar';\nconst components = {\n  slider: ColorSlider\n};\n\nconst PanelPicker = () => {\n  const panelPickerContext = useContext(PanelPickerContext);\n\n  const {\n    mode,\n    onModeChange,\n    modeOptions,\n    prefixCls,\n    allowClear,\n    value,\n    disabledAlpha,\n    onChange,\n    onClear,\n    onChangeComplete,\n    activeIndex,\n    gradientDragging\n  } = panelPickerContext,\n        injectProps = __rest(panelPickerContext, [\"mode\", \"onModeChange\", \"modeOptions\", \"prefixCls\", \"allowClear\", \"value\", \"disabledAlpha\", \"onChange\", \"onClear\", \"onChangeComplete\", \"activeIndex\", \"gradientDragging\"]); // ============================ Colors ============================\n\n\n  const colors = React.useMemo(() => {\n    if (!value.cleared) {\n      return value.getColors();\n    }\n\n    return [{\n      percent: 0,\n      color: new AggregationColor('')\n    }, {\n      percent: 100,\n      color: new AggregationColor('')\n    }];\n  }, [value]); // ========================= Single Color =========================\n\n  const isSingle = !value.isGradient(); // We cache the point color in case user drag the gradient point across another one\n\n  const [lockedColor, setLockedColor] = React.useState(value); // Use layout effect here since `useEffect` will cause a blink when mouseDown\n\n  useLayoutEffect(() => {\n    var _a;\n\n    if (!isSingle) {\n      setLockedColor((_a = colors[activeIndex]) === null || _a === void 0 ? void 0 : _a.color);\n    }\n  }, [gradientDragging, activeIndex]);\n  const activeColor = React.useMemo(() => {\n    var _a;\n\n    if (isSingle) {\n      return value;\n    } // Use cache when dragging. User can not operation panel when dragging.\n\n\n    if (gradientDragging) {\n      return lockedColor;\n    }\n\n    return (_a = colors[activeIndex]) === null || _a === void 0 ? void 0 : _a.color;\n  }, [value, activeIndex, isSingle, lockedColor, gradientDragging]); // ========================= Picker Color =========================\n\n  const [pickerColor, setPickerColor] = React.useState(activeColor);\n  const [forceSync, setForceSync] = React.useState(0);\n  const mergedPickerColor = (pickerColor === null || pickerColor === void 0 ? void 0 : pickerColor.equals(activeColor)) ? activeColor : pickerColor;\n  useLayoutEffect(() => {\n    setPickerColor(activeColor);\n  }, [forceSync, activeColor === null || activeColor === void 0 ? void 0 : activeColor.toHexString()]); // ============================ Change ============================\n\n  const fillColor = (nextColor, info) => {\n    let submitColor = generateColor(nextColor); // Fill alpha color to 100% if origin is cleared color\n\n    if (value.cleared) {\n      const rgb = submitColor.toRgb(); // Auto fill color if origin is `0/0/0` to enhance user experience\n\n      if (!rgb.r && !rgb.g && !rgb.b && info) {\n        const {\n          type: infoType,\n          value: infoValue = 0\n        } = info;\n        submitColor = new AggregationColor({\n          h: infoType === 'hue' ? infoValue : 0,\n          s: 1,\n          b: 1,\n          a: infoType === 'alpha' ? infoValue / 100 : 1\n        });\n      } else {\n        submitColor = genAlphaColor(submitColor);\n      }\n    }\n\n    if (mode === 'single') {\n      return submitColor;\n    }\n\n    const nextColors = _toConsumableArray(colors);\n\n    nextColors[activeIndex] = Object.assign(Object.assign({}, nextColors[activeIndex]), {\n      color: submitColor\n    });\n    return new AggregationColor(nextColors);\n  };\n\n  const onPickerChange = (colorValue, fromPicker, info) => {\n    const nextColor = fillColor(colorValue, info);\n    setPickerColor(nextColor.isGradient() ? nextColor.getColors()[activeIndex].color : nextColor);\n    onChange(nextColor, fromPicker);\n  };\n\n  const onInternalChangeComplete = (nextColor, info) => {\n    // Trigger complete event\n    onChangeComplete(fillColor(nextColor, info)); // Back of origin color in case in controlled\n    // This will set after `onChangeComplete` to avoid `setState` trigger rerender\n    // which will make `fillColor` get wrong `color.cleared` state\n\n    setForceSync(ori => ori + 1);\n  };\n\n  const onInputChange = colorValue => {\n    onChange(fillColor(colorValue));\n  }; // ============================ Render ============================\n  // Operation bar\n\n\n  let operationNode = null;\n  const showMode = modeOptions.length > 1;\n\n  if (allowClear || showMode) {\n    operationNode = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-operation`\n    }, showMode && /*#__PURE__*/React.createElement(Segmented, {\n      size: \"small\",\n      options: modeOptions,\n      value: mode,\n      onChange: onModeChange\n    }), /*#__PURE__*/React.createElement(ColorClear, Object.assign({\n      prefixCls: prefixCls,\n      value: value,\n      onChange: clearColor => {\n        onChange(clearColor);\n        onClear === null || onClear === void 0 ? void 0 : onClear();\n      }\n    }, injectProps)));\n  } // Return\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, operationNode, /*#__PURE__*/React.createElement(GradientColorBar, Object.assign({}, panelPickerContext, {\n    colors: colors\n  })), /*#__PURE__*/React.createElement(RcColorPicker, {\n    prefixCls: prefixCls,\n    value: mergedPickerColor === null || mergedPickerColor === void 0 ? void 0 : mergedPickerColor.toHsb(),\n    disabledAlpha: disabledAlpha,\n    onChange: (colorValue, info) => {\n      onPickerChange(colorValue, true, info);\n    },\n    onChangeComplete: (colorValue, info) => {\n      onInternalChangeComplete(colorValue, info);\n    },\n    components: components\n  }), /*#__PURE__*/React.createElement(ColorInput, Object.assign({\n    value: activeColor,\n    onChange: onInputChange,\n    prefixCls: prefixCls,\n    disabledAlpha: disabledAlpha\n  }, injectProps)));\n};\n\nexport default PanelPicker;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/color-picker/components/PanelPicker/index.js"],"names":["_toConsumableArray","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","useContext","RcColorPicker","useLayoutEffect","Segmented","AggregationColor","PanelPickerContext","genAlphaColor","generateColor","ColorClear","ColorInput","ColorSlider","GradientColorBar","components","slider","PanelPicker","panelPickerContext","mode","onModeChange","modeOptions","prefixCls","allowClear","value","disabledAlpha","onChange","onClear","onChangeComplete","activeIndex","gradientDragging","injectProps","colors","useMemo","cleared","getColors","percent","color","isSingle","isGradient","lockedColor","setLockedColor","useState","_a","activeColor","pickerColor","setPickerColor","forceSync","setForceSync","mergedPickerColor","equals","toHexString","fillColor","nextColor","info","submitColor","rgb","toRgb","r","g","b","type","infoType","infoValue","h","a","nextColors","assign","onPickerChange","colorValue","fromPicker","onInternalChangeComplete","ori","onInputChange","operationNode","showMode","createElement","className","size","options","clearColor","Fragment","toHsb"],"mappings":"AAAA;;AAEA,OAAOA,kBAAP,MAA+B,8CAA/B;;AACA,IAAIC,MAAM,GAAG,QAAQ,KAAKA,MAAb,IAAuB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAT,IAAcH,CAAd,EAAiB,IAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,CAArC,EAAwCG,CAAxC,KAA8CF,CAAC,CAACO,OAAF,CAAUL,CAAV,IAAe,CAAjE,EAAoED,CAAC,CAACC,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAR;;AACrF,MAAIH,CAAC,IAAI,IAAL,IAAa,OAAOI,MAAM,CAACK,qBAAd,KAAwC,UAAzD,EAAqE,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWP,CAAC,GAAGC,MAAM,CAACK,qBAAP,CAA6BT,CAA7B,CAApB,EAAqDU,CAAC,GAAGP,CAAC,CAACQ,MAA3D,EAAmED,CAAC,EAApE,EAAwE;AAC3I,QAAIT,CAAC,CAACO,OAAF,CAAUL,CAAC,CAACO,CAAD,CAAX,IAAkB,CAAlB,IAAuBN,MAAM,CAACC,SAAP,CAAiBO,oBAAjB,CAAsCL,IAAtC,CAA2CP,CAA3C,EAA8CG,CAAC,CAACO,CAAD,CAA/C,CAA3B,EAAgFR,CAAC,CAACC,CAAC,CAACO,CAAD,CAAF,CAAD,GAAUV,CAAC,CAACG,CAAC,CAACO,CAAD,CAAF,CAAX;AACjF;AACD,SAAOR,CAAP;AACD,CAPD;;AAQA,OAAOW,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,YAA7C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAEH;AADS,CAAnB;;AAGA,MAAMI,WAAW,GAAG,MAAM;AACxB,QAAMC,kBAAkB,GAAGf,UAAU,CAACK,kBAAD,CAArC;;AACA,QAAM;AACFW,IAAAA,IADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,SAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,KANE;AAOFC,IAAAA,aAPE;AAQFC,IAAAA,QARE;AASFC,IAAAA,OATE;AAUFC,IAAAA,gBAVE;AAWFC,IAAAA,WAXE;AAYFC,IAAAA;AAZE,MAaAZ,kBAbN;AAAA,QAcEa,WAAW,GAAG3C,MAAM,CAAC8B,kBAAD,EAAqB,CAAC,MAAD,EAAS,cAAT,EAAyB,aAAzB,EAAwC,WAAxC,EAAqD,YAArD,EAAmE,OAAnE,EAA4E,eAA5E,EAA6F,UAA7F,EAAyG,SAAzG,EAAoH,kBAApH,EAAwI,aAAxI,EAAuJ,kBAAvJ,CAArB,CAdtB,CAFwB,CAiBxB;;;AACA,QAAMc,MAAM,GAAG9B,KAAK,CAAC+B,OAAN,CAAc,MAAM;AACjC,QAAI,CAACT,KAAK,CAACU,OAAX,EAAoB;AAClB,aAAOV,KAAK,CAACW,SAAN,EAAP;AACD;;AACD,WAAO,CAAC;AACNC,MAAAA,OAAO,EAAE,CADH;AAENC,MAAAA,KAAK,EAAE,IAAI9B,gBAAJ,CAAqB,EAArB;AAFD,KAAD,EAGJ;AACD6B,MAAAA,OAAO,EAAE,GADR;AAEDC,MAAAA,KAAK,EAAE,IAAI9B,gBAAJ,CAAqB,EAArB;AAFN,KAHI,CAAP;AAOD,GAXc,EAWZ,CAACiB,KAAD,CAXY,CAAf,CAlBwB,CA8BxB;;AACA,QAAMc,QAAQ,GAAG,CAACd,KAAK,CAACe,UAAN,EAAlB,CA/BwB,CAgCxB;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCvC,KAAK,CAACwC,QAAN,CAAelB,KAAf,CAAtC,CAjCwB,CAkCxB;;AACAnB,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIsC,EAAJ;;AACA,QAAI,CAACL,QAAL,EAAe;AACbG,MAAAA,cAAc,CAAC,CAACE,EAAE,GAAGX,MAAM,CAACH,WAAD,CAAZ,MAA+B,IAA/B,IAAuCc,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACN,KAApE,CAAd;AACD;AACF,GALc,EAKZ,CAACP,gBAAD,EAAmBD,WAAnB,CALY,CAAf;AAMA,QAAMe,WAAW,GAAG1C,KAAK,CAAC+B,OAAN,CAAc,MAAM;AACtC,QAAIU,EAAJ;;AACA,QAAIL,QAAJ,EAAc;AACZ,aAAOd,KAAP;AACD,KAJqC,CAKtC;;;AACA,QAAIM,gBAAJ,EAAsB;AACpB,aAAOU,WAAP;AACD;;AACD,WAAO,CAACG,EAAE,GAAGX,MAAM,CAACH,WAAD,CAAZ,MAA+B,IAA/B,IAAuCc,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACN,KAA1E;AACD,GAVmB,EAUjB,CAACb,KAAD,EAAQK,WAAR,EAAqBS,QAArB,EAA+BE,WAA/B,EAA4CV,gBAA5C,CAViB,CAApB,CAzCwB,CAoDxB;;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgC5C,KAAK,CAACwC,QAAN,CAAeE,WAAf,CAAtC;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4B9C,KAAK,CAACwC,QAAN,CAAe,CAAf,CAAlC;AACA,QAAMO,iBAAiB,GAAG,CAACJ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACK,MAAZ,CAAmBN,WAAnB,CAA3D,IAA8FA,WAA9F,GAA4GC,WAAtI;AACAxC,EAAAA,eAAe,CAAC,MAAM;AACpByC,IAAAA,cAAc,CAACF,WAAD,CAAd;AACD,GAFc,EAEZ,CAACG,SAAD,EAAYH,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACO,WAAZ,EAAtE,CAFY,CAAf,CAxDwB,CA2DxB;;AACA,QAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACrC,QAAIC,WAAW,GAAG7C,aAAa,CAAC2C,SAAD,CAA/B,CADqC,CAErC;;AACA,QAAI7B,KAAK,CAACU,OAAV,EAAmB;AACjB,YAAMsB,GAAG,GAAGD,WAAW,CAACE,KAAZ,EAAZ,CADiB,CAEjB;;AACA,UAAI,CAACD,GAAG,CAACE,CAAL,IAAU,CAACF,GAAG,CAACG,CAAf,IAAoB,CAACH,GAAG,CAACI,CAAzB,IAA8BN,IAAlC,EAAwC;AACtC,cAAM;AACJO,UAAAA,IAAI,EAAEC,QADF;AAEJtC,UAAAA,KAAK,EAAEuC,SAAS,GAAG;AAFf,YAGFT,IAHJ;AAIAC,QAAAA,WAAW,GAAG,IAAIhD,gBAAJ,CAAqB;AACjCyD,UAAAA,CAAC,EAAEF,QAAQ,KAAK,KAAb,GAAqBC,SAArB,GAAiC,CADH;AAEjC1E,UAAAA,CAAC,EAAE,CAF8B;AAGjCuE,UAAAA,CAAC,EAAE,CAH8B;AAIjCK,UAAAA,CAAC,EAAEH,QAAQ,KAAK,OAAb,GAAuBC,SAAS,GAAG,GAAnC,GAAyC;AAJX,SAArB,CAAd;AAMD,OAXD,MAWO;AACLR,QAAAA,WAAW,GAAG9C,aAAa,CAAC8C,WAAD,CAA3B;AACD;AACF;;AACD,QAAIpC,IAAI,KAAK,QAAb,EAAuB;AACrB,aAAOoC,WAAP;AACD;;AACD,UAAMW,UAAU,GAAG/E,kBAAkB,CAAC6C,MAAD,CAArC;;AACAkC,IAAAA,UAAU,CAACrC,WAAD,CAAV,GAA0BpC,MAAM,CAAC0E,MAAP,CAAc1E,MAAM,CAAC0E,MAAP,CAAc,EAAd,EAAkBD,UAAU,CAACrC,WAAD,CAA5B,CAAd,EAA0D;AAClFQ,MAAAA,KAAK,EAAEkB;AAD2E,KAA1D,CAA1B;AAGA,WAAO,IAAIhD,gBAAJ,CAAqB2D,UAArB,CAAP;AACD,GA7BD;;AA8BA,QAAME,cAAc,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBhB,IAAzB,KAAkC;AACvD,UAAMD,SAAS,GAAGD,SAAS,CAACiB,UAAD,EAAaf,IAAb,CAA3B;AACAR,IAAAA,cAAc,CAACO,SAAS,CAACd,UAAV,KAAyBc,SAAS,CAAClB,SAAV,GAAsBN,WAAtB,EAAmCQ,KAA5D,GAAoEgB,SAArE,CAAd;AACA3B,IAAAA,QAAQ,CAAC2B,SAAD,EAAYiB,UAAZ,CAAR;AACD,GAJD;;AAKA,QAAMC,wBAAwB,GAAG,CAAClB,SAAD,EAAYC,IAAZ,KAAqB;AACpD;AACA1B,IAAAA,gBAAgB,CAACwB,SAAS,CAACC,SAAD,EAAYC,IAAZ,CAAV,CAAhB,CAFoD,CAGpD;AACA;AACA;;AACAN,IAAAA,YAAY,CAACwB,GAAG,IAAIA,GAAG,GAAG,CAAd,CAAZ;AACD,GAPD;;AAQA,QAAMC,aAAa,GAAGJ,UAAU,IAAI;AAClC3C,IAAAA,QAAQ,CAAC0B,SAAS,CAACiB,UAAD,CAAV,CAAR;AACD,GAFD,CAvGwB,CA0GxB;AACA;;;AACA,MAAIK,aAAa,GAAG,IAApB;AACA,QAAMC,QAAQ,GAAGtD,WAAW,CAACrB,MAAZ,GAAqB,CAAtC;;AACA,MAAIuB,UAAU,IAAIoD,QAAlB,EAA4B;AAC1BD,IAAAA,aAAa,GAAG,aAAaxE,KAAK,CAAC0E,aAAN,CAAoB,KAApB,EAA2B;AACtDC,MAAAA,SAAS,EAAG,GAAEvD,SAAU;AAD8B,KAA3B,EAE1BqD,QAAQ,IAAK,aAAazE,KAAK,CAAC0E,aAAN,CAAoBtE,SAApB,EAA+B;AAC1DwE,MAAAA,IAAI,EAAE,OADoD;AAE1DC,MAAAA,OAAO,EAAE1D,WAFiD;AAG1DG,MAAAA,KAAK,EAAEL,IAHmD;AAI1DO,MAAAA,QAAQ,EAAEN;AAJgD,KAA/B,CAFA,EAOxB,aAAalB,KAAK,CAAC0E,aAAN,CAAoBjE,UAApB,EAAgClB,MAAM,CAAC0E,MAAP,CAAc;AAC9D7C,MAAAA,SAAS,EAAEA,SADmD;AAE9DE,MAAAA,KAAK,EAAEA,KAFuD;AAG9DE,MAAAA,QAAQ,EAAEsD,UAAU,IAAI;AACtBtD,QAAAA,QAAQ,CAACsD,UAAD,CAAR;AACArD,QAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,EAAzD;AACD;AAN6D,KAAd,EAO/CI,WAP+C,CAAhC,CAPW,CAA7B;AAeD,GA9HuB,CA+HxB;;;AACA,SAAO,aAAa7B,KAAK,CAAC0E,aAAN,CAAoB1E,KAAK,CAAC+E,QAA1B,EAAoC,IAApC,EAA0CP,aAA1C,EAAyD,aAAaxE,KAAK,CAAC0E,aAAN,CAAoB9D,gBAApB,EAAsCrB,MAAM,CAAC0E,MAAP,CAAc,EAAd,EAAkBjD,kBAAlB,EAAsC;AACpKc,IAAAA,MAAM,EAAEA;AAD4J,GAAtC,CAAtC,CAAtE,EAEf,aAAa9B,KAAK,CAAC0E,aAAN,CAAoBxE,aAApB,EAAmC;AACnDkB,IAAAA,SAAS,EAAEA,SADwC;AAEnDE,IAAAA,KAAK,EAAEyB,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACiC,KAAlB,EAF1B;AAGnDzD,IAAAA,aAAa,EAAEA,aAHoC;AAInDC,IAAAA,QAAQ,EAAE,CAAC2C,UAAD,EAAaf,IAAb,KAAsB;AAC9Bc,MAAAA,cAAc,CAACC,UAAD,EAAa,IAAb,EAAmBf,IAAnB,CAAd;AACD,KANkD;AAOnD1B,IAAAA,gBAAgB,EAAE,CAACyC,UAAD,EAAaf,IAAb,KAAsB;AACtCiB,MAAAA,wBAAwB,CAACF,UAAD,EAAaf,IAAb,CAAxB;AACD,KATkD;AAUnDvC,IAAAA,UAAU,EAAEA;AAVuC,GAAnC,CAFE,EAahB,aAAab,KAAK,CAAC0E,aAAN,CAAoBhE,UAApB,EAAgCnB,MAAM,CAAC0E,MAAP,CAAc;AAC7D3C,IAAAA,KAAK,EAAEoB,WADsD;AAE7DlB,IAAAA,QAAQ,EAAE+C,aAFmD;AAG7DnD,IAAAA,SAAS,EAAEA,SAHkD;AAI7DG,IAAAA,aAAa,EAAEA;AAJ8C,GAAd,EAK9CM,WAL8C,CAAhC,CAbG,CAApB;AAmBD,CAnJD;;AAoJA,eAAed,WAAf","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext } from 'react';\nimport RcColorPicker from '@rc-component/color-picker';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport Segmented from '../../../segmented';\nimport { AggregationColor } from '../../color';\nimport { PanelPickerContext } from '../../context';\nimport { genAlphaColor, generateColor } from '../../util';\nimport ColorClear from '../ColorClear';\nimport ColorInput from '../ColorInput';\nimport ColorSlider from '../ColorSlider';\nimport GradientColorBar from './GradientColorBar';\nconst components = {\n  slider: ColorSlider\n};\nconst PanelPicker = () => {\n  const panelPickerContext = useContext(PanelPickerContext);\n  const {\n      mode,\n      onModeChange,\n      modeOptions,\n      prefixCls,\n      allowClear,\n      value,\n      disabledAlpha,\n      onChange,\n      onClear,\n      onChangeComplete,\n      activeIndex,\n      gradientDragging\n    } = panelPickerContext,\n    injectProps = __rest(panelPickerContext, [\"mode\", \"onModeChange\", \"modeOptions\", \"prefixCls\", \"allowClear\", \"value\", \"disabledAlpha\", \"onChange\", \"onClear\", \"onChangeComplete\", \"activeIndex\", \"gradientDragging\"]);\n  // ============================ Colors ============================\n  const colors = React.useMemo(() => {\n    if (!value.cleared) {\n      return value.getColors();\n    }\n    return [{\n      percent: 0,\n      color: new AggregationColor('')\n    }, {\n      percent: 100,\n      color: new AggregationColor('')\n    }];\n  }, [value]);\n  // ========================= Single Color =========================\n  const isSingle = !value.isGradient();\n  // We cache the point color in case user drag the gradient point across another one\n  const [lockedColor, setLockedColor] = React.useState(value);\n  // Use layout effect here since `useEffect` will cause a blink when mouseDown\n  useLayoutEffect(() => {\n    var _a;\n    if (!isSingle) {\n      setLockedColor((_a = colors[activeIndex]) === null || _a === void 0 ? void 0 : _a.color);\n    }\n  }, [gradientDragging, activeIndex]);\n  const activeColor = React.useMemo(() => {\n    var _a;\n    if (isSingle) {\n      return value;\n    }\n    // Use cache when dragging. User can not operation panel when dragging.\n    if (gradientDragging) {\n      return lockedColor;\n    }\n    return (_a = colors[activeIndex]) === null || _a === void 0 ? void 0 : _a.color;\n  }, [value, activeIndex, isSingle, lockedColor, gradientDragging]);\n  // ========================= Picker Color =========================\n  const [pickerColor, setPickerColor] = React.useState(activeColor);\n  const [forceSync, setForceSync] = React.useState(0);\n  const mergedPickerColor = (pickerColor === null || pickerColor === void 0 ? void 0 : pickerColor.equals(activeColor)) ? activeColor : pickerColor;\n  useLayoutEffect(() => {\n    setPickerColor(activeColor);\n  }, [forceSync, activeColor === null || activeColor === void 0 ? void 0 : activeColor.toHexString()]);\n  // ============================ Change ============================\n  const fillColor = (nextColor, info) => {\n    let submitColor = generateColor(nextColor);\n    // Fill alpha color to 100% if origin is cleared color\n    if (value.cleared) {\n      const rgb = submitColor.toRgb();\n      // Auto fill color if origin is `0/0/0` to enhance user experience\n      if (!rgb.r && !rgb.g && !rgb.b && info) {\n        const {\n          type: infoType,\n          value: infoValue = 0\n        } = info;\n        submitColor = new AggregationColor({\n          h: infoType === 'hue' ? infoValue : 0,\n          s: 1,\n          b: 1,\n          a: infoType === 'alpha' ? infoValue / 100 : 1\n        });\n      } else {\n        submitColor = genAlphaColor(submitColor);\n      }\n    }\n    if (mode === 'single') {\n      return submitColor;\n    }\n    const nextColors = _toConsumableArray(colors);\n    nextColors[activeIndex] = Object.assign(Object.assign({}, nextColors[activeIndex]), {\n      color: submitColor\n    });\n    return new AggregationColor(nextColors);\n  };\n  const onPickerChange = (colorValue, fromPicker, info) => {\n    const nextColor = fillColor(colorValue, info);\n    setPickerColor(nextColor.isGradient() ? nextColor.getColors()[activeIndex].color : nextColor);\n    onChange(nextColor, fromPicker);\n  };\n  const onInternalChangeComplete = (nextColor, info) => {\n    // Trigger complete event\n    onChangeComplete(fillColor(nextColor, info));\n    // Back of origin color in case in controlled\n    // This will set after `onChangeComplete` to avoid `setState` trigger rerender\n    // which will make `fillColor` get wrong `color.cleared` state\n    setForceSync(ori => ori + 1);\n  };\n  const onInputChange = colorValue => {\n    onChange(fillColor(colorValue));\n  };\n  // ============================ Render ============================\n  // Operation bar\n  let operationNode = null;\n  const showMode = modeOptions.length > 1;\n  if (allowClear || showMode) {\n    operationNode = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-operation`\n    }, showMode && (/*#__PURE__*/React.createElement(Segmented, {\n      size: \"small\",\n      options: modeOptions,\n      value: mode,\n      onChange: onModeChange\n    })), /*#__PURE__*/React.createElement(ColorClear, Object.assign({\n      prefixCls: prefixCls,\n      value: value,\n      onChange: clearColor => {\n        onChange(clearColor);\n        onClear === null || onClear === void 0 ? void 0 : onClear();\n      }\n    }, injectProps)));\n  }\n  // Return\n  return /*#__PURE__*/React.createElement(React.Fragment, null, operationNode, /*#__PURE__*/React.createElement(GradientColorBar, Object.assign({}, panelPickerContext, {\n    colors: colors\n  })), /*#__PURE__*/React.createElement(RcColorPicker, {\n    prefixCls: prefixCls,\n    value: mergedPickerColor === null || mergedPickerColor === void 0 ? void 0 : mergedPickerColor.toHsb(),\n    disabledAlpha: disabledAlpha,\n    onChange: (colorValue, info) => {\n      onPickerChange(colorValue, true, info);\n    },\n    onChangeComplete: (colorValue, info) => {\n      onInternalChangeComplete(colorValue, info);\n    },\n    components: components\n  }), /*#__PURE__*/React.createElement(ColorInput, Object.assign({\n    value: activeColor,\n    onChange: onInputChange,\n    prefixCls: prefixCls,\n    disabledAlpha: disabledAlpha\n  }, injectProps)));\n};\nexport default PanelPicker;"]},"metadata":{},"sourceType":"module"}