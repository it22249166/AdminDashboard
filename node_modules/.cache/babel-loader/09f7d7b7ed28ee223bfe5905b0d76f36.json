{"ast":null,"code":"import { format } from \"../util\";\n\nvar pattern = function pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n\n      if (!rule.pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n\n      if (!_pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n};\n\nexport default pattern;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@rc-component/async-validator/es/rule/pattern.js"],"names":["format","pattern","rule","value","source","errors","options","RegExp","lastIndex","test","push","messages","mismatch","fullField","_pattern"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;;AACA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,OAA9C,EAAuD;AACnE,MAAIJ,IAAI,CAACD,OAAT,EAAkB;AAChB,QAAIC,IAAI,CAACD,OAAL,YAAwBM,MAA5B,EAAoC;AAClC;AACA;AACA;AACAL,MAAAA,IAAI,CAACD,OAAL,CAAaO,SAAb,GAAyB,CAAzB;;AACA,UAAI,CAACN,IAAI,CAACD,OAAL,CAAaQ,IAAb,CAAkBN,KAAlB,CAAL,EAA+B;AAC7BE,QAAAA,MAAM,CAACK,IAAP,CAAYV,MAAM,CAACM,OAAO,CAACK,QAAR,CAAiBV,OAAjB,CAAyBW,QAA1B,EAAoCV,IAAI,CAACW,SAAzC,EAAoDV,KAApD,EAA2DD,IAAI,CAACD,OAAhE,CAAlB;AACD;AACF,KARD,MAQO,IAAI,OAAOC,IAAI,CAACD,OAAZ,KAAwB,QAA5B,EAAsC;AAC3C,UAAIa,QAAQ,GAAG,IAAIP,MAAJ,CAAWL,IAAI,CAACD,OAAhB,CAAf;;AACA,UAAI,CAACa,QAAQ,CAACL,IAAT,CAAcN,KAAd,CAAL,EAA2B;AACzBE,QAAAA,MAAM,CAACK,IAAP,CAAYV,MAAM,CAACM,OAAO,CAACK,QAAR,CAAiBV,OAAjB,CAAyBW,QAA1B,EAAoCV,IAAI,CAACW,SAAzC,EAAoDV,KAApD,EAA2DD,IAAI,CAACD,OAAhE,CAAlB;AACD;AACF;AACF;AACF,CAjBD;;AAkBA,eAAeA,OAAf","sourcesContent":["import { format } from \"../util\";\nvar pattern = function pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n};\nexport default pattern;"]},"metadata":{},"sourceType":"module"}