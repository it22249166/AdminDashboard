{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { VALUE_SPLIT } from \"../utils/commonUtil\";\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\n\nexport default (function (options, fieldNames) {\n  var cacheRef = React.useRef({\n    options: [],\n    info: {\n      keyEntities: {},\n      pathKeyEntities: {}\n    }\n  });\n  var getEntities = React.useCallback(function () {\n    if (cacheRef.current.options !== options) {\n      cacheRef.current.options = options;\n      cacheRef.current.info = convertDataToEntities(options, {\n        fieldNames: fieldNames,\n        initWrapper: function initWrapper(wrapper) {\n          return _objectSpread(_objectSpread({}, wrapper), {}, {\n            pathKeyEntities: {}\n          });\n        },\n        processEntity: function processEntity(entity, wrapper) {\n          var pathKey = entity.nodes.map(function (node) {\n            return node[fieldNames.value];\n          }).join(VALUE_SPLIT);\n          wrapper.pathKeyEntities[pathKey] = entity; // Overwrite origin key.\n          // this is very hack but we need let conduct logic work with connect path\n\n          entity.key = pathKey;\n        }\n      });\n    }\n\n    return cacheRef.current.info.pathKeyEntities;\n  }, [fieldNames, options]);\n  return getEntities;\n});","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-cascader/es/hooks/useEntities.js"],"names":["_objectSpread","React","convertDataToEntities","VALUE_SPLIT","options","fieldNames","cacheRef","useRef","info","keyEntities","pathKeyEntities","getEntities","useCallback","current","initWrapper","wrapper","processEntity","entity","pathKey","nodes","map","node","value","join","key"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA;;AACA,gBAAgB,UAAUC,OAAV,EAAmBC,UAAnB,EAA+B;AAC7C,MAAIC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC1BH,IAAAA,OAAO,EAAE,EADiB;AAE1BI,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EAAE,EADT;AAEJC,MAAAA,eAAe,EAAE;AAFb;AAFoB,GAAb,CAAf;AAOA,MAAIC,WAAW,GAAGV,KAAK,CAACW,WAAN,CAAkB,YAAY;AAC9C,QAAIN,QAAQ,CAACO,OAAT,CAAiBT,OAAjB,KAA6BA,OAAjC,EAA0C;AACxCE,MAAAA,QAAQ,CAACO,OAAT,CAAiBT,OAAjB,GAA2BA,OAA3B;AACAE,MAAAA,QAAQ,CAACO,OAAT,CAAiBL,IAAjB,GAAwBN,qBAAqB,CAACE,OAAD,EAAU;AACrDC,QAAAA,UAAU,EAAEA,UADyC;AAErDS,QAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AACzC,iBAAOf,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKe,OAAL,CAAd,EAA6B,EAA7B,EAAiC;AACnDL,YAAAA,eAAe,EAAE;AADkC,WAAjC,CAApB;AAGD,SANoD;AAOrDM,QAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BF,OAA/B,EAAwC;AACrD,cAAIG,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,UAAUC,IAAV,EAAgB;AAC7C,mBAAOA,IAAI,CAAChB,UAAU,CAACiB,KAAZ,CAAX;AACD,WAFa,EAEXC,IAFW,CAENpB,WAFM,CAAd;AAGAY,UAAAA,OAAO,CAACL,eAAR,CAAwBQ,OAAxB,IAAmCD,MAAnC,CAJqD,CAMrD;AACA;;AACAA,UAAAA,MAAM,CAACO,GAAP,GAAaN,OAAb;AACD;AAhBoD,OAAV,CAA7C;AAkBD;;AACD,WAAOZ,QAAQ,CAACO,OAAT,CAAiBL,IAAjB,CAAsBE,eAA7B;AACD,GAvBiB,EAuBf,CAACL,UAAD,EAAaD,OAAb,CAvBe,CAAlB;AAwBA,SAAOO,WAAP;AACD,CAjCD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { VALUE_SPLIT } from \"../utils/commonUtil\";\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default (function (options, fieldNames) {\n  var cacheRef = React.useRef({\n    options: [],\n    info: {\n      keyEntities: {},\n      pathKeyEntities: {}\n    }\n  });\n  var getEntities = React.useCallback(function () {\n    if (cacheRef.current.options !== options) {\n      cacheRef.current.options = options;\n      cacheRef.current.info = convertDataToEntities(options, {\n        fieldNames: fieldNames,\n        initWrapper: function initWrapper(wrapper) {\n          return _objectSpread(_objectSpread({}, wrapper), {}, {\n            pathKeyEntities: {}\n          });\n        },\n        processEntity: function processEntity(entity, wrapper) {\n          var pathKey = entity.nodes.map(function (node) {\n            return node[fieldNames.value];\n          }).join(VALUE_SPLIT);\n          wrapper.pathKeyEntities[pathKey] = entity;\n\n          // Overwrite origin key.\n          // this is very hack but we need let conduct logic work with connect path\n          entity.key = pathKey;\n        }\n      });\n    }\n    return cacheRef.current.info.pathKeyEntities;\n  }, [fieldNames, options]);\n  return getEntities;\n});"]},"metadata":{},"sourceType":"module"}