{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\n\nfunction buildTreeStructure(nodes, config) {\n  var id = config.id,\n      pId = config.pId,\n      rootPId = config.rootPId;\n  var nodeMap = new Map();\n  var rootNodes = [];\n  nodes.forEach(function (node) {\n    var nodeKey = node[id];\n\n    var clonedNode = _objectSpread(_objectSpread({}, node), {}, {\n      key: node.key || nodeKey\n    });\n\n    nodeMap.set(nodeKey, clonedNode);\n  });\n  nodeMap.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = nodeMap.get(parentKey);\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } else if (parentKey === rootPId || rootPId === null) {\n      rootNodes.push(node);\n    }\n  });\n  return rootNodes;\n}\n/**\n * 将 `treeData` 或 `children` 转换为格式化的 `treeData`。\n * 如果 `treeData` 或 `children` 没有变化，则不会重新计算。\n */\n\n\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      if (simpleMode) {\n        var config = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, _typeof(simpleMode) === 'object' ? simpleMode : {});\n\n        return buildTreeStructure(treeData, config);\n      }\n\n      return treeData;\n    }\n\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"names":["_typeof","_objectSpread","React","convertChildrenToData","buildTreeStructure","nodes","config","id","pId","rootPId","nodeMap","Map","rootNodes","forEach","node","nodeKey","clonedNode","key","set","parentKey","parent","get","children","push","useTreeData","treeData","simpleMode","useMemo"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;;AACA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AACzC,MAAIC,EAAE,GAAGD,MAAM,CAACC,EAAhB;AAAA,MACEC,GAAG,GAAGF,MAAM,CAACE,GADf;AAAA,MAEEC,OAAO,GAAGH,MAAM,CAACG,OAFnB;AAGA,MAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAP,EAAAA,KAAK,CAACQ,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAIC,OAAO,GAAGD,IAAI,CAACP,EAAD,CAAlB;;AACA,QAAIS,UAAU,GAAGf,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKa,IAAL,CAAd,EAA0B,EAA1B,EAA8B;AAC1DG,MAAAA,GAAG,EAAEH,IAAI,CAACG,GAAL,IAAYF;AADyC,KAA9B,CAA9B;;AAGAL,IAAAA,OAAO,CAACQ,GAAR,CAAYH,OAAZ,EAAqBC,UAArB;AACD,GAND;AAOAN,EAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,IAAV,EAAgB;AAC9B,QAAIK,SAAS,GAAGL,IAAI,CAACN,GAAD,CAApB;AACA,QAAIY,MAAM,GAAGV,OAAO,CAACW,GAAR,CAAYF,SAAZ,CAAb;;AACA,QAAIC,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,QAAP,GAAkBF,MAAM,CAACE,QAAP,IAAmB,EAArC;AACAF,MAAAA,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAqBT,IAArB;AACD,KAHD,MAGO,IAAIK,SAAS,KAAKV,OAAd,IAAyBA,OAAO,KAAK,IAAzC,EAA+C;AACpDG,MAAAA,SAAS,CAACW,IAAV,CAAeT,IAAf;AACD;AACF,GATD;AAUA,SAAOF,SAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAe,SAASY,WAAT,CAAqBC,QAArB,EAA+BH,QAA/B,EAAyCI,UAAzC,EAAqD;AAClE,SAAOxB,KAAK,CAACyB,OAAN,CAAc,YAAY;AAC/B,QAAIF,QAAJ,EAAc;AACZ,UAAIC,UAAJ,EAAgB;AACd,YAAIpB,MAAM,GAAGL,aAAa,CAAC;AACzBM,UAAAA,EAAE,EAAE,IADqB;AAEzBC,UAAAA,GAAG,EAAE,KAFoB;AAGzBC,UAAAA,OAAO,EAAE;AAHgB,SAAD,EAIvBT,OAAO,CAAC0B,UAAD,CAAP,KAAwB,QAAxB,GAAmCA,UAAnC,GAAgD,EAJzB,CAA1B;;AAKA,eAAOtB,kBAAkB,CAACqB,QAAD,EAAWnB,MAAX,CAAzB;AACD;;AACD,aAAOmB,QAAP;AACD;;AACD,WAAOtB,qBAAqB,CAACmB,QAAD,CAA5B;AACD,GAbM,EAaJ,CAACA,QAAD,EAAWI,UAAX,EAAuBD,QAAvB,CAbI,CAAP;AAcD","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\nfunction buildTreeStructure(nodes, config) {\n  var id = config.id,\n    pId = config.pId,\n    rootPId = config.rootPId;\n  var nodeMap = new Map();\n  var rootNodes = [];\n  nodes.forEach(function (node) {\n    var nodeKey = node[id];\n    var clonedNode = _objectSpread(_objectSpread({}, node), {}, {\n      key: node.key || nodeKey\n    });\n    nodeMap.set(nodeKey, clonedNode);\n  });\n  nodeMap.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = nodeMap.get(parentKey);\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } else if (parentKey === rootPId || rootPId === null) {\n      rootNodes.push(node);\n    }\n  });\n  return rootNodes;\n}\n\n/**\n * 将 `treeData` 或 `children` 转换为格式化的 `treeData`。\n * 如果 `treeData` 或 `children` 没有变化，则不会重新计算。\n */\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      if (simpleMode) {\n        var config = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, _typeof(simpleMode) === 'object' ? simpleMode : {});\n        return buildTreeStructure(treeData, config);\n      }\n      return treeData;\n    }\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}"]},"metadata":{},"sourceType":"module"}