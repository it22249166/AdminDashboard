{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { devUseWarning } from '../../../_util/warning';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../../util';\nimport FilterDropdown, { flattenKeys } from './FilterDropdown';\n\nconst collectFilterStates = (columns, init, pos) => {\n  let filterStates = [];\n  (columns || []).forEach((column, index) => {\n    var _a;\n\n    const columnPos = getColumnPos(index, pos);\n    const filterDropdownIsDefined = column.filterDropdown !== undefined;\n\n    if (column.filters || filterDropdownIsDefined || 'onFilter' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        let filteredValues = column.filteredValue;\n\n        if (!filterDropdownIsDefined) {\n          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;\n        }\n\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: filteredValues,\n          forceFiltered: column.filtered\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n          forceFiltered: column.filtered\n        });\n      }\n    }\n\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    }\n  });\n  return filterStates;\n};\n\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale, triggerFilter, getPopupContainer, pos, rootClassName) {\n  return columns.map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    const {\n      filterOnClose = true,\n      filterMultiple = true,\n      filterMode,\n      filterSearch\n    } = column;\n    let newColumn = column;\n\n    if (newColumn.filters || newColumn.filterDropdown) {\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const filterState = filterStates.find(_ref => {\n        let {\n          key\n        } = _ref;\n        return columnKey === key;\n      });\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        title: renderProps => /*#__PURE__*/React.createElement(FilterDropdown, {\n          tablePrefixCls: prefixCls,\n          prefixCls: `${prefixCls}-filter`,\n          dropdownPrefixCls: dropdownPrefixCls,\n          column: newColumn,\n          columnKey: columnKey,\n          filterState: filterState,\n          filterOnClose: filterOnClose,\n          filterMultiple: filterMultiple,\n          filterMode: filterMode,\n          filterSearch: filterSearch,\n          triggerFilter: triggerFilter,\n          locale: locale,\n          getPopupContainer: getPopupContainer,\n          rootClassName: rootClassName\n        }, renderColumnTitle(column.title, renderProps))\n      });\n    }\n\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale, triggerFilter, getPopupContainer, columnPos, rootClassName)\n      });\n    }\n\n    return newColumn;\n  });\n}\n\nconst generateFilterInfo = filterStates => {\n  const currentFilters = {};\n  filterStates.forEach(_ref2 => {\n    let {\n      key,\n      filteredKeys,\n      column\n    } = _ref2;\n    const keyAsString = key;\n    const {\n      filters,\n      filterDropdown\n    } = column;\n\n    if (filterDropdown) {\n      currentFilters[keyAsString] = filteredKeys || null;\n    } else if (Array.isArray(filteredKeys)) {\n      const keys = flattenKeys(filters);\n      currentFilters[keyAsString] = keys.filter(originKey => filteredKeys.includes(String(originKey)));\n    } else {\n      currentFilters[keyAsString] = null;\n    }\n  });\n  return currentFilters;\n};\n\nexport const getFilterData = (data, filterStates, childrenColumnName) => {\n  const filterDatas = filterStates.reduce((currentData, filterState) => {\n    const {\n      column: {\n        onFilter,\n        filters\n      },\n      filteredKeys\n    } = filterState;\n\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData // shallow copy\n      .map(record => Object.assign({}, record)).filter(record => filteredKeys.some(key => {\n        const keys = flattenKeys(filters);\n        const keyIndex = keys.findIndex(k => String(k) === String(key));\n        const realKey = keyIndex !== -1 ? keys[keyIndex] : key; // filter children\n\n        if (record[childrenColumnName]) {\n          record[childrenColumnName] = getFilterData(record[childrenColumnName], filterStates, childrenColumnName);\n        }\n\n        return onFilter(realKey, record);\n      }));\n    }\n\n    return currentData;\n  }, data);\n  return filterDatas;\n};\n\nconst getMergedColumns = rawMergedColumns => rawMergedColumns.flatMap(column => {\n  if ('children' in column) {\n    return [column].concat(_toConsumableArray(getMergedColumns(column.children || [])));\n  }\n\n  return [column];\n});\n\nconst useFilter = props => {\n  const {\n    prefixCls,\n    dropdownPrefixCls,\n    mergedColumns: rawMergedColumns,\n    onFilterChange,\n    getPopupContainer,\n    locale: tableLocale,\n    rootClassName\n  } = props;\n  const warning = devUseWarning('Table');\n  const mergedColumns = React.useMemo(() => getMergedColumns(rawMergedColumns || []), [rawMergedColumns]);\n  const [filterStates, setFilterStates] = React.useState(() => collectFilterStates(mergedColumns, true));\n  const mergedFilterStates = React.useMemo(() => {\n    const collectedStates = collectFilterStates(mergedColumns, false);\n\n    if (collectedStates.length === 0) {\n      return collectedStates;\n    }\n\n    let filteredKeysIsAllNotControlled = true;\n    let filteredKeysIsAllControlled = true;\n    collectedStates.forEach(_ref3 => {\n      let {\n        filteredKeys\n      } = _ref3;\n\n      if (filteredKeys !== undefined) {\n        filteredKeysIsAllNotControlled = false;\n      } else {\n        filteredKeysIsAllControlled = false;\n      }\n    }); // Return if not controlled\n\n    if (filteredKeysIsAllNotControlled) {\n      // Filter column may have been removed\n      const keyList = (mergedColumns || []).map((column, index) => getColumnKey(column, getColumnPos(index)));\n      return filterStates.filter(_ref4 => {\n        let {\n          key\n        } = _ref4;\n        return keyList.includes(key);\n      }).map(item => {\n        const col = mergedColumns[keyList.findIndex(key => key === item.key)];\n        return Object.assign(Object.assign({}, item), {\n          column: Object.assign(Object.assign({}, item.column), col),\n          forceFiltered: col.filtered\n        });\n      });\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(filteredKeysIsAllControlled, 'usage', 'Columns should all contain `filteredValue` or not contain `filteredValue`.') : void 0;\n    return collectedStates;\n  }, [mergedColumns, filterStates]);\n  const filters = React.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);\n\n  const triggerFilter = filterState => {\n    const newFilterStates = mergedFilterStates.filter(_ref5 => {\n      let {\n        key\n      } = _ref5;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n\n  const transformColumns = innerColumns => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer, undefined, rootClassName);\n\n  return [transformColumns, mergedFilterStates, filters];\n};\n\nexport { flattenKeys };\nexport default useFilter;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/table/hooks/useFilter/index.js"],"names":["_toConsumableArray","React","devUseWarning","getColumnKey","getColumnPos","renderColumnTitle","FilterDropdown","flattenKeys","collectFilterStates","columns","init","pos","filterStates","forEach","column","index","_a","columnPos","filterDropdownIsDefined","filterDropdown","undefined","filters","filteredValues","filteredValue","map","String","push","key","filteredKeys","forceFiltered","filtered","defaultFilteredValue","concat","children","injectFilter","prefixCls","dropdownPrefixCls","locale","triggerFilter","getPopupContainer","rootClassName","filterOnClose","filterMultiple","filterMode","filterSearch","newColumn","columnKey","filterState","find","_ref","Object","assign","title","renderProps","createElement","tablePrefixCls","generateFilterInfo","currentFilters","_ref2","keyAsString","Array","isArray","keys","filter","originKey","includes","getFilterData","data","childrenColumnName","filterDatas","reduce","currentData","onFilter","length","record","some","keyIndex","findIndex","k","realKey","getMergedColumns","rawMergedColumns","flatMap","useFilter","props","mergedColumns","onFilterChange","tableLocale","warning","useMemo","setFilterStates","useState","mergedFilterStates","collectedStates","filteredKeysIsAllNotControlled","filteredKeysIsAllControlled","_ref3","keyList","_ref4","item","col","process","env","NODE_ENV","newFilterStates","_ref5","transformColumns","innerColumns"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { devUseWarning } from '../../../_util/warning';\nimport { getColumnKey, getColumnPos, renderColumnTitle } from '../../util';\nimport FilterDropdown, { flattenKeys } from './FilterDropdown';\nconst collectFilterStates = (columns, init, pos) => {\n  let filterStates = [];\n  (columns || []).forEach((column, index) => {\n    var _a;\n    const columnPos = getColumnPos(index, pos);\n    const filterDropdownIsDefined = column.filterDropdown !== undefined;\n    if (column.filters || filterDropdownIsDefined || 'onFilter' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        let filteredValues = column.filteredValue;\n        if (!filterDropdownIsDefined) {\n          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;\n        }\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: filteredValues,\n          forceFiltered: column.filtered\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,\n          forceFiltered: column.filtered\n        });\n      }\n    }\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    }\n  });\n  return filterStates;\n};\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, locale, triggerFilter, getPopupContainer, pos, rootClassName) {\n  return columns.map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    const {\n      filterOnClose = true,\n      filterMultiple = true,\n      filterMode,\n      filterSearch\n    } = column;\n    let newColumn = column;\n    if (newColumn.filters || newColumn.filterDropdown) {\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const filterState = filterStates.find(_ref => {\n        let {\n          key\n        } = _ref;\n        return columnKey === key;\n      });\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        title: renderProps => (/*#__PURE__*/React.createElement(FilterDropdown, {\n          tablePrefixCls: prefixCls,\n          prefixCls: `${prefixCls}-filter`,\n          dropdownPrefixCls: dropdownPrefixCls,\n          column: newColumn,\n          columnKey: columnKey,\n          filterState: filterState,\n          filterOnClose: filterOnClose,\n          filterMultiple: filterMultiple,\n          filterMode: filterMode,\n          filterSearch: filterSearch,\n          triggerFilter: triggerFilter,\n          locale: locale,\n          getPopupContainer: getPopupContainer,\n          rootClassName: rootClassName\n        }, renderColumnTitle(column.title, renderProps)))\n      });\n    }\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, locale, triggerFilter, getPopupContainer, columnPos, rootClassName)\n      });\n    }\n    return newColumn;\n  });\n}\nconst generateFilterInfo = filterStates => {\n  const currentFilters = {};\n  filterStates.forEach(_ref2 => {\n    let {\n      key,\n      filteredKeys,\n      column\n    } = _ref2;\n    const keyAsString = key;\n    const {\n      filters,\n      filterDropdown\n    } = column;\n    if (filterDropdown) {\n      currentFilters[keyAsString] = filteredKeys || null;\n    } else if (Array.isArray(filteredKeys)) {\n      const keys = flattenKeys(filters);\n      currentFilters[keyAsString] = keys.filter(originKey => filteredKeys.includes(String(originKey)));\n    } else {\n      currentFilters[keyAsString] = null;\n    }\n  });\n  return currentFilters;\n};\nexport const getFilterData = (data, filterStates, childrenColumnName) => {\n  const filterDatas = filterStates.reduce((currentData, filterState) => {\n    const {\n      column: {\n        onFilter,\n        filters\n      },\n      filteredKeys\n    } = filterState;\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData\n      // shallow copy\n      .map(record => Object.assign({}, record)).filter(record => filteredKeys.some(key => {\n        const keys = flattenKeys(filters);\n        const keyIndex = keys.findIndex(k => String(k) === String(key));\n        const realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n        // filter children\n        if (record[childrenColumnName]) {\n          record[childrenColumnName] = getFilterData(record[childrenColumnName], filterStates, childrenColumnName);\n        }\n        return onFilter(realKey, record);\n      }));\n    }\n    return currentData;\n  }, data);\n  return filterDatas;\n};\nconst getMergedColumns = rawMergedColumns => rawMergedColumns.flatMap(column => {\n  if ('children' in column) {\n    return [column].concat(_toConsumableArray(getMergedColumns(column.children || [])));\n  }\n  return [column];\n});\nconst useFilter = props => {\n  const {\n    prefixCls,\n    dropdownPrefixCls,\n    mergedColumns: rawMergedColumns,\n    onFilterChange,\n    getPopupContainer,\n    locale: tableLocale,\n    rootClassName\n  } = props;\n  const warning = devUseWarning('Table');\n  const mergedColumns = React.useMemo(() => getMergedColumns(rawMergedColumns || []), [rawMergedColumns]);\n  const [filterStates, setFilterStates] = React.useState(() => collectFilterStates(mergedColumns, true));\n  const mergedFilterStates = React.useMemo(() => {\n    const collectedStates = collectFilterStates(mergedColumns, false);\n    if (collectedStates.length === 0) {\n      return collectedStates;\n    }\n    let filteredKeysIsAllNotControlled = true;\n    let filteredKeysIsAllControlled = true;\n    collectedStates.forEach(_ref3 => {\n      let {\n        filteredKeys\n      } = _ref3;\n      if (filteredKeys !== undefined) {\n        filteredKeysIsAllNotControlled = false;\n      } else {\n        filteredKeysIsAllControlled = false;\n      }\n    });\n    // Return if not controlled\n    if (filteredKeysIsAllNotControlled) {\n      // Filter column may have been removed\n      const keyList = (mergedColumns || []).map((column, index) => getColumnKey(column, getColumnPos(index)));\n      return filterStates.filter(_ref4 => {\n        let {\n          key\n        } = _ref4;\n        return keyList.includes(key);\n      }).map(item => {\n        const col = mergedColumns[keyList.findIndex(key => key === item.key)];\n        return Object.assign(Object.assign({}, item), {\n          column: Object.assign(Object.assign({}, item.column), col),\n          forceFiltered: col.filtered\n        });\n      });\n    }\n    process.env.NODE_ENV !== \"production\" ? warning(filteredKeysIsAllControlled, 'usage', 'Columns should all contain `filteredValue` or not contain `filteredValue`.') : void 0;\n    return collectedStates;\n  }, [mergedColumns, filterStates]);\n  const filters = React.useMemo(() => generateFilterInfo(mergedFilterStates), [mergedFilterStates]);\n  const triggerFilter = filterState => {\n    const newFilterStates = mergedFilterStates.filter(_ref5 => {\n      let {\n        key\n      } = _ref5;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n  const transformColumns = innerColumns => injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, tableLocale, triggerFilter, getPopupContainer, undefined, rootClassName);\n  return [transformColumns, mergedFilterStates, filters];\n};\nexport { flattenKeys };\nexport default useFilter;"]},"metadata":{},"sourceType":"module"}