{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from \"./useEvent\";\n/**\n * Same as React.useState but will always get latest state.\n * This is useful when React merge multiple state updates into one.\n * e.g. onTransitionEnd trigger multiple event at once will be merged state update in React.\n */\n\nexport default function useSyncState(defaultValue) {\n  var _React$useReducer = React.useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      forceUpdate = _React$useReducer2[1];\n\n  var currentValueRef = React.useRef(defaultValue);\n  var getValue = useEvent(function () {\n    return currentValueRef.current;\n  });\n  var setValue = useEvent(function (updater) {\n    currentValueRef.current = typeof updater === 'function' ? updater(currentValueRef.current) : updater;\n    forceUpdate();\n  });\n  return [getValue, setValue];\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-util/es/hooks/useSyncState.js"],"names":["_slicedToArray","React","useEvent","useSyncState","defaultValue","_React$useReducer","useReducer","x","_React$useReducer2","forceUpdate","currentValueRef","useRef","getValue","current","setValue","updater"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AACjD,MAAIC,iBAAiB,GAAGJ,KAAK,CAACK,UAAN,CAAiB,UAAUC,CAAV,EAAa;AAClD,WAAOA,CAAC,GAAG,CAAX;AACD,GAFqB,EAEnB,CAFmB,CAAxB;AAAA,MAGEC,kBAAkB,GAAGR,cAAc,CAACK,iBAAD,EAAoB,CAApB,CAHrC;AAAA,MAIEI,WAAW,GAAGD,kBAAkB,CAAC,CAAD,CAJlC;;AAKA,MAAIE,eAAe,GAAGT,KAAK,CAACU,MAAN,CAAaP,YAAb,CAAtB;AACA,MAAIQ,QAAQ,GAAGV,QAAQ,CAAC,YAAY;AAClC,WAAOQ,eAAe,CAACG,OAAvB;AACD,GAFsB,CAAvB;AAGA,MAAIC,QAAQ,GAAGZ,QAAQ,CAAC,UAAUa,OAAV,EAAmB;AACzCL,IAAAA,eAAe,CAACG,OAAhB,GAA0B,OAAOE,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACL,eAAe,CAACG,OAAjB,CAAvC,GAAmEE,OAA7F;AACAN,IAAAA,WAAW;AACZ,GAHsB,CAAvB;AAIA,SAAO,CAACG,QAAD,EAAWE,QAAX,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from \"./useEvent\";\n/**\n * Same as React.useState but will always get latest state.\n * This is useful when React merge multiple state updates into one.\n * e.g. onTransitionEnd trigger multiple event at once will be merged state update in React.\n */\nexport default function useSyncState(defaultValue) {\n  var _React$useReducer = React.useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    forceUpdate = _React$useReducer2[1];\n  var currentValueRef = React.useRef(defaultValue);\n  var getValue = useEvent(function () {\n    return currentValueRef.current;\n  });\n  var setValue = useEvent(function (updater) {\n    currentValueRef.current = typeof updater === 'function' ? updater(currentValueRef.current) : updater;\n    forceUpdate();\n  });\n  return [getValue, setValue];\n}"]},"metadata":{},"sourceType":"module"}