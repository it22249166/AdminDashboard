{"ast":null,"code":"/*!\n * Chart.js v4.4.9\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      found = true;\n\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  options;\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\n    if (axis) {\n      return axis;\n    }\n  }\n\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.4.9\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n\n      this._resize(width, height);\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    chart,\n    index,\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis,\n      clip\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale,\n    clip\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property,\n      clip\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property,\n    clip\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale,\n    clip\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n\n    ticks.push({\n      value: tickValue\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n\n    if (!item.visible) {\n      continue;\n    }\n\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/chart.js/dist/chart.js"],"names":["r","requestAnimFrame","a","resolve","e","effects","c","color","i","isObject","d","defaults","b","isArray","v","valueOrDefault","u","unlistenArrayEvents","l","listenArrayEvents","f","resolveObjectKey","g","isNumberFinite","h","defined","s","sign","j","createContext","k","isNullOrUndef","_","_arrayUnique","t","toRadians","m","toPercentage","n","toDimension","T","TAU","o","formatNumber","p","_angleBetween","H","HALF_PI","P","PI","q","_getStartAndCountOfVisiblePoints","w","_scaleRangesChanged","x","isNumber","y","_parseObjectDataRadialScale","z","getRelativePosition","A","_rlookupByKey","B","_lookupByKey","C","_isPointInArea","D","getAngleFromPoint","E","toPadding","F","each","G","getMaximumSize","I","_getParentNode","J","readUsedSize","K","supportsEventListenerOptions","L","throttled","M","_isDomSupported","N","_factorize","O","finiteOrDefault","Q","callback","R","_addGrace","S","_limitValue","U","toDegrees","V","_measureText","W","_int16Range","X","_alignPixel","Y","clipArea","Z","renderText","$","unclipArea","a0","toFont","a1","_toLeftRightCenter","a2","_alignStartEnd","a3","overrides","a4","merge","a5","_capitalize","a6","descriptors","a7","isFunction","a8","_attachContext","a9","_createResolver","aa","_descriptors","ab","mergeIf","ac","uid","ad","debounce","ae","retinaScale","af","clearCanvas","ag","setsEqual","ah","getDatasetClipArea","ai","_elementsEqual","aj","_isClickEvent","ak","_isBetween","al","_readValueToProps","am","_updateBezierControlPoints","an","_computeSegments","ao","_boundSegments","ap","_steppedInterpolation","aq","_bezierInterpolation","ar","_pointInLine","as","_steppedLineTo","at","_bezierCurveTo","au","drawPoint","av","addRoundedRectPath","aw","toTRBL","ax","toTRBLCorners","ay","_boundSegment","az","_normalizeAngle","aA","getRtlAdapter","aB","overrideTextDirection","aC","_textX","aD","restoreTextDirection","aE","drawPointLegend","aF","distanceBetweenPoints","aG","noop","aH","_setMinAndMaxByKey","aI","niceNum","aJ","almostWhole","aK","almostEquals","aL","_decimalPlaces","aM","Ticks","aN","log10","aO","_longestText","aP","_filterBetween","aQ","_lookup","Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","call","window","_update","Date","now","remaining","running","items","length","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","top","right","bottom","left","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","sort","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","setInflateAmount","inflateAmount","BarController","grouped","numbers","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","controllers","__proto__","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","eventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lines","lineHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","title","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","valueAt","idx","pixel","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","subResolver","descriptorDefaults","resolverCache","hasFunction","isScriptable","isIndexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","tension","cubicInterpolationMode","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","interpolate","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","fillText","strikethrough","textDirection","textWidth","setWidth","realX","fontLineHeight","calculateLegendItemHeight","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","xSet","xAverage","eventPosition","nearestElement","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","formatters","numeric","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables","_adapters"],"mappings":"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","sourcesContent":["/*!\n * Chart.js v4.4.9\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.9\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property,\n            clip\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"]},"metadata":{},"sourceType":"module"}