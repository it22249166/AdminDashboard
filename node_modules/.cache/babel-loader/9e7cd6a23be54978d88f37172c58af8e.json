{"ast":null,"code":"/* eslint-disable no-console */\nlet warned = {};\nconst preWarningFns = [];\n/**\n * Pre warning enable you to parse content before console.error.\n * Modify to null will prevent warning.\n */\n\nexport const preMessage = fn => {\n  preWarningFns.push(fn);\n};\n/**\n * Warning if condition not match.\n * @param valid Condition\n * @param message Warning message\n * @example\n * ```js\n * warning(false, 'some error'); // print some error\n * warning(true, 'some error'); // print nothing\n * warning(1 === 2, 'some error'); // print some error\n * ```\n */\n\nexport function warning(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'warning'), message);\n\n    if (finalMessage) {\n      console.error(`Warning: ${finalMessage}`);\n    }\n  }\n}\n/** @see Similar to {@link warning} */\n\nexport function note(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'note'), message);\n\n    if (finalMessage) {\n      console.warn(`Note: ${finalMessage}`);\n    }\n  }\n}\nexport function resetWarned() {\n  warned = {};\n}\nexport function call(method, valid, message) {\n  if (!valid && !warned[message]) {\n    method(false, message);\n    warned[message] = true;\n  }\n}\n/** @see Same as {@link warning}, but only warn once for the same message */\n\nexport function warningOnce(valid, message) {\n  call(warning, valid, message);\n}\n/** @see Same as {@link warning}, but only warn once for the same message */\n\nexport function noteOnce(valid, message) {\n  call(note, valid, message);\n}\nwarningOnce.preMessage = preMessage;\nwarningOnce.resetWarned = resetWarned;\nwarningOnce.noteOnce = noteOnce;\nexport default warningOnce;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@ant-design/icons/node_modules/@rc-component/util/es/warning.js"],"names":["warned","preWarningFns","preMessage","fn","push","warning","valid","message","process","env","NODE_ENV","console","undefined","finalMessage","reduce","msg","preMessageFn","error","note","warn","resetWarned","call","method","warningOnce","noteOnce"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAG,EAAb;AACA,MAAMC,aAAa,GAAG,EAAtB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI;AAC9BF,EAAAA,aAAa,CAACG,IAAd,CAAmBD,EAAnB;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AACtC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACJ,KAA1C,IAAmDK,OAAO,KAAKC,SAAnE,EAA8E;AAC5E,UAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAd,CAAqB,CAACC,GAAD,EAAMC,YAAN,KAAuBA,YAAY,CAACD,GAAG,IAAI,EAAR,EAAY,SAAZ,CAAxD,EAAgFR,OAAhF,CAArB;;AACA,QAAIM,YAAJ,EAAkB;AAChBF,MAAAA,OAAO,CAACM,KAAR,CAAe,YAAWJ,YAAa,EAAvC;AACD;AACF;AACF;AAED;;AACA,OAAO,SAASK,IAAT,CAAcZ,KAAd,EAAqBC,OAArB,EAA8B;AACnC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACJ,KAA1C,IAAmDK,OAAO,KAAKC,SAAnE,EAA8E;AAC5E,UAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAd,CAAqB,CAACC,GAAD,EAAMC,YAAN,KAAuBA,YAAY,CAACD,GAAG,IAAI,EAAR,EAAY,MAAZ,CAAxD,EAA6ER,OAA7E,CAArB;;AACA,QAAIM,YAAJ,EAAkB;AAChBF,MAAAA,OAAO,CAACQ,IAAR,CAAc,SAAQN,YAAa,EAAnC;AACD;AACF;AACF;AACD,OAAO,SAASO,WAAT,GAAuB;AAC5BpB,EAAAA,MAAM,GAAG,EAAT;AACD;AACD,OAAO,SAASqB,IAAT,CAAcC,MAAd,EAAsBhB,KAAtB,EAA6BC,OAA7B,EAAsC;AAC3C,MAAI,CAACD,KAAD,IAAU,CAACN,MAAM,CAACO,OAAD,CAArB,EAAgC;AAC9Be,IAAAA,MAAM,CAAC,KAAD,EAAQf,OAAR,CAAN;AACAP,IAAAA,MAAM,CAACO,OAAD,CAAN,GAAkB,IAAlB;AACD;AACF;AAED;;AACA,OAAO,SAASgB,WAAT,CAAqBjB,KAArB,EAA4BC,OAA5B,EAAqC;AAC1Cc,EAAAA,IAAI,CAAChB,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,CAAJ;AACD;AAED;;AACA,OAAO,SAASiB,QAAT,CAAkBlB,KAAlB,EAAyBC,OAAzB,EAAkC;AACvCc,EAAAA,IAAI,CAACH,IAAD,EAAOZ,KAAP,EAAcC,OAAd,CAAJ;AACD;AACDgB,WAAW,CAACrB,UAAZ,GAAyBA,UAAzB;AACAqB,WAAW,CAACH,WAAZ,GAA0BA,WAA1B;AACAG,WAAW,CAACC,QAAZ,GAAuBA,QAAvB;AACA,eAAeD,WAAf","sourcesContent":["/* eslint-disable no-console */\nlet warned = {};\nconst preWarningFns = [];\n\n/**\n * Pre warning enable you to parse content before console.error.\n * Modify to null will prevent warning.\n */\nexport const preMessage = fn => {\n  preWarningFns.push(fn);\n};\n\n/**\n * Warning if condition not match.\n * @param valid Condition\n * @param message Warning message\n * @example\n * ```js\n * warning(false, 'some error'); // print some error\n * warning(true, 'some error'); // print nothing\n * warning(1 === 2, 'some error'); // print some error\n * ```\n */\nexport function warning(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'warning'), message);\n    if (finalMessage) {\n      console.error(`Warning: ${finalMessage}`);\n    }\n  }\n}\n\n/** @see Similar to {@link warning} */\nexport function note(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'note'), message);\n    if (finalMessage) {\n      console.warn(`Note: ${finalMessage}`);\n    }\n  }\n}\nexport function resetWarned() {\n  warned = {};\n}\nexport function call(method, valid, message) {\n  if (!valid && !warned[message]) {\n    method(false, message);\n    warned[message] = true;\n  }\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function warningOnce(valid, message) {\n  call(warning, valid, message);\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function noteOnce(valid, message) {\n  call(note, valid, message);\n}\nwarningOnce.preMessage = preMessage;\nwarningOnce.resetWarned = resetWarned;\nwarningOnce.noteOnce = noteOnce;\nexport default warningOnce;"]},"metadata":{},"sourceType":"module"}