{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useEvent, useMergedState } from 'rc-util';\nconst EMPTY_KEYS = [];\n\nfunction filterKeys(keys, dataKeys) {\n  const filteredKeys = keys.filter(key => dataKeys.has(key));\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\n\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\n\nfunction useSelection(leftDataSource, rightDataSource, selectedKeys) {\n  // Prepare `dataSource` keys\n  const [leftKeys, rightKeys] = React.useMemo(() => [new Set(leftDataSource.map(src => src === null || src === void 0 ? void 0 : src.key)), new Set(rightDataSource.map(src => src === null || src === void 0 ? void 0 : src.key))], [leftDataSource, rightDataSource]); // Selected Keys\n\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(EMPTY_KEYS, {\n    value: selectedKeys\n  });\n  const sourceSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, leftKeys), [mergedSelectedKeys, leftKeys]);\n  const targetSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, rightKeys), [mergedSelectedKeys, rightKeys]); // // Reset when data changed\n\n  React.useEffect(() => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(filterKeys(mergedSelectedKeys, leftKeys)), _toConsumableArray(filterKeys(mergedSelectedKeys, rightKeys))));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]); // Update keys\n\n  const setSourceSelectedKeys = useEvent(nextSrcKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(nextSrcKeys), _toConsumableArray(targetSelectedKeys)));\n  });\n  const setTargetSelectedKeys = useEvent(nextTargetKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(sourceSelectedKeys), _toConsumableArray(nextTargetKeys)));\n  });\n  return [// Keys\n  sourceSelectedKeys, targetSelectedKeys, // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}\n\nexport default useSelection;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/transfer/hooks/useSelection.js"],"names":["_toConsumableArray","React","useEvent","useMergedState","EMPTY_KEYS","filterKeys","keys","dataKeys","filteredKeys","filter","key","has","length","flattenKeys","Array","from","join","useSelection","leftDataSource","rightDataSource","selectedKeys","leftKeys","rightKeys","useMemo","Set","map","src","mergedSelectedKeys","setMergedSelectedKeys","value","sourceSelectedKeys","targetSelectedKeys","useEffect","concat","setSourceSelectedKeys","nextSrcKeys","setTargetSelectedKeys","nextTargetKeys"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,SAAzC;AACA,MAAMC,UAAU,GAAG,EAAnB;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AAClC,QAAMC,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAYC,GAAG,IAAIH,QAAQ,CAACI,GAAT,CAAaD,GAAb,CAAnB,CAArB;AACA,SAAOJ,IAAI,CAACM,MAAL,KAAgBJ,YAAY,CAACI,MAA7B,GAAsCN,IAAtC,GAA6CE,YAApD;AACD;;AACD,SAASK,WAAT,CAAqBP,IAArB,EAA2B;AACzB,SAAOQ,KAAK,CAACC,IAAN,CAAWT,IAAX,EAAiBU,IAAjB,CAAsB,GAAtB,CAAP;AACD;;AACD,SAASC,YAAT,CAAsBC,cAAtB,EAAsCC,eAAtC,EAAuDC,YAAvD,EAAqE;AACnE;AACA,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBrB,KAAK,CAACsB,OAAN,CAAc,MAAM,CAAC,IAAIC,GAAJ,CAAQN,cAAc,CAACO,GAAf,CAAmBC,GAAG,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAAChB,GAAxE,CAAR,CAAD,EAAwF,IAAIc,GAAJ,CAAQL,eAAe,CAACM,GAAhB,CAAoBC,GAAG,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAAChB,GAAzE,CAAR,CAAxF,CAApB,EAAqM,CAACQ,cAAD,EAAiBC,eAAjB,CAArM,CAA9B,CAFmE,CAGnE;;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CzB,cAAc,CAACC,UAAD,EAAa;AAC7EyB,IAAAA,KAAK,EAAET;AADsE,GAAb,CAAlE;AAGA,QAAMU,kBAAkB,GAAG7B,KAAK,CAACsB,OAAN,CAAc,MAAMlB,UAAU,CAACsB,kBAAD,EAAqBN,QAArB,CAA9B,EAA8D,CAACM,kBAAD,EAAqBN,QAArB,CAA9D,CAA3B;AACA,QAAMU,kBAAkB,GAAG9B,KAAK,CAACsB,OAAN,CAAc,MAAMlB,UAAU,CAACsB,kBAAD,EAAqBL,SAArB,CAA9B,EAA+D,CAACK,kBAAD,EAAqBL,SAArB,CAA/D,CAA3B,CARmE,CASnE;;AACArB,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,qBAAqB,CAAC,GAAGK,MAAH,CAAUjC,kBAAkB,CAACK,UAAU,CAACsB,kBAAD,EAAqBN,QAArB,CAAX,CAA5B,EAAwErB,kBAAkB,CAACK,UAAU,CAACsB,kBAAD,EAAqBL,SAArB,CAAX,CAA1F,CAAD,CAArB;AACD,GAFD,EAEG,CAACT,WAAW,CAACQ,QAAD,CAAZ,EAAwBR,WAAW,CAACS,SAAD,CAAnC,CAFH,EAVmE,CAanE;;AACA,QAAMY,qBAAqB,GAAGhC,QAAQ,CAACiC,WAAW,IAAI;AACpDP,IAAAA,qBAAqB,CAAC,GAAGK,MAAH,CAAUjC,kBAAkB,CAACmC,WAAD,CAA5B,EAA2CnC,kBAAkB,CAAC+B,kBAAD,CAA7D,CAAD,CAArB;AACD,GAFqC,CAAtC;AAGA,QAAMK,qBAAqB,GAAGlC,QAAQ,CAACmC,cAAc,IAAI;AACvDT,IAAAA,qBAAqB,CAAC,GAAGK,MAAH,CAAUjC,kBAAkB,CAAC8B,kBAAD,CAA5B,EAAkD9B,kBAAkB,CAACqC,cAAD,CAApE,CAAD,CAArB;AACD,GAFqC,CAAtC;AAGA,SAAO,CACP;AACAP,EAAAA,kBAFO,EAEaC,kBAFb,EAGP;AACAG,EAAAA,qBAJO,EAIgBE,qBAJhB,CAAP;AAKD;;AACD,eAAenB,YAAf","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useEvent, useMergedState } from 'rc-util';\nconst EMPTY_KEYS = [];\nfunction filterKeys(keys, dataKeys) {\n  const filteredKeys = keys.filter(key => dataKeys.has(key));\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\nfunction useSelection(leftDataSource, rightDataSource, selectedKeys) {\n  // Prepare `dataSource` keys\n  const [leftKeys, rightKeys] = React.useMemo(() => [new Set(leftDataSource.map(src => src === null || src === void 0 ? void 0 : src.key)), new Set(rightDataSource.map(src => src === null || src === void 0 ? void 0 : src.key))], [leftDataSource, rightDataSource]);\n  // Selected Keys\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(EMPTY_KEYS, {\n    value: selectedKeys\n  });\n  const sourceSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, leftKeys), [mergedSelectedKeys, leftKeys]);\n  const targetSelectedKeys = React.useMemo(() => filterKeys(mergedSelectedKeys, rightKeys), [mergedSelectedKeys, rightKeys]);\n  // // Reset when data changed\n  React.useEffect(() => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(filterKeys(mergedSelectedKeys, leftKeys)), _toConsumableArray(filterKeys(mergedSelectedKeys, rightKeys))));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]);\n  // Update keys\n  const setSourceSelectedKeys = useEvent(nextSrcKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(nextSrcKeys), _toConsumableArray(targetSelectedKeys)));\n  });\n  const setTargetSelectedKeys = useEvent(nextTargetKeys => {\n    setMergedSelectedKeys([].concat(_toConsumableArray(sourceSelectedKeys), _toConsumableArray(nextTargetKeys)));\n  });\n  return [\n  // Keys\n  sourceSelectedKeys, targetSelectedKeys,\n  // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}\nexport default useSelection;"]},"metadata":{},"sourceType":"module"}