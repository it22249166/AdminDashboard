{"ast":null,"code":"import presetColors from \"./presetColors\";\nconst round = Math.round;\n/**\n * Support format, alpha unit will check the % mark:\n * - rgba(102, 204, 255, .5)      -> [102, 204, 255, 0.5]\n * - rgb(102 204 255 / .5)        -> [102, 204, 255, 0.5]\n * - rgb(100%, 50%, 0% / 50%)     -> [255, 128, 0, 0.5]\n * - hsl(270, 60, 40, .5)         -> [270, 60, 40, 0.5]\n * - hsl(270deg 60% 40% / 50%)   -> [270, 60, 40, 0.5]\n *\n * When `base` is provided, the percentage value will be divided by `base`.\n */\n\nfunction splitColorStr(str, parseNum) {\n  const match = str // Remove str before `(`\n  .replace(/^[^(]*\\((.*)/, '$1') // Remove str after `)`\n  .replace(/\\).*/, '').match(/\\d*\\.?\\d+%?/g) || [];\n  const numList = match.map(item => parseFloat(item));\n\n  for (let i = 0; i < 3; i += 1) {\n    numList[i] = parseNum(numList[i] || 0, match[i] || '', i);\n  } // For alpha. 50% should be 0.5\n\n\n  if (match[3]) {\n    numList[3] = match[3].includes('%') ? numList[3] / 100 : numList[3];\n  } else {\n    // By default, alpha is 1\n    numList[3] = 1;\n  }\n\n  return numList;\n}\n\nconst parseHSVorHSL = (num, _, index) => index === 0 ? num : num / 100;\n/** round and limit number to integer between 0-255 */\n\n\nfunction limitRange(value, max) {\n  const mergedMax = max || 255;\n\n  if (value > mergedMax) {\n    return mergedMax;\n  }\n\n  if (value < 0) {\n    return 0;\n  }\n\n  return value;\n}\n\nexport class FastColor {\n  /**\n   * All FastColor objects are valid. So isValid is always true. This property is kept to be compatible with TinyColor.\n   */\n  isValid = true;\n  /**\n   * Red, R in RGB\n   */\n\n  r = 0;\n  /**\n   * Green, G in RGB\n   */\n\n  g = 0;\n  /**\n   * Blue, B in RGB\n   */\n\n  b = 0;\n  /**\n   * Alpha/Opacity, A in RGBA/HSLA\n   */\n\n  a = 1; // HSV privates\n\n  _h;\n  _s;\n  _l;\n  _v; // intermediate variables to calculate HSL/HSV\n\n  _max;\n  _min;\n  _brightness;\n\n  constructor(input) {\n    /**\n     * Always check 3 char in the object to determine the format.\n     * We not use function in check to save bundle size.\n     * e.g. 'rgb' -> { r: 0, g: 0, b: 0 }.\n     */\n    function matchFormat(str) {\n      return str[0] in input && str[1] in input && str[2] in input;\n    }\n\n    if (!input) {// Do nothing since already initialized\n    } else if (typeof input === 'string') {\n      const trimStr = input.trim();\n\n      function matchPrefix(prefix) {\n        return trimStr.startsWith(prefix);\n      }\n\n      if (/^#?[A-F\\d]{3,8}$/i.test(trimStr)) {\n        this.fromHexString(trimStr);\n      } else if (matchPrefix('rgb')) {\n        this.fromRgbString(trimStr);\n      } else if (matchPrefix('hsl')) {\n        this.fromHslString(trimStr);\n      } else if (matchPrefix('hsv') || matchPrefix('hsb')) {\n        this.fromHsvString(trimStr);\n      } else {\n        // From preset color\n        const presetColor = presetColors[trimStr.toLowerCase()];\n\n        if (presetColor) {\n          this.fromHexString( // Convert 36 hex to 16 hex\n          parseInt(presetColor, 36).toString(16).padStart(6, '0'));\n        }\n      }\n    } else if (input instanceof FastColor) {\n      this.r = input.r;\n      this.g = input.g;\n      this.b = input.b;\n      this.a = input.a;\n      this._h = input._h;\n      this._s = input._s;\n      this._l = input._l;\n      this._v = input._v;\n    } else if (matchFormat('rgb')) {\n      this.r = limitRange(input.r);\n      this.g = limitRange(input.g);\n      this.b = limitRange(input.b);\n      this.a = typeof input.a === 'number' ? limitRange(input.a, 1) : 1;\n    } else if (matchFormat('hsl')) {\n      this.fromHsl(input);\n    } else if (matchFormat('hsv')) {\n      this.fromHsv(input);\n    } else {\n      throw new Error('@ant-design/fast-color: unsupported input ' + JSON.stringify(input));\n    }\n  } // ======================= Setter =======================\n\n\n  setR(value) {\n    return this._sc('r', value);\n  }\n\n  setG(value) {\n    return this._sc('g', value);\n  }\n\n  setB(value) {\n    return this._sc('b', value);\n  }\n\n  setA(value) {\n    return this._sc('a', value, 1);\n  }\n\n  setHue(value) {\n    const hsv = this.toHsv();\n    hsv.h = value;\n    return this._c(hsv);\n  } // ======================= Getter =======================\n\n  /**\n   * Returns the perceived luminance of a color, from 0-1.\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n\n\n  getLuminance() {\n    function adjustGamma(raw) {\n      const val = raw / 255;\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }\n\n    const R = adjustGamma(this.r);\n    const G = adjustGamma(this.g);\n    const B = adjustGamma(this.b);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  }\n\n  getHue() {\n    if (typeof this._h === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n\n      if (delta === 0) {\n        this._h = 0;\n      } else {\n        this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));\n      }\n    }\n\n    return this._h;\n  }\n\n  getSaturation() {\n    if (typeof this._s === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n\n      if (delta === 0) {\n        this._s = 0;\n      } else {\n        this._s = delta / this.getMax();\n      }\n    }\n\n    return this._s;\n  }\n\n  getLightness() {\n    if (typeof this._l === 'undefined') {\n      this._l = (this.getMax() + this.getMin()) / 510;\n    }\n\n    return this._l;\n  }\n\n  getValue() {\n    if (typeof this._v === 'undefined') {\n      this._v = this.getMax() / 255;\n    }\n\n    return this._v;\n  }\n  /**\n   * Returns the perceived brightness of the color, from 0-255.\n   * Note: this is not the b of HSB\n   * @see http://www.w3.org/TR/AERT#color-contrast\n   */\n\n\n  getBrightness() {\n    if (typeof this._brightness === 'undefined') {\n      this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1000;\n    }\n\n    return this._brightness;\n  } // ======================== Func ========================\n\n\n  darken(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() - amount / 100;\n\n    if (l < 0) {\n      l = 0;\n    }\n\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n\n  lighten(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() + amount / 100;\n\n    if (l > 1) {\n      l = 1;\n    }\n\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n  /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */\n\n\n  mix(input, amount = 50) {\n    const color = this._c(input);\n\n    const p = amount / 100;\n\n    const calc = key => (color[key] - this[key]) * p + this[key];\n\n    const rgba = {\n      r: round(calc('r')),\n      g: round(calc('g')),\n      b: round(calc('b')),\n      a: round(calc('a') * 100) / 100\n    };\n    return this._c(rgba);\n  }\n  /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   */\n\n\n  tint(amount = 10) {\n    return this.mix({\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1\n    }, amount);\n  }\n  /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   */\n\n\n  shade(amount = 10) {\n    return this.mix({\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    }, amount);\n  }\n\n  onBackground(background) {\n    const bg = this._c(background);\n\n    const alpha = this.a + bg.a * (1 - this.a);\n\n    const calc = key => {\n      return round((this[key] * this.a + bg[key] * bg.a * (1 - this.a)) / alpha);\n    };\n\n    return this._c({\n      r: calc('r'),\n      g: calc('g'),\n      b: calc('b'),\n      a: alpha\n    });\n  } // ======================= Status =======================\n\n\n  isDark() {\n    return this.getBrightness() < 128;\n  }\n\n  isLight() {\n    return this.getBrightness() >= 128;\n  } // ======================== MISC ========================\n\n\n  equals(other) {\n    return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;\n  }\n\n  clone() {\n    return this._c(this);\n  } // ======================= Format =======================\n\n\n  toHexString() {\n    let hex = '#';\n    const rHex = (this.r || 0).toString(16);\n    hex += rHex.length === 2 ? rHex : '0' + rHex;\n    const gHex = (this.g || 0).toString(16);\n    hex += gHex.length === 2 ? gHex : '0' + gHex;\n    const bHex = (this.b || 0).toString(16);\n    hex += bHex.length === 2 ? bHex : '0' + bHex;\n\n    if (typeof this.a === 'number' && this.a >= 0 && this.a < 1) {\n      const aHex = round(this.a * 255).toString(16);\n      hex += aHex.length === 2 ? aHex : '0' + aHex;\n    }\n\n    return hex;\n  }\n  /** CSS support color pattern */\n\n\n  toHsl() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      l: this.getLightness(),\n      a: this.a\n    };\n  }\n  /** CSS support color pattern */\n\n\n  toHslString() {\n    const h = this.getHue();\n    const s = round(this.getSaturation() * 100);\n    const l = round(this.getLightness() * 100);\n    return this.a !== 1 ? `hsla(${h},${s}%,${l}%,${this.a})` : `hsl(${h},${s}%,${l}%)`;\n  }\n  /** Same as toHsb */\n\n\n  toHsv() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      v: this.getValue(),\n      a: this.a\n    };\n  }\n\n  toRgb() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b,\n      a: this.a\n    };\n  }\n\n  toRgbString() {\n    return this.a !== 1 ? `rgba(${this.r},${this.g},${this.b},${this.a})` : `rgb(${this.r},${this.g},${this.b})`;\n  }\n\n  toString() {\n    return this.toRgbString();\n  } // ====================== Privates ======================\n\n  /** Return a new FastColor object with one channel changed */\n\n\n  _sc(rgb, value, max) {\n    const clone = this.clone();\n    clone[rgb] = limitRange(value, max);\n    return clone;\n  }\n\n  _c(input) {\n    return new this.constructor(input);\n  }\n\n  getMax() {\n    if (typeof this._max === 'undefined') {\n      this._max = Math.max(this.r, this.g, this.b);\n    }\n\n    return this._max;\n  }\n\n  getMin() {\n    if (typeof this._min === 'undefined') {\n      this._min = Math.min(this.r, this.g, this.b);\n    }\n\n    return this._min;\n  }\n\n  fromHexString(trimStr) {\n    const withoutPrefix = trimStr.replace('#', '');\n\n    function connectNum(index1, index2) {\n      return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);\n    }\n\n    if (withoutPrefix.length < 6) {\n      // #rgb or #rgba\n      this.r = connectNum(0);\n      this.g = connectNum(1);\n      this.b = connectNum(2);\n      this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;\n    } else {\n      // #rrggbb or #rrggbbaa\n      this.r = connectNum(0, 1);\n      this.g = connectNum(2, 3);\n      this.b = connectNum(4, 5);\n      this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;\n    }\n  }\n\n  fromHsl({\n    h,\n    s,\n    l,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._l = l;\n    this.a = typeof a === 'number' ? a : 1;\n\n    if (s <= 0) {\n      const rgb = round(l * 255);\n      this.r = rgb;\n      this.g = rgb;\n      this.b = rgb;\n    }\n\n    let r = 0,\n        g = 0,\n        b = 0;\n    const huePrime = h / 60;\n    const chroma = (1 - Math.abs(2 * l - 1)) * s;\n    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n\n    if (huePrime >= 0 && huePrime < 1) {\n      r = chroma;\n      g = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n      r = secondComponent;\n      g = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n      g = chroma;\n      b = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n      g = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n      r = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n      r = chroma;\n      b = secondComponent;\n    }\n\n    const lightnessModification = l - chroma / 2;\n    this.r = round((r + lightnessModification) * 255);\n    this.g = round((g + lightnessModification) * 255);\n    this.b = round((b + lightnessModification) * 255);\n  }\n\n  fromHsv({\n    h,\n    s,\n    v,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._v = v;\n    this.a = typeof a === 'number' ? a : 1;\n    const vv = round(v * 255);\n    this.r = vv;\n    this.g = vv;\n    this.b = vv;\n\n    if (s <= 0) {\n      return;\n    }\n\n    const hh = h / 60;\n    const i = Math.floor(hh);\n    const ff = hh - i;\n    const p = round(v * (1.0 - s) * 255);\n    const q = round(v * (1.0 - s * ff) * 255);\n    const t = round(v * (1.0 - s * (1.0 - ff)) * 255);\n\n    switch (i) {\n      case 0:\n        this.g = t;\n        this.b = p;\n        break;\n\n      case 1:\n        this.r = q;\n        this.b = p;\n        break;\n\n      case 2:\n        this.r = p;\n        this.b = t;\n        break;\n\n      case 3:\n        this.r = p;\n        this.g = q;\n        break;\n\n      case 4:\n        this.r = t;\n        this.g = p;\n        break;\n\n      case 5:\n      default:\n        this.g = p;\n        this.b = q;\n        break;\n    }\n  }\n\n  fromHsvString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsv({\n      h: cells[0],\n      s: cells[1],\n      v: cells[2],\n      a: cells[3]\n    });\n  }\n\n  fromHslString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsl({\n      h: cells[0],\n      s: cells[1],\n      l: cells[2],\n      a: cells[3]\n    });\n  }\n\n  fromRgbString(trimStr) {\n    const cells = splitColorStr(trimStr, (num, txt) => // Convert percentage to number. e.g. 50% -> 128\n    txt.includes('%') ? round(num / 100 * 255) : num);\n    this.r = cells[0];\n    this.g = cells[1];\n    this.b = cells[2];\n    this.a = cells[3];\n  }\n\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@ant-design/fast-color/es/FastColor.js"],"names":["presetColors","round","Math","splitColorStr","str","parseNum","match","replace","numList","map","item","parseFloat","i","includes","parseHSVorHSL","num","_","index","limitRange","value","max","mergedMax","FastColor","isValid","r","g","b","a","_h","_s","_l","_v","_max","_min","_brightness","constructor","input","matchFormat","trimStr","trim","matchPrefix","prefix","startsWith","test","fromHexString","fromRgbString","fromHslString","fromHsvString","presetColor","toLowerCase","parseInt","toString","padStart","fromHsl","fromHsv","Error","JSON","stringify","setR","_sc","setG","setB","setA","setHue","hsv","toHsv","h","_c","getLuminance","adjustGamma","raw","val","pow","R","G","B","getHue","delta","getMax","getMin","getSaturation","getLightness","getValue","getBrightness","darken","amount","s","l","lighten","mix","color","p","calc","key","rgba","tint","shade","onBackground","background","bg","alpha","isDark","isLight","equals","other","clone","toHexString","hex","rHex","length","gHex","bHex","aHex","toHsl","toHslString","v","toRgb","toRgbString","rgb","min","withoutPrefix","connectNum","index1","index2","huePrime","chroma","abs","secondComponent","lightnessModification","vv","hh","floor","ff","q","t","cells","txt"],"mappings":"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","sourcesContent":["import presetColors from \"./presetColors\";\nconst round = Math.round;\n\n/**\n * Support format, alpha unit will check the % mark:\n * - rgba(102, 204, 255, .5)      -> [102, 204, 255, 0.5]\n * - rgb(102 204 255 / .5)        -> [102, 204, 255, 0.5]\n * - rgb(100%, 50%, 0% / 50%)     -> [255, 128, 0, 0.5]\n * - hsl(270, 60, 40, .5)         -> [270, 60, 40, 0.5]\n * - hsl(270deg 60% 40% / 50%)   -> [270, 60, 40, 0.5]\n *\n * When `base` is provided, the percentage value will be divided by `base`.\n */\nfunction splitColorStr(str, parseNum) {\n  const match = str\n  // Remove str before `(`\n  .replace(/^[^(]*\\((.*)/, '$1')\n  // Remove str after `)`\n  .replace(/\\).*/, '').match(/\\d*\\.?\\d+%?/g) || [];\n  const numList = match.map(item => parseFloat(item));\n  for (let i = 0; i < 3; i += 1) {\n    numList[i] = parseNum(numList[i] || 0, match[i] || '', i);\n  }\n\n  // For alpha. 50% should be 0.5\n  if (match[3]) {\n    numList[3] = match[3].includes('%') ? numList[3] / 100 : numList[3];\n  } else {\n    // By default, alpha is 1\n    numList[3] = 1;\n  }\n  return numList;\n}\nconst parseHSVorHSL = (num, _, index) => index === 0 ? num : num / 100;\n\n/** round and limit number to integer between 0-255 */\nfunction limitRange(value, max) {\n  const mergedMax = max || 255;\n  if (value > mergedMax) {\n    return mergedMax;\n  }\n  if (value < 0) {\n    return 0;\n  }\n  return value;\n}\nexport class FastColor {\n  /**\n   * All FastColor objects are valid. So isValid is always true. This property is kept to be compatible with TinyColor.\n   */\n  isValid = true;\n\n  /**\n   * Red, R in RGB\n   */\n  r = 0;\n\n  /**\n   * Green, G in RGB\n   */\n  g = 0;\n\n  /**\n   * Blue, B in RGB\n   */\n  b = 0;\n\n  /**\n   * Alpha/Opacity, A in RGBA/HSLA\n   */\n  a = 1;\n\n  // HSV privates\n  _h;\n  _s;\n  _l;\n  _v;\n\n  // intermediate variables to calculate HSL/HSV\n  _max;\n  _min;\n  _brightness;\n  constructor(input) {\n    /**\n     * Always check 3 char in the object to determine the format.\n     * We not use function in check to save bundle size.\n     * e.g. 'rgb' -> { r: 0, g: 0, b: 0 }.\n     */\n    function matchFormat(str) {\n      return str[0] in input && str[1] in input && str[2] in input;\n    }\n    if (!input) {\n      // Do nothing since already initialized\n    } else if (typeof input === 'string') {\n      const trimStr = input.trim();\n      function matchPrefix(prefix) {\n        return trimStr.startsWith(prefix);\n      }\n      if (/^#?[A-F\\d]{3,8}$/i.test(trimStr)) {\n        this.fromHexString(trimStr);\n      } else if (matchPrefix('rgb')) {\n        this.fromRgbString(trimStr);\n      } else if (matchPrefix('hsl')) {\n        this.fromHslString(trimStr);\n      } else if (matchPrefix('hsv') || matchPrefix('hsb')) {\n        this.fromHsvString(trimStr);\n      } else {\n        // From preset color\n        const presetColor = presetColors[trimStr.toLowerCase()];\n        if (presetColor) {\n          this.fromHexString(\n          // Convert 36 hex to 16 hex\n          parseInt(presetColor, 36).toString(16).padStart(6, '0'));\n        }\n      }\n    } else if (input instanceof FastColor) {\n      this.r = input.r;\n      this.g = input.g;\n      this.b = input.b;\n      this.a = input.a;\n      this._h = input._h;\n      this._s = input._s;\n      this._l = input._l;\n      this._v = input._v;\n    } else if (matchFormat('rgb')) {\n      this.r = limitRange(input.r);\n      this.g = limitRange(input.g);\n      this.b = limitRange(input.b);\n      this.a = typeof input.a === 'number' ? limitRange(input.a, 1) : 1;\n    } else if (matchFormat('hsl')) {\n      this.fromHsl(input);\n    } else if (matchFormat('hsv')) {\n      this.fromHsv(input);\n    } else {\n      throw new Error('@ant-design/fast-color: unsupported input ' + JSON.stringify(input));\n    }\n  }\n\n  // ======================= Setter =======================\n\n  setR(value) {\n    return this._sc('r', value);\n  }\n  setG(value) {\n    return this._sc('g', value);\n  }\n  setB(value) {\n    return this._sc('b', value);\n  }\n  setA(value) {\n    return this._sc('a', value, 1);\n  }\n  setHue(value) {\n    const hsv = this.toHsv();\n    hsv.h = value;\n    return this._c(hsv);\n  }\n\n  // ======================= Getter =======================\n  /**\n   * Returns the perceived luminance of a color, from 0-1.\n   * @see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n   */\n  getLuminance() {\n    function adjustGamma(raw) {\n      const val = raw / 255;\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }\n    const R = adjustGamma(this.r);\n    const G = adjustGamma(this.g);\n    const B = adjustGamma(this.b);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  }\n  getHue() {\n    if (typeof this._h === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n      if (delta === 0) {\n        this._h = 0;\n      } else {\n        this._h = round(60 * (this.r === this.getMax() ? (this.g - this.b) / delta + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / delta + 2 : (this.r - this.g) / delta + 4));\n      }\n    }\n    return this._h;\n  }\n  getSaturation() {\n    if (typeof this._s === 'undefined') {\n      const delta = this.getMax() - this.getMin();\n      if (delta === 0) {\n        this._s = 0;\n      } else {\n        this._s = delta / this.getMax();\n      }\n    }\n    return this._s;\n  }\n  getLightness() {\n    if (typeof this._l === 'undefined') {\n      this._l = (this.getMax() + this.getMin()) / 510;\n    }\n    return this._l;\n  }\n  getValue() {\n    if (typeof this._v === 'undefined') {\n      this._v = this.getMax() / 255;\n    }\n    return this._v;\n  }\n\n  /**\n   * Returns the perceived brightness of the color, from 0-255.\n   * Note: this is not the b of HSB\n   * @see http://www.w3.org/TR/AERT#color-contrast\n   */\n  getBrightness() {\n    if (typeof this._brightness === 'undefined') {\n      this._brightness = (this.r * 299 + this.g * 587 + this.b * 114) / 1000;\n    }\n    return this._brightness;\n  }\n\n  // ======================== Func ========================\n\n  darken(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() - amount / 100;\n    if (l < 0) {\n      l = 0;\n    }\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n  lighten(amount = 10) {\n    const h = this.getHue();\n    const s = this.getSaturation();\n    let l = this.getLightness() + amount / 100;\n    if (l > 1) {\n      l = 1;\n    }\n    return this._c({\n      h,\n      s,\n      l,\n      a: this.a\n    });\n  }\n\n  /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */\n  mix(input, amount = 50) {\n    const color = this._c(input);\n    const p = amount / 100;\n    const calc = key => (color[key] - this[key]) * p + this[key];\n    const rgba = {\n      r: round(calc('r')),\n      g: round(calc('g')),\n      b: round(calc('b')),\n      a: round(calc('a') * 100) / 100\n    };\n    return this._c(rgba);\n  }\n\n  /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   */\n  tint(amount = 10) {\n    return this.mix({\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 1\n    }, amount);\n  }\n\n  /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   */\n  shade(amount = 10) {\n    return this.mix({\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    }, amount);\n  }\n  onBackground(background) {\n    const bg = this._c(background);\n    const alpha = this.a + bg.a * (1 - this.a);\n    const calc = key => {\n      return round((this[key] * this.a + bg[key] * bg.a * (1 - this.a)) / alpha);\n    };\n    return this._c({\n      r: calc('r'),\n      g: calc('g'),\n      b: calc('b'),\n      a: alpha\n    });\n  }\n\n  // ======================= Status =======================\n  isDark() {\n    return this.getBrightness() < 128;\n  }\n  isLight() {\n    return this.getBrightness() >= 128;\n  }\n\n  // ======================== MISC ========================\n  equals(other) {\n    return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;\n  }\n  clone() {\n    return this._c(this);\n  }\n\n  // ======================= Format =======================\n  toHexString() {\n    let hex = '#';\n    const rHex = (this.r || 0).toString(16);\n    hex += rHex.length === 2 ? rHex : '0' + rHex;\n    const gHex = (this.g || 0).toString(16);\n    hex += gHex.length === 2 ? gHex : '0' + gHex;\n    const bHex = (this.b || 0).toString(16);\n    hex += bHex.length === 2 ? bHex : '0' + bHex;\n    if (typeof this.a === 'number' && this.a >= 0 && this.a < 1) {\n      const aHex = round(this.a * 255).toString(16);\n      hex += aHex.length === 2 ? aHex : '0' + aHex;\n    }\n    return hex;\n  }\n\n  /** CSS support color pattern */\n  toHsl() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      l: this.getLightness(),\n      a: this.a\n    };\n  }\n\n  /** CSS support color pattern */\n  toHslString() {\n    const h = this.getHue();\n    const s = round(this.getSaturation() * 100);\n    const l = round(this.getLightness() * 100);\n    return this.a !== 1 ? `hsla(${h},${s}%,${l}%,${this.a})` : `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /** Same as toHsb */\n  toHsv() {\n    return {\n      h: this.getHue(),\n      s: this.getSaturation(),\n      v: this.getValue(),\n      a: this.a\n    };\n  }\n  toRgb() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b,\n      a: this.a\n    };\n  }\n  toRgbString() {\n    return this.a !== 1 ? `rgba(${this.r},${this.g},${this.b},${this.a})` : `rgb(${this.r},${this.g},${this.b})`;\n  }\n  toString() {\n    return this.toRgbString();\n  }\n\n  // ====================== Privates ======================\n  /** Return a new FastColor object with one channel changed */\n  _sc(rgb, value, max) {\n    const clone = this.clone();\n    clone[rgb] = limitRange(value, max);\n    return clone;\n  }\n  _c(input) {\n    return new this.constructor(input);\n  }\n  getMax() {\n    if (typeof this._max === 'undefined') {\n      this._max = Math.max(this.r, this.g, this.b);\n    }\n    return this._max;\n  }\n  getMin() {\n    if (typeof this._min === 'undefined') {\n      this._min = Math.min(this.r, this.g, this.b);\n    }\n    return this._min;\n  }\n  fromHexString(trimStr) {\n    const withoutPrefix = trimStr.replace('#', '');\n    function connectNum(index1, index2) {\n      return parseInt(withoutPrefix[index1] + withoutPrefix[index2 || index1], 16);\n    }\n    if (withoutPrefix.length < 6) {\n      // #rgb or #rgba\n      this.r = connectNum(0);\n      this.g = connectNum(1);\n      this.b = connectNum(2);\n      this.a = withoutPrefix[3] ? connectNum(3) / 255 : 1;\n    } else {\n      // #rrggbb or #rrggbbaa\n      this.r = connectNum(0, 1);\n      this.g = connectNum(2, 3);\n      this.b = connectNum(4, 5);\n      this.a = withoutPrefix[6] ? connectNum(6, 7) / 255 : 1;\n    }\n  }\n  fromHsl({\n    h,\n    s,\n    l,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._l = l;\n    this.a = typeof a === 'number' ? a : 1;\n    if (s <= 0) {\n      const rgb = round(l * 255);\n      this.r = rgb;\n      this.g = rgb;\n      this.b = rgb;\n    }\n    let r = 0,\n      g = 0,\n      b = 0;\n    const huePrime = h / 60;\n    const chroma = (1 - Math.abs(2 * l - 1)) * s;\n    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n    if (huePrime >= 0 && huePrime < 1) {\n      r = chroma;\n      g = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n      r = secondComponent;\n      g = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n      g = chroma;\n      b = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n      g = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n      r = secondComponent;\n      b = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n      r = chroma;\n      b = secondComponent;\n    }\n    const lightnessModification = l - chroma / 2;\n    this.r = round((r + lightnessModification) * 255);\n    this.g = round((g + lightnessModification) * 255);\n    this.b = round((b + lightnessModification) * 255);\n  }\n  fromHsv({\n    h,\n    s,\n    v,\n    a\n  }) {\n    this._h = h % 360;\n    this._s = s;\n    this._v = v;\n    this.a = typeof a === 'number' ? a : 1;\n    const vv = round(v * 255);\n    this.r = vv;\n    this.g = vv;\n    this.b = vv;\n    if (s <= 0) {\n      return;\n    }\n    const hh = h / 60;\n    const i = Math.floor(hh);\n    const ff = hh - i;\n    const p = round(v * (1.0 - s) * 255);\n    const q = round(v * (1.0 - s * ff) * 255);\n    const t = round(v * (1.0 - s * (1.0 - ff)) * 255);\n    switch (i) {\n      case 0:\n        this.g = t;\n        this.b = p;\n        break;\n      case 1:\n        this.r = q;\n        this.b = p;\n        break;\n      case 2:\n        this.r = p;\n        this.b = t;\n        break;\n      case 3:\n        this.r = p;\n        this.g = q;\n        break;\n      case 4:\n        this.r = t;\n        this.g = p;\n        break;\n      case 5:\n      default:\n        this.g = p;\n        this.b = q;\n        break;\n    }\n  }\n  fromHsvString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsv({\n      h: cells[0],\n      s: cells[1],\n      v: cells[2],\n      a: cells[3]\n    });\n  }\n  fromHslString(trimStr) {\n    const cells = splitColorStr(trimStr, parseHSVorHSL);\n    this.fromHsl({\n      h: cells[0],\n      s: cells[1],\n      l: cells[2],\n      a: cells[3]\n    });\n  }\n  fromRgbString(trimStr) {\n    const cells = splitColorStr(trimStr, (num, txt) =>\n    // Convert percentage to number. e.g. 50% -> 128\n    txt.includes('%') ? round(num / 100 * 255) : num);\n    this.r = cells[0];\n    this.g = cells[1];\n    this.b = cells[2];\n    this.a = cells[3];\n  }\n}"]},"metadata":{},"sourceType":"module"}