{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { cloneElement } from '../_util/reactNode';\nimport TextArea from '../input/TextArea';\nimport useStyle from './style';\n\nconst Editable = props => {\n  const {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = props;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef(null);\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    var _a;\n\n    if ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n\n  const onChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n\n  const onKeyDown = _ref2 => {\n    let {\n      keyCode\n    } = _ref2; // We don't record keyCode when IME is using\n\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n\n  const onKeyUp = _ref3 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref3; // Check if it's a real key\n\n    if (lastKeyCode.current !== keyCode || inComposition.current || ctrlKey || altKey || metaKey || shiftKey) {\n      return;\n    }\n\n    if (keyCode === KeyCode.ENTER) {\n      confirmChange();\n      onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n    } else if (keyCode === KeyCode.ESC) {\n      onCancel();\n    }\n  };\n\n  const onBlur = () => {\n    confirmChange();\n  };\n\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-${component}`]: !!component\n  }, className, hashId, cssVarCls);\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\n\nexport default Editable;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/typography/Editable.js"],"names":["React","EnterOutlined","classNames","KeyCode","cloneElement","TextArea","useStyle","Editable","props","prefixCls","ariaLabel","className","style","direction","maxLength","autoSize","value","onSave","onCancel","onEnd","component","enterIcon","createElement","ref","useRef","inComposition","lastKeyCode","current","setCurrent","useState","useEffect","_a","resizableTextArea","textArea","focus","length","setSelectionRange","onChange","_ref","target","replace","onCompositionStart","onCompositionEnd","onKeyDown","_ref2","keyCode","confirmChange","trim","onKeyUp","_ref3","ctrlKey","altKey","metaKey","shiftKey","ENTER","ESC","onBlur","wrapCSSVar","hashId","cssVarCls","textAreaClassName","rows"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { cloneElement } from '../_util/reactNode';\nimport TextArea from '../input/TextArea';\nimport useStyle from './style';\nconst Editable = props => {\n  const {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = props;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef(null);\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    var _a;\n    if ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n  const onChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n  const onKeyDown = _ref2 => {\n    let {\n      keyCode\n    } = _ref2;\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n  const onKeyUp = _ref3 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref3;\n    // Check if it's a real key\n    if (lastKeyCode.current !== keyCode || inComposition.current || ctrlKey || altKey || metaKey || shiftKey) {\n      return;\n    }\n    if (keyCode === KeyCode.ENTER) {\n      confirmChange();\n      onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n    } else if (keyCode === KeyCode.ESC) {\n      onCancel();\n    }\n  };\n  const onBlur = () => {\n    confirmChange();\n  };\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-${component}`]: !!component\n  }, className, hashId, cssVarCls);\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\nexport default Editable;"]},"metadata":{},"sourceType":"module"}