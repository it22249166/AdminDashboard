{"ast":null,"code":"import { useRef } from 'react';\nexport default (function (isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight) {\n  // Do lock for a wheel when scrolling\n  var lockRef = useRef(false);\n  var lockTimeoutRef = useRef(null);\n\n  function lockScroll() {\n    clearTimeout(lockTimeoutRef.current);\n    lockRef.current = true;\n    lockTimeoutRef.current = setTimeout(function () {\n      lockRef.current = false;\n    }, 50);\n  } // Pass to ref since global add is in closure\n\n\n  var scrollPingRef = useRef({\n    top: isScrollAtTop,\n    bottom: isScrollAtBottom,\n    left: isScrollAtLeft,\n    right: isScrollAtRight\n  });\n  scrollPingRef.current.top = isScrollAtTop;\n  scrollPingRef.current.bottom = isScrollAtBottom;\n  scrollPingRef.current.left = isScrollAtLeft;\n  scrollPingRef.current.right = isScrollAtRight;\n  return function (isHorizontal, delta) {\n    var smoothOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var originScroll = isHorizontal ? // Pass origin wheel when on the left\n    delta < 0 && scrollPingRef.current.left || // Pass origin wheel when on the right\n    delta > 0 && scrollPingRef.current.right // Pass origin wheel when on the top\n    : delta < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom\n    delta > 0 && scrollPingRef.current.bottom;\n\n    if (smoothOffset && originScroll) {\n      // No need lock anymore when it's smooth offset from touchMove interval\n      clearTimeout(lockTimeoutRef.current);\n      lockRef.current = false;\n    } else if (!originScroll || lockRef.current) {\n      lockScroll();\n    }\n\n    return !lockRef.current && originScroll;\n  };\n});","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-virtual-list/es/hooks/useOriginScroll.js"],"names":["useRef","isScrollAtTop","isScrollAtBottom","isScrollAtLeft","isScrollAtRight","lockRef","lockTimeoutRef","lockScroll","clearTimeout","current","setTimeout","scrollPingRef","top","bottom","left","right","isHorizontal","delta","smoothOffset","arguments","length","undefined","originScroll"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,gBAAgB,UAAUC,aAAV,EAAyBC,gBAAzB,EAA2CC,cAA3C,EAA2DC,eAA3D,EAA4E;AAC1F;AACA,MAAIC,OAAO,GAAGL,MAAM,CAAC,KAAD,CAApB;AACA,MAAIM,cAAc,GAAGN,MAAM,CAAC,IAAD,CAA3B;;AACA,WAASO,UAAT,GAAsB;AACpBC,IAAAA,YAAY,CAACF,cAAc,CAACG,OAAhB,CAAZ;AACAJ,IAAAA,OAAO,CAACI,OAAR,GAAkB,IAAlB;AACAH,IAAAA,cAAc,CAACG,OAAf,GAAyBC,UAAU,CAAC,YAAY;AAC9CL,MAAAA,OAAO,CAACI,OAAR,GAAkB,KAAlB;AACD,KAFkC,EAEhC,EAFgC,CAAnC;AAGD,GAVyF,CAY1F;;;AACA,MAAIE,aAAa,GAAGX,MAAM,CAAC;AACzBY,IAAAA,GAAG,EAAEX,aADoB;AAEzBY,IAAAA,MAAM,EAAEX,gBAFiB;AAGzBY,IAAAA,IAAI,EAAEX,cAHmB;AAIzBY,IAAAA,KAAK,EAAEX;AAJkB,GAAD,CAA1B;AAMAO,EAAAA,aAAa,CAACF,OAAd,CAAsBG,GAAtB,GAA4BX,aAA5B;AACAU,EAAAA,aAAa,CAACF,OAAd,CAAsBI,MAAtB,GAA+BX,gBAA/B;AACAS,EAAAA,aAAa,CAACF,OAAd,CAAsBK,IAAtB,GAA6BX,cAA7B;AACAQ,EAAAA,aAAa,CAACF,OAAd,CAAsBM,KAAtB,GAA8BX,eAA9B;AACA,SAAO,UAAUY,YAAV,EAAwBC,KAAxB,EAA+B;AACpC,QAAIC,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAvF;AACA,QAAIG,YAAY,GAAGN,YAAY,GAC/B;AACAC,IAAAA,KAAK,GAAG,CAAR,IAAaN,aAAa,CAACF,OAAd,CAAsBK,IAAnC,IACA;AACAG,IAAAA,KAAK,GAAG,CAAR,IAAaN,aAAa,CAACF,OAAd,CAAsBM,KAJJ,CAIU;AAJV,MAK7BE,KAAK,GAAG,CAAR,IAAaN,aAAa,CAACF,OAAd,CAAsBG,GAAnC,IACF;AACAK,IAAAA,KAAK,GAAG,CAAR,IAAaN,aAAa,CAACF,OAAd,CAAsBI,MAPnC;;AAQA,QAAIK,YAAY,IAAII,YAApB,EAAkC;AAChC;AACAd,MAAAA,YAAY,CAACF,cAAc,CAACG,OAAhB,CAAZ;AACAJ,MAAAA,OAAO,CAACI,OAAR,GAAkB,KAAlB;AACD,KAJD,MAIO,IAAI,CAACa,YAAD,IAAiBjB,OAAO,CAACI,OAA7B,EAAsC;AAC3CF,MAAAA,UAAU;AACX;;AACD,WAAO,CAACF,OAAO,CAACI,OAAT,IAAoBa,YAA3B;AACD,GAlBD;AAmBD,CA1CD","sourcesContent":["import { useRef } from 'react';\nexport default (function (isScrollAtTop, isScrollAtBottom, isScrollAtLeft, isScrollAtRight) {\n  // Do lock for a wheel when scrolling\n  var lockRef = useRef(false);\n  var lockTimeoutRef = useRef(null);\n  function lockScroll() {\n    clearTimeout(lockTimeoutRef.current);\n    lockRef.current = true;\n    lockTimeoutRef.current = setTimeout(function () {\n      lockRef.current = false;\n    }, 50);\n  }\n\n  // Pass to ref since global add is in closure\n  var scrollPingRef = useRef({\n    top: isScrollAtTop,\n    bottom: isScrollAtBottom,\n    left: isScrollAtLeft,\n    right: isScrollAtRight\n  });\n  scrollPingRef.current.top = isScrollAtTop;\n  scrollPingRef.current.bottom = isScrollAtBottom;\n  scrollPingRef.current.left = isScrollAtLeft;\n  scrollPingRef.current.right = isScrollAtRight;\n  return function (isHorizontal, delta) {\n    var smoothOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var originScroll = isHorizontal ?\n    // Pass origin wheel when on the left\n    delta < 0 && scrollPingRef.current.left ||\n    // Pass origin wheel when on the right\n    delta > 0 && scrollPingRef.current.right // Pass origin wheel when on the top\n    : delta < 0 && scrollPingRef.current.top ||\n    // Pass origin wheel when on the bottom\n    delta > 0 && scrollPingRef.current.bottom;\n    if (smoothOffset && originScroll) {\n      // No need lock anymore when it's smooth offset from touchMove interval\n      clearTimeout(lockTimeoutRef.current);\n      lockRef.current = false;\n    } else if (!originScroll || lockRef.current) {\n      lockScroll();\n    }\n    return !lockRef.current && originScroll;\n  };\n});"]},"metadata":{},"sourceType":"module"}