{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\n\nconst CopyBtn = _ref => {\n  let {\n    prefixCls,\n    copied,\n    locale,\n    iconOnly,\n    tooltips,\n    icon,\n    tabIndex,\n    onCopy,\n    loading: btnLoading\n  } = _ref;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale !== null && locale !== void 0 ? locale : {};\n  const systemStr = copied ? copiedText : copyText;\n  const copyTitle = getNode(tooltipNodes[copied ? 1 : 0], systemStr);\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel,\n    tabIndex: tabIndex\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], btnLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n};\n\nexport default CopyBtn;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/typography/Base/CopyBtn.js"],"names":["React","CheckOutlined","CopyOutlined","LoadingOutlined","classNames","Tooltip","getNode","toList","CopyBtn","_ref","prefixCls","copied","locale","iconOnly","tooltips","icon","tabIndex","onCopy","loading","btnLoading","tooltipNodes","iconNodes","copiedText","copy","copyText","systemStr","copyTitle","ariaLabel","createElement","title","type","className","onClick"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;;AACA,MAAMC,OAAO,GAAGC,IAAI,IAAI;AACtB,MAAI;AACFC,IAAAA,SADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,QAJE;AAKFC,IAAAA,QALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA,QAPE;AAQFC,IAAAA,MARE;AASFC,IAAAA,OAAO,EAAEC;AATP,MAUAV,IAVJ;AAWA,QAAMW,YAAY,GAAGb,MAAM,CAACO,QAAD,CAA3B;AACA,QAAMO,SAAS,GAAGd,MAAM,CAACQ,IAAD,CAAxB;AACA,QAAM;AACJJ,IAAAA,MAAM,EAAEW,UADJ;AAEJC,IAAAA,IAAI,EAAEC;AAFF,MAGFZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,EAHpD;AAIA,QAAMa,SAAS,GAAGd,MAAM,GAAGW,UAAH,GAAgBE,QAAxC;AACA,QAAME,SAAS,GAAGpB,OAAO,CAACc,YAAY,CAACT,MAAM,GAAG,CAAH,GAAO,CAAd,CAAb,EAA+Bc,SAA/B,CAAzB;AACA,QAAME,SAAS,GAAG,OAAOD,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CD,SAA9D;AACA,SAAO,aAAazB,KAAK,CAAC4B,aAAN,CAAoBvB,OAApB,EAA6B;AAC/CwB,IAAAA,KAAK,EAAEH;AADwC,GAA7B,EAEjB,aAAa1B,KAAK,CAAC4B,aAAN,CAAoB,QAApB,EAA8B;AAC5CE,IAAAA,IAAI,EAAE,QADsC;AAE5CC,IAAAA,SAAS,EAAE3B,UAAU,CAAE,GAAEM,SAAU,OAAd,EAAsB;AACzC,OAAE,GAAEA,SAAU,eAAd,GAA+BC,MADU;AAEzC,OAAE,GAAED,SAAU,iBAAd,GAAiCG;AAFQ,KAAtB,CAFuB;AAM5CmB,IAAAA,OAAO,EAAEf,MANmC;AAO5C,kBAAcU,SAP8B;AAQ5CX,IAAAA,QAAQ,EAAEA;AARkC,GAA9B,EASbL,MAAM,GAAGL,OAAO,CAACe,SAAS,CAAC,CAAD,CAAV,EAAe,aAAarB,KAAK,CAAC4B,aAAN,CAAoB3B,aAApB,EAAmC,IAAnC,CAA5B,EAAsE,IAAtE,CAAV,GAAwFK,OAAO,CAACe,SAAS,CAAC,CAAD,CAAV,EAAeF,UAAU,GAAG,aAAanB,KAAK,CAAC4B,aAAN,CAAoBzB,eAApB,EAAqC,IAArC,CAAhB,GAA6D,aAAaH,KAAK,CAAC4B,aAAN,CAAoB1B,YAApB,EAAkC,IAAlC,CAAnG,EAA4I,IAA5I,CATxF,CAFI,CAApB;AAYD,CAjCD;;AAkCA,eAAeM,OAAf","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport classNames from 'classnames';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nconst CopyBtn = _ref => {\n  let {\n    prefixCls,\n    copied,\n    locale,\n    iconOnly,\n    tooltips,\n    icon,\n    tabIndex,\n    onCopy,\n    loading: btnLoading\n  } = _ref;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale !== null && locale !== void 0 ? locale : {};\n  const systemStr = copied ? copiedText : copyText;\n  const copyTitle = getNode(tooltipNodes[copied ? 1 : 0], systemStr);\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel,\n    tabIndex: tabIndex\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], btnLoading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n};\nexport default CopyBtn;"]},"metadata":{},"sourceType":"module"}