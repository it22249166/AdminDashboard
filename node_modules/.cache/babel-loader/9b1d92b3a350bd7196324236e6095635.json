{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { getArrowToken } from '../../style/roundedArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\n\nconst genTooltipStyle = token => {\n  const {\n    calc,\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    arrowOffsetHorizontal,\n    sizePopupArrow\n  } = token; // arrowOffsetHorizontal + arrowWidth + borderRadius\n\n  const edgeAlignMinWidth = calc(tooltipBorderRadius).add(sizePopupArrow).add(arrowOffsetHorizontal).equal(); // borderRadius * 2 + arrowWidth\n\n  const centerAlignMinWidth = calc(tooltipBorderRadius).mul(2).add(sizePopupArrow).equal();\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      // When use `autoArrow`, origin will follow the arrow position\n      '--valid-offset-x': 'var(--arrow-offset-horizontal, var(--arrow-x))',\n      transformOrigin: [`var(--valid-offset-x, 50%)`, `var(--arrow-y, 50%)`].join(' '),\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: centerAlignMinWidth,\n        minHeight: controlHeight,\n        padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Align placement should have another min width\n      [[`&-placement-topLeft`, `&-placement-topRight`, `&-placement-bottomLeft`, `&-placement-bottomRight`].join(',')]: {\n        minWidth: edgeAlignMinWidth\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  }, // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'), // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n}; // ============================== Export ==============================\n\n\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/tooltip/style/index.js"],"names":["unit","resetComponent","initZoomMotion","getArrowStyle","getArrowOffsetToken","MAX_VERTICAL_CONTENT_RADIUS","getArrowToken","genPresetColor","genStyleHooks","mergeToken","genTooltipStyle","token","calc","componentCls","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","arrowOffsetHorizontal","sizePopupArrow","edgeAlignMinWidth","add","equal","centerAlignMinWidth","mul","Object","assign","position","zIndex","display","width","maxWidth","visibility","transformOrigin","join","minWidth","minHeight","padding","div","color","textAlign","textDecoration","wordWrap","backgroundColor","borderRadius","boxShadow","boxSizing","min","colorKey","_ref","darkColor","direction","margin","prepareComponentToken","zIndexPopupBase","contentRadius","limitVerticalRadius","borderRadiusOuter","Math","prefixCls","injectStyle","arguments","length","undefined","useStyle","colorTextLightSolid","colorBgSpotlight","TooltipToken","resetStyle"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { getArrowOffsetToken, MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { getArrowToken } from '../../style/roundedArrow';\nimport { genPresetColor, genStyleHooks, mergeToken } from '../../theme/internal';\nconst genTooltipStyle = token => {\n  const {\n    calc,\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    arrowOffsetHorizontal,\n    sizePopupArrow\n  } = token;\n  // arrowOffsetHorizontal + arrowWidth + borderRadius\n  const edgeAlignMinWidth = calc(tooltipBorderRadius).add(sizePopupArrow).add(arrowOffsetHorizontal).equal();\n  // borderRadius * 2 + arrowWidth\n  const centerAlignMinWidth = calc(tooltipBorderRadius).mul(2).add(sizePopupArrow).equal();\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      // When use `autoArrow`, origin will follow the arrow position\n      '--valid-offset-x': 'var(--arrow-offset-horizontal, var(--arrow-x))',\n      transformOrigin: [`var(--valid-offset-x, 50%)`, `var(--arrow-y, 50%)`].join(' '),\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: centerAlignMinWidth,\n        minHeight: controlHeight,\n        padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Align placement should have another min width\n      [[`&-placement-topLeft`, `&-placement-topRight`, `&-placement-bottomLeft`, `&-placement-bottomRight`].join(',')]: {\n        minWidth: edgeAlignMinWidth\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: token.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(token, 'var(--antd-arrow-background-color)'),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport const prepareComponentToken = token => Object.assign(Object.assign({\n  zIndexPopup: token.zIndexPopupBase + 70\n}, getArrowOffsetToken({\n  contentRadius: token.borderRadius,\n  limitVerticalRadius: true\n})), getArrowToken(mergeToken(token, {\n  borderRadiusOuter: Math.min(token.borderRadiusOuter, 4)\n})));\nexport default (function (prefixCls) {\n  let injectStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const useStyle = genStyleHooks('Tooltip', token => {\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgSpotlight\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgSpotlight\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, prepareComponentToken, {\n    resetStyle: false,\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    injectStyle\n  });\n  return useStyle(prefixCls);\n});"]},"metadata":{},"sourceType":"module"}