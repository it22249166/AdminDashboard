{"ast":null,"code":"import * as React from 'react';\n\nconst useLazyKVMap = (data, childrenColumnName, getRowKey) => {\n  const mapCacheRef = React.useRef({});\n\n  function getRecordByKey(key) {\n    var _a;\n\n    if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {\n      const kvMap = new Map();\n\n      function dig(records) {\n        records.forEach((record, index) => {\n          const rowKey = getRowKey(record, index);\n          kvMap.set(rowKey, record);\n\n          if (record && typeof record === 'object' && childrenColumnName in record) {\n            dig(record[childrenColumnName] || []);\n          }\n        });\n      }\n\n      dig(data);\n      mapCacheRef.current = {\n        data,\n        childrenColumnName,\n        kvMap,\n        getRowKey\n      };\n    }\n\n    return (_a = mapCacheRef.current.kvMap) === null || _a === void 0 ? void 0 : _a.get(key);\n  }\n\n  return [getRecordByKey];\n};\n\nexport default useLazyKVMap;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/table/hooks/useLazyKVMap.js"],"names":["React","useLazyKVMap","data","childrenColumnName","getRowKey","mapCacheRef","useRef","getRecordByKey","key","_a","current","kvMap","Map","dig","records","forEach","record","index","rowKey","set","get"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AACA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,kBAAP,EAA2BC,SAA3B,KAAyC;AAC5D,QAAMC,WAAW,GAAGL,KAAK,CAACM,MAAN,CAAa,EAAb,CAApB;;AACA,WAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,QAAIC,EAAJ;;AACA,QAAI,CAACJ,WAAW,CAACK,OAAb,IAAwBL,WAAW,CAACK,OAAZ,CAAoBR,IAApB,KAA6BA,IAArD,IAA6DG,WAAW,CAACK,OAAZ,CAAoBP,kBAApB,KAA2CA,kBAAxG,IAA8HE,WAAW,CAACK,OAAZ,CAAoBN,SAApB,KAAkCA,SAApK,EAA+K;AAC7K,YAAMO,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AACA,eAASC,GAAT,CAAaC,OAAb,EAAsB;AACpBA,QAAAA,OAAO,CAACC,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjC,gBAAMC,MAAM,GAAGd,SAAS,CAACY,MAAD,EAASC,KAAT,CAAxB;AACAN,UAAAA,KAAK,CAACQ,GAAN,CAAUD,MAAV,EAAkBF,MAAlB;;AACA,cAAIA,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwCb,kBAAkB,IAAIa,MAAlE,EAA0E;AACxEH,YAAAA,GAAG,CAACG,MAAM,CAACb,kBAAD,CAAN,IAA8B,EAA/B,CAAH;AACD;AACF,SAND;AAOD;;AACDU,MAAAA,GAAG,CAACX,IAAD,CAAH;AACAG,MAAAA,WAAW,CAACK,OAAZ,GAAsB;AACpBR,QAAAA,IADoB;AAEpBC,QAAAA,kBAFoB;AAGpBQ,QAAAA,KAHoB;AAIpBP,QAAAA;AAJoB,OAAtB;AAMD;;AACD,WAAO,CAACK,EAAE,GAAGJ,WAAW,CAACK,OAAZ,CAAoBC,KAA1B,MAAqC,IAArC,IAA6CF,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAACW,GAAH,CAAOZ,GAAP,CAA7E;AACD;;AACD,SAAO,CAACD,cAAD,CAAP;AACD,CA1BD;;AA2BA,eAAeN,YAAf","sourcesContent":["import * as React from 'react';\nconst useLazyKVMap = (data, childrenColumnName, getRowKey) => {\n  const mapCacheRef = React.useRef({});\n  function getRecordByKey(key) {\n    var _a;\n    if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {\n      const kvMap = new Map();\n      function dig(records) {\n        records.forEach((record, index) => {\n          const rowKey = getRowKey(record, index);\n          kvMap.set(rowKey, record);\n          if (record && typeof record === 'object' && childrenColumnName in record) {\n            dig(record[childrenColumnName] || []);\n          }\n        });\n      }\n      dig(data);\n      mapCacheRef.current = {\n        data,\n        childrenColumnName,\n        kvMap,\n        getRowKey\n      };\n    }\n    return (_a = mapCacheRef.current.kvMap) === null || _a === void 0 ? void 0 : _a.get(key);\n  }\n  return [getRecordByKey];\n};\nexport default useLazyKVMap;"]},"metadata":{},"sourceType":"module"}