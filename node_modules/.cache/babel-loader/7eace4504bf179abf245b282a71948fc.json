{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = 'label';\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(props, ref) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef(null);\n  const chartRef = useRef(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options\n      },\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width,\n    ...canvasProps\n  }, fallbackContent);\n}\n\nconst Chart = /*#__PURE__*/forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Chart, { ...props,\n    ref: ref,\n    type: type\n  }));\n}\n\nconst Line = /* #__PURE__ */createTypedChart('line', LineController);\nconst Bar = /* #__PURE__ */createTypedChart('bar', BarController);\nconst Radar = /* #__PURE__ */createTypedChart('radar', RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart('doughnut', DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart('polarArea', PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart('bubble', BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart('pie', PieController);\nconst Scatter = /* #__PURE__ */createTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"sources":["../src/utils.ts","../src/chart.tsx","../src/typedCharts.tsx"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","Object","assign","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","width","redraw","type","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"mappings":"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","sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}