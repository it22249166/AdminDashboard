{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { fillLegacyProps } from \"../utils/legacyUtil\";\n\nvar useFilterTreeData = function useFilterTreeData(treeData, searchValue, options) {\n  var fieldNames = options.fieldNames,\n      treeNodeFilterProp = options.treeNodeFilterProp,\n      filterTreeNode = options.filterTreeNode;\n  var fieldChildren = fieldNames.children;\n  return React.useMemo(function () {\n    if (!searchValue || filterTreeNode === false) {\n      return treeData;\n    }\n\n    var filterOptionFunc = typeof filterTreeNode === 'function' ? filterTreeNode : function (_, dataNode) {\n      return String(dataNode[treeNodeFilterProp]).toUpperCase().includes(searchValue.toUpperCase());\n    };\n\n    var filterTreeNodes = function filterTreeNodes(nodes) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return nodes.reduce(function (filtered, node) {\n        var children = node[fieldChildren];\n        var isMatch = keepAll || filterOptionFunc(searchValue, fillLegacyProps(node));\n        var filteredChildren = filterTreeNodes(children || [], isMatch);\n\n        if (isMatch || filteredChildren.length) {\n          filtered.push(_objectSpread(_objectSpread({}, node), {}, _defineProperty({\n            isLeaf: undefined\n          }, fieldChildren, filteredChildren)));\n        }\n\n        return filtered;\n      }, []);\n    };\n\n    return filterTreeNodes(treeData);\n  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);\n};\n\nexport default useFilterTreeData;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/rc-tree-select/es/hooks/useFilterTreeData.js"],"names":["_defineProperty","_objectSpread","React","fillLegacyProps","useFilterTreeData","treeData","searchValue","options","fieldNames","treeNodeFilterProp","filterTreeNode","fieldChildren","children","useMemo","filterOptionFunc","_","dataNode","String","toUpperCase","includes","filterTreeNodes","nodes","keepAll","arguments","length","undefined","reduce","filtered","node","isMatch","filteredChildren","push","isLeaf"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AACA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AACjF,MAAIC,UAAU,GAAGD,OAAO,CAACC,UAAzB;AAAA,MACEC,kBAAkB,GAAGF,OAAO,CAACE,kBAD/B;AAAA,MAEEC,cAAc,GAAGH,OAAO,CAACG,cAF3B;AAGA,MAAIC,aAAa,GAAGH,UAAU,CAACI,QAA/B;AACA,SAAOV,KAAK,CAACW,OAAN,CAAc,YAAY;AAC/B,QAAI,CAACP,WAAD,IAAgBI,cAAc,KAAK,KAAvC,EAA8C;AAC5C,aAAOL,QAAP;AACD;;AACD,QAAIS,gBAAgB,GAAG,OAAOJ,cAAP,KAA0B,UAA1B,GAAuCA,cAAvC,GAAwD,UAAUK,CAAV,EAAaC,QAAb,EAAuB;AACpG,aAAOC,MAAM,CAACD,QAAQ,CAACP,kBAAD,CAAT,CAAN,CAAqCS,WAArC,GAAmDC,QAAnD,CAA4Db,WAAW,CAACY,WAAZ,EAA5D,CAAP;AACD,KAFD;;AAGA,QAAIE,eAAe,GAAG,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACpD,UAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAlF;AACA,aAAOF,KAAK,CAACK,MAAN,CAAa,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC5C,YAAIhB,QAAQ,GAAGgB,IAAI,CAACjB,aAAD,CAAnB;AACA,YAAIkB,OAAO,GAAGP,OAAO,IAAIR,gBAAgB,CAACR,WAAD,EAAcH,eAAe,CAACyB,IAAD,CAA7B,CAAzC;AACA,YAAIE,gBAAgB,GAAGV,eAAe,CAACR,QAAQ,IAAI,EAAb,EAAiBiB,OAAjB,CAAtC;;AACA,YAAIA,OAAO,IAAIC,gBAAgB,CAACN,MAAhC,EAAwC;AACtCG,UAAAA,QAAQ,CAACI,IAAT,CAAc9B,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK2B,IAAL,CAAd,EAA0B,EAA1B,EAA8B5B,eAAe,CAAC;AACvEgC,YAAAA,MAAM,EAAEP;AAD+D,WAAD,EAErEd,aAFqE,EAEtDmB,gBAFsD,CAA7C,CAA3B;AAGD;;AACD,eAAOH,QAAP;AACD,OAVM,EAUJ,EAVI,CAAP;AAWD,KAbD;;AAcA,WAAOP,eAAe,CAACf,QAAD,CAAtB;AACD,GAtBM,EAsBJ,CAACA,QAAD,EAAWC,WAAX,EAAwBK,aAAxB,EAAuCF,kBAAvC,EAA2DC,cAA3D,CAtBI,CAAP;AAuBD,CA5BD;;AA6BA,eAAeN,iBAAf","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { fillLegacyProps } from \"../utils/legacyUtil\";\nvar useFilterTreeData = function useFilterTreeData(treeData, searchValue, options) {\n  var fieldNames = options.fieldNames,\n    treeNodeFilterProp = options.treeNodeFilterProp,\n    filterTreeNode = options.filterTreeNode;\n  var fieldChildren = fieldNames.children;\n  return React.useMemo(function () {\n    if (!searchValue || filterTreeNode === false) {\n      return treeData;\n    }\n    var filterOptionFunc = typeof filterTreeNode === 'function' ? filterTreeNode : function (_, dataNode) {\n      return String(dataNode[treeNodeFilterProp]).toUpperCase().includes(searchValue.toUpperCase());\n    };\n    var filterTreeNodes = function filterTreeNodes(nodes) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return nodes.reduce(function (filtered, node) {\n        var children = node[fieldChildren];\n        var isMatch = keepAll || filterOptionFunc(searchValue, fillLegacyProps(node));\n        var filteredChildren = filterTreeNodes(children || [], isMatch);\n        if (isMatch || filteredChildren.length) {\n          filtered.push(_objectSpread(_objectSpread({}, node), {}, _defineProperty({\n            isLeaf: undefined\n          }, fieldChildren, filteredChildren)));\n        }\n        return filtered;\n      }, []);\n    };\n    return filterTreeNodes(treeData);\n  }, [treeData, searchValue, fieldChildren, treeNodeFilterProp, filterTreeNode]);\n};\nexport default useFilterTreeData;"]},"metadata":{},"sourceType":"module"}