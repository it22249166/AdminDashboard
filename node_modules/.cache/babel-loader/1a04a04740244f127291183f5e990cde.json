{"ast":null,"code":"import { resetComponent } from '../../style';\nimport { genStyleHooks } from '../../theme/internal';\n\nconst genRtlStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [`&-rtl${componentCls}-horizontal`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: 0,\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: 'unset',\n          insetInlineStart: 0\n        }\n      }\n    },\n    [`&-rtl${componentCls}-vertical`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        }\n      }\n    }\n  };\n};\n\nconst centerStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: {\n    _skip_check_: true,\n    value: '50%'\n  },\n  transform: 'translate(-50%, -50%)'\n};\n\nconst genSplitterStyle = token => {\n  const {\n    componentCls,\n    colorFill,\n    splitBarDraggableSize,\n    splitBarSize,\n    splitTriggerSize,\n    controlItemBgHover,\n    controlItemBgActive,\n    controlItemBgActiveHover,\n    prefixCls\n  } = token;\n  const splitBarCls = `${componentCls}-bar`;\n  const splitMaskCls = `${componentCls}-mask`;\n  const splitPanelCls = `${componentCls}-panel`;\n  const halfTriggerSize = token.calc(splitTriggerSize).div(2).equal();\n  const splitterBarPreviewOffsetVar = `${prefixCls}-bar-preview-offset`;\n  const splitterBarPreviewStyle = {\n    position: 'absolute',\n    background: token.colorPrimary,\n    opacity: 0.2,\n    pointerEvents: 'none',\n    transition: 'none',\n    zIndex: 1,\n    display: 'none'\n  };\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n      alignItems: 'stretch',\n      // ======================== SplitBar ========================\n      // Use `>` to avoid conflict with mix layout\n      [`> ${splitBarCls}`]: {\n        flex: 'none',\n        position: 'relative',\n        userSelect: 'none',\n        // ======================= Dragger =======================\n        [`${splitBarCls}-dragger`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: 1,\n          // Hover background\n          '&::before': Object.assign({\n            content: '\"\"',\n            background: controlItemBgHover\n          }, centerStyle),\n          // Spinner\n          '&::after': Object.assign({\n            content: '\"\"',\n            background: colorFill\n          }, centerStyle),\n          // Hover\n          [`&:hover:not(${splitBarCls}-dragger-active)`]: {\n            '&::before': {\n              background: controlItemBgActive\n            }\n          },\n          // Active\n          '&-active': {\n            zIndex: 2,\n            '&::before': {\n              background: controlItemBgActiveHover\n            }\n          },\n          // Disabled, not use `pointer-events: none` since still need trigger collapse\n          [`&-disabled${splitBarCls}-dragger`]: {\n            zIndex: 0,\n            '&, &:hover, &-active': {\n              cursor: 'default',\n              '&::before': {\n                background: controlItemBgHover\n              }\n            },\n            '&::after': {\n              display: 'none'\n            }\n          }\n        }),\n        // ======================= Collapse =======================\n        [`${splitBarCls}-collapse-bar`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: token.zIndexPopupBase,\n          background: controlItemBgHover,\n          fontSize: token.fontSizeSM,\n          borderRadius: token.borderRadiusXS,\n          color: token.colorText,\n          cursor: 'pointer',\n          opacity: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          '@media(hover:none)': {\n            opacity: 1\n          },\n          // Hover\n          '&:hover': {\n            background: controlItemBgActive\n          },\n          // Active\n          '&:active': {\n            background: controlItemBgActiveHover\n          }\n        }),\n        // ======================== Status ========================\n        // Hover\n        '&:hover, &:active': {\n          [`${splitBarCls}-collapse-bar`]: {\n            opacity: 1\n          }\n        }\n      },\n      // =========================== Mask =========================\n      // Util dom for handle cursor\n      [splitMaskCls]: {\n        position: 'fixed',\n        zIndex: token.zIndexPopupBase,\n        inset: 0,\n        '&-horizontal': {\n          cursor: 'col-resize'\n        },\n        '&-vertical': {\n          cursor: 'row-resize'\n        }\n      },\n      // ==========================================================\n      // ==                        Layout                        ==\n      // ==========================================================\n      '&-horizontal': {\n        flexDirection: 'row',\n        [`> ${splitBarCls}`]: {\n          width: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: '100%',\n            width: splitBarSize\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateX(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'col-resize',\n            height: '100%',\n            width: splitTriggerSize,\n            '&::before': {\n              height: '100%',\n              width: splitBarSize\n            },\n            '&::after': {\n              height: splitBarDraggableSize,\n              width: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            width: token.fontSizeSM,\n            height: token.controlHeightSM,\n            '&-start': {\n              left: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              right: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              transform: 'translateY(-50%)'\n            },\n            '&-end': {\n              left: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              right: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              transform: 'translateY(-50%)'\n            }\n          }\n        }\n      },\n      '&-vertical': {\n        flexDirection: 'column',\n        [`> ${splitBarCls}`]: {\n          height: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: splitBarSize,\n            width: '100%'\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateY(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'row-resize',\n            width: '100%',\n            height: splitTriggerSize,\n            '&::before': {\n              width: '100%',\n              height: splitBarSize\n            },\n            '&::after': {\n              width: splitBarDraggableSize,\n              height: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            height: token.fontSizeSM,\n            width: token.controlHeightSM,\n            '&-start': {\n              top: 'auto',\n              bottom: halfTriggerSize,\n              transform: 'translateX(-50%)'\n            },\n            '&-end': {\n              top: halfTriggerSize,\n              bottom: 'auto',\n              transform: 'translateX(-50%)'\n            }\n          }\n        }\n      },\n      // ========================= Panels =========================\n      [splitPanelCls]: {\n        overflow: 'auto',\n        padding: '0 1px',\n        scrollbarWidth: 'thin',\n        boxSizing: 'border-box',\n        '&-hidden': {\n          padding: 0,\n          overflow: 'hidden'\n        },\n        [`&:has(${componentCls}:only-child)`]: {\n          overflow: 'hidden'\n        }\n      }\n    }), genRtlStyle(token))\n  };\n};\n\nexport const prepareComponentToken = token => {\n  var _a;\n\n  const splitBarSize = token.splitBarSize || 2;\n  const splitTriggerSize = token.splitTriggerSize || 6; // https://github.com/ant-design/ant-design/pull/51223\n\n  const resizeSpinnerSize = token.resizeSpinnerSize || 20;\n  const splitBarDraggableSize = (_a = token.splitBarDraggableSize) !== null && _a !== void 0 ? _a : resizeSpinnerSize;\n  return {\n    splitBarSize,\n    splitTriggerSize,\n    splitBarDraggableSize,\n    resizeSpinnerSize\n  };\n}; // ============================== Export ==============================\n\nexport default genStyleHooks('Splitter', token => [genSplitterStyle(token)], prepareComponentToken);","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/splitter/style/index.js"],"names":["resetComponent","genStyleHooks","genRtlStyle","token","componentCls","insetInlineEnd","insetInlineStart","centerStyle","position","top","left","_skip_check_","value","transform","genSplitterStyle","colorFill","splitBarDraggableSize","splitBarSize","splitTriggerSize","controlItemBgHover","controlItemBgActive","controlItemBgActiveHover","prefixCls","splitBarCls","splitMaskCls","splitPanelCls","halfTriggerSize","calc","div","equal","splitterBarPreviewOffsetVar","splitterBarPreviewStyle","background","colorPrimary","opacity","pointerEvents","transition","zIndex","display","Object","assign","width","height","alignItems","flex","userSelect","content","cursor","zIndexPopupBase","fontSize","fontSizeSM","borderRadius","borderRadiusXS","color","colorText","justifyContent","inset","flexDirection","controlHeightSM","right","bottom","overflow","padding","scrollbarWidth","boxSizing","prepareComponentToken","_a","resizeSpinnerSize"],"mappings":"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","sourcesContent":["import { resetComponent } from '../../style';\nimport { genStyleHooks } from '../../theme/internal';\nconst genRtlStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [`&-rtl${componentCls}-horizontal`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: 0,\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: 'unset',\n          insetInlineStart: 0\n        }\n      }\n    },\n    [`&-rtl${componentCls}-vertical`]: {\n      [`> ${componentCls}-bar`]: {\n        [`${componentCls}-bar-collapse-previous`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        },\n        [`${componentCls}-bar-collapse-next`]: {\n          insetInlineEnd: '50%',\n          insetInlineStart: 'unset'\n        }\n      }\n    }\n  };\n};\nconst centerStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: {\n    _skip_check_: true,\n    value: '50%'\n  },\n  transform: 'translate(-50%, -50%)'\n};\nconst genSplitterStyle = token => {\n  const {\n    componentCls,\n    colorFill,\n    splitBarDraggableSize,\n    splitBarSize,\n    splitTriggerSize,\n    controlItemBgHover,\n    controlItemBgActive,\n    controlItemBgActiveHover,\n    prefixCls\n  } = token;\n  const splitBarCls = `${componentCls}-bar`;\n  const splitMaskCls = `${componentCls}-mask`;\n  const splitPanelCls = `${componentCls}-panel`;\n  const halfTriggerSize = token.calc(splitTriggerSize).div(2).equal();\n  const splitterBarPreviewOffsetVar = `${prefixCls}-bar-preview-offset`;\n  const splitterBarPreviewStyle = {\n    position: 'absolute',\n    background: token.colorPrimary,\n    opacity: 0.2,\n    pointerEvents: 'none',\n    transition: 'none',\n    zIndex: 1,\n    display: 'none'\n  };\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      width: '100%',\n      height: '100%',\n      alignItems: 'stretch',\n      // ======================== SplitBar ========================\n      // Use `>` to avoid conflict with mix layout\n      [`> ${splitBarCls}`]: {\n        flex: 'none',\n        position: 'relative',\n        userSelect: 'none',\n        // ======================= Dragger =======================\n        [`${splitBarCls}-dragger`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: 1,\n          // Hover background\n          '&::before': Object.assign({\n            content: '\"\"',\n            background: controlItemBgHover\n          }, centerStyle),\n          // Spinner\n          '&::after': Object.assign({\n            content: '\"\"',\n            background: colorFill\n          }, centerStyle),\n          // Hover\n          [`&:hover:not(${splitBarCls}-dragger-active)`]: {\n            '&::before': {\n              background: controlItemBgActive\n            }\n          },\n          // Active\n          '&-active': {\n            zIndex: 2,\n            '&::before': {\n              background: controlItemBgActiveHover\n            }\n          },\n          // Disabled, not use `pointer-events: none` since still need trigger collapse\n          [`&-disabled${splitBarCls}-dragger`]: {\n            zIndex: 0,\n            '&, &:hover, &-active': {\n              cursor: 'default',\n              '&::before': {\n                background: controlItemBgHover\n              }\n            },\n            '&::after': {\n              display: 'none'\n            }\n          }\n        }),\n        // ======================= Collapse =======================\n        [`${splitBarCls}-collapse-bar`]: Object.assign(Object.assign({}, centerStyle), {\n          zIndex: token.zIndexPopupBase,\n          background: controlItemBgHover,\n          fontSize: token.fontSizeSM,\n          borderRadius: token.borderRadiusXS,\n          color: token.colorText,\n          cursor: 'pointer',\n          opacity: 0,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          '@media(hover:none)': {\n            opacity: 1\n          },\n          // Hover\n          '&:hover': {\n            background: controlItemBgActive\n          },\n          // Active\n          '&:active': {\n            background: controlItemBgActiveHover\n          }\n        }),\n        // ======================== Status ========================\n        // Hover\n        '&:hover, &:active': {\n          [`${splitBarCls}-collapse-bar`]: {\n            opacity: 1\n          }\n        }\n      },\n      // =========================== Mask =========================\n      // Util dom for handle cursor\n      [splitMaskCls]: {\n        position: 'fixed',\n        zIndex: token.zIndexPopupBase,\n        inset: 0,\n        '&-horizontal': {\n          cursor: 'col-resize'\n        },\n        '&-vertical': {\n          cursor: 'row-resize'\n        }\n      },\n      // ==========================================================\n      // ==                        Layout                        ==\n      // ==========================================================\n      '&-horizontal': {\n        flexDirection: 'row',\n        [`> ${splitBarCls}`]: {\n          width: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: '100%',\n            width: splitBarSize\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateX(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'col-resize',\n            height: '100%',\n            width: splitTriggerSize,\n            '&::before': {\n              height: '100%',\n              width: splitBarSize\n            },\n            '&::after': {\n              height: splitBarDraggableSize,\n              width: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            width: token.fontSizeSM,\n            height: token.controlHeightSM,\n            '&-start': {\n              left: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              right: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              transform: 'translateY(-50%)'\n            },\n            '&-end': {\n              left: {\n                _skip_check_: true,\n                value: halfTriggerSize\n              },\n              right: {\n                _skip_check_: true,\n                value: 'auto'\n              },\n              transform: 'translateY(-50%)'\n            }\n          }\n        }\n      },\n      '&-vertical': {\n        flexDirection: 'column',\n        [`> ${splitBarCls}`]: {\n          height: 0,\n          // ======================= Preview =======================\n          [`${splitBarCls}-preview`]: Object.assign(Object.assign({\n            height: splitBarSize,\n            width: '100%'\n          }, splitterBarPreviewStyle), {\n            [`&${splitBarCls}-preview-active`]: {\n              display: 'block',\n              transform: `translateY(var(--${splitterBarPreviewOffsetVar}))`\n            }\n          }),\n          // ======================= Dragger =======================\n          [`${splitBarCls}-dragger`]: {\n            cursor: 'row-resize',\n            width: '100%',\n            height: splitTriggerSize,\n            '&::before': {\n              width: '100%',\n              height: splitBarSize\n            },\n            '&::after': {\n              width: splitBarDraggableSize,\n              height: splitBarSize\n            }\n          },\n          // ======================= Collapse =======================\n          [`${splitBarCls}-collapse-bar`]: {\n            height: token.fontSizeSM,\n            width: token.controlHeightSM,\n            '&-start': {\n              top: 'auto',\n              bottom: halfTriggerSize,\n              transform: 'translateX(-50%)'\n            },\n            '&-end': {\n              top: halfTriggerSize,\n              bottom: 'auto',\n              transform: 'translateX(-50%)'\n            }\n          }\n        }\n      },\n      // ========================= Panels =========================\n      [splitPanelCls]: {\n        overflow: 'auto',\n        padding: '0 1px',\n        scrollbarWidth: 'thin',\n        boxSizing: 'border-box',\n        '&-hidden': {\n          padding: 0,\n          overflow: 'hidden'\n        },\n        [`&:has(${componentCls}:only-child)`]: {\n          overflow: 'hidden'\n        }\n      }\n    }), genRtlStyle(token))\n  };\n};\nexport const prepareComponentToken = token => {\n  var _a;\n  const splitBarSize = token.splitBarSize || 2;\n  const splitTriggerSize = token.splitTriggerSize || 6;\n  // https://github.com/ant-design/ant-design/pull/51223\n  const resizeSpinnerSize = token.resizeSpinnerSize || 20;\n  const splitBarDraggableSize = (_a = token.splitBarDraggableSize) !== null && _a !== void 0 ? _a : resizeSpinnerSize;\n  return {\n    splitBarSize,\n    splitTriggerSize,\n    splitBarDraggableSize,\n    resizeSpinnerSize\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks('Splitter', token => [genSplitterStyle(token)], prepareComponentToken);"]},"metadata":{},"sourceType":"module"}