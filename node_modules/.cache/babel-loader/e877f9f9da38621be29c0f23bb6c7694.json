{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nconst viewSize = 100;\nconst borderWidth = viewSize / 5;\nconst radius = viewSize / 2 - borderWidth / 2;\nconst circumference = radius * 2 * Math.PI;\nconst position = 50;\n\nconst CustomCircle = props => {\n  const {\n    dotClassName,\n    style,\n    hasCircleCls\n  } = props;\n  return /*#__PURE__*/React.createElement(\"circle\", {\n    className: classNames(`${dotClassName}-circle`, {\n      [`${dotClassName}-circle-bg`]: hasCircleCls\n    }),\n    r: radius,\n    cx: position,\n    cy: position,\n    strokeWidth: borderWidth,\n    style: style\n  });\n};\n\nconst Progress = _ref => {\n  let {\n    percent,\n    prefixCls\n  } = _ref;\n  const dotClassName = `${prefixCls}-dot`;\n  const holderClassName = `${dotClassName}-holder`;\n  const hideClassName = `${holderClassName}-hidden`;\n  const [render, setRender] = React.useState(false); // ==================== Visible =====================\n\n  useLayoutEffect(() => {\n    if (percent !== 0) {\n      setRender(true);\n    }\n  }, [percent !== 0]); // ==================== Progress ====================\n\n  const safePtg = Math.max(Math.min(percent, 100), 0); // ===================== Render =====================\n\n  if (!render) {\n    return null;\n  }\n\n  const circleStyle = {\n    strokeDashoffset: `${circumference / 4}`,\n    strokeDasharray: `${circumference * safePtg / 100} ${circumference * (100 - safePtg) / 100}`\n  };\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(holderClassName, `${dotClassName}-progress`, safePtg <= 0 && hideClassName)\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: `0 0 ${viewSize} ${viewSize}`,\n    // biome-ignore lint/a11y/noNoninteractiveElementToInteractiveRole: progressbar could be readonly\n    role: \"progressbar\",\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    \"aria-valuenow\": safePtg\n  }, /*#__PURE__*/React.createElement(CustomCircle, {\n    dotClassName: dotClassName,\n    hasCircleCls: true\n  }), /*#__PURE__*/React.createElement(CustomCircle, {\n    dotClassName: dotClassName,\n    style: circleStyle\n  })));\n};\n\nexport default Progress;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/spin/Indicator/Progress.js"],"names":["React","classNames","useLayoutEffect","viewSize","borderWidth","radius","circumference","Math","PI","position","CustomCircle","props","dotClassName","style","hasCircleCls","createElement","className","r","cx","cy","strokeWidth","Progress","_ref","percent","prefixCls","holderClassName","hideClassName","render","setRender","useState","safePtg","max","min","circleStyle","strokeDashoffset","strokeDasharray","viewBox","role"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nconst viewSize = 100;\nconst borderWidth = viewSize / 5;\nconst radius = viewSize / 2 - borderWidth / 2;\nconst circumference = radius * 2 * Math.PI;\nconst position = 50;\nconst CustomCircle = props => {\n  const {\n    dotClassName,\n    style,\n    hasCircleCls\n  } = props;\n  return /*#__PURE__*/React.createElement(\"circle\", {\n    className: classNames(`${dotClassName}-circle`, {\n      [`${dotClassName}-circle-bg`]: hasCircleCls\n    }),\n    r: radius,\n    cx: position,\n    cy: position,\n    strokeWidth: borderWidth,\n    style: style\n  });\n};\nconst Progress = _ref => {\n  let {\n    percent,\n    prefixCls\n  } = _ref;\n  const dotClassName = `${prefixCls}-dot`;\n  const holderClassName = `${dotClassName}-holder`;\n  const hideClassName = `${holderClassName}-hidden`;\n  const [render, setRender] = React.useState(false);\n  // ==================== Visible =====================\n  useLayoutEffect(() => {\n    if (percent !== 0) {\n      setRender(true);\n    }\n  }, [percent !== 0]);\n  // ==================== Progress ====================\n  const safePtg = Math.max(Math.min(percent, 100), 0);\n  // ===================== Render =====================\n  if (!render) {\n    return null;\n  }\n  const circleStyle = {\n    strokeDashoffset: `${circumference / 4}`,\n    strokeDasharray: `${circumference * safePtg / 100} ${circumference * (100 - safePtg) / 100}`\n  };\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(holderClassName, `${dotClassName}-progress`, safePtg <= 0 && hideClassName)\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: `0 0 ${viewSize} ${viewSize}`,\n    // biome-ignore lint/a11y/noNoninteractiveElementToInteractiveRole: progressbar could be readonly\n    role: \"progressbar\",\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    \"aria-valuenow\": safePtg\n  }, /*#__PURE__*/React.createElement(CustomCircle, {\n    dotClassName: dotClassName,\n    hasCircleCls: true\n  }), /*#__PURE__*/React.createElement(CustomCircle, {\n    dotClassName: dotClassName,\n    style: circleStyle\n  })));\n};\nexport default Progress;"]},"metadata":{},"sourceType":"module"}