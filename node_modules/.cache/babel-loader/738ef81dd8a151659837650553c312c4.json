{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\nimport { cloneElement, isFragment } from '../_util/reactNode';\nimport { PresetColors } from '../theme/interface';\nconst rxTwoCNChar = /^[\\u4E00-\\u9FA5]{2}$/;\nexport const isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\nexport function convertLegacyProps(type) {\n  if (type === 'danger') {\n    return {\n      danger: true\n    };\n  }\n\n  return {\n    type\n  };\n}\nexport function isString(str) {\n  return typeof str === 'string';\n}\nexport function isUnBorderedButtonVariant(type) {\n  return type === 'text' || type === 'link';\n}\n\nfunction splitCNCharsBySpace(child, needInserted) {\n  if (child === null || child === undefined) {\n    return;\n  }\n\n  const SPACE = needInserted ? ' ' : '';\n\n  if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {\n    return cloneElement(child, {\n      children: child.props.children.split('').join(SPACE)\n    });\n  }\n\n  if (isString(child)) {\n    return isTwoCNChar(child) ? /*#__PURE__*/React.createElement(\"span\", null, child.split('').join(SPACE)) : /*#__PURE__*/React.createElement(\"span\", null, child);\n  }\n\n  if (isFragment(child)) {\n    return /*#__PURE__*/React.createElement(\"span\", null, child);\n  }\n\n  return child;\n}\n\nexport function spaceChildren(children, needInserted) {\n  let isPrevChildPure = false;\n  const childList = [];\n  React.Children.forEach(children, child => {\n    const type = typeof child;\n    const isCurrentChildPure = type === 'string' || type === 'number';\n\n    if (isPrevChildPure && isCurrentChildPure) {\n      const lastIndex = childList.length - 1;\n      const lastChild = childList[lastIndex];\n      childList[lastIndex] = `${lastChild}${child}`;\n    } else {\n      childList.push(child);\n    }\n\n    isPrevChildPure = isCurrentChildPure;\n  });\n  return React.Children.map(childList, child => splitCNCharsBySpace(child, needInserted));\n}\nconst _ButtonTypes = ['default', 'primary', 'dashed', 'link', 'text'];\nconst _ButtonShapes = ['default', 'circle', 'round'];\nconst _ButtonHTMLTypes = ['submit', 'button', 'reset'];\nexport const _ButtonVariantTypes = ['outlined', 'dashed', 'solid', 'filled', 'text', 'link'];\nexport const _ButtonColorTypes = ['default', 'primary', 'danger'].concat(_toConsumableArray(PresetColors));","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/button/buttonHelpers.js"],"names":["_toConsumableArray","React","cloneElement","isFragment","PresetColors","rxTwoCNChar","isTwoCNChar","test","bind","convertLegacyProps","type","danger","isString","str","isUnBorderedButtonVariant","splitCNCharsBySpace","child","needInserted","undefined","SPACE","props","children","split","join","createElement","spaceChildren","isPrevChildPure","childList","Children","forEach","isCurrentChildPure","lastIndex","length","lastChild","push","map","_ButtonTypes","_ButtonShapes","_ButtonHTMLTypes","_ButtonVariantTypes","_ButtonColorTypes","concat"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\nimport { cloneElement, isFragment } from '../_util/reactNode';\nimport { PresetColors } from '../theme/interface';\nconst rxTwoCNChar = /^[\\u4E00-\\u9FA5]{2}$/;\nexport const isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\nexport function convertLegacyProps(type) {\n  if (type === 'danger') {\n    return {\n      danger: true\n    };\n  }\n  return {\n    type\n  };\n}\nexport function isString(str) {\n  return typeof str === 'string';\n}\nexport function isUnBorderedButtonVariant(type) {\n  return type === 'text' || type === 'link';\n}\nfunction splitCNCharsBySpace(child, needInserted) {\n  if (child === null || child === undefined) {\n    return;\n  }\n  const SPACE = needInserted ? ' ' : '';\n  if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {\n    return cloneElement(child, {\n      children: child.props.children.split('').join(SPACE)\n    });\n  }\n  if (isString(child)) {\n    return isTwoCNChar(child) ? /*#__PURE__*/React.createElement(\"span\", null, child.split('').join(SPACE)) : /*#__PURE__*/React.createElement(\"span\", null, child);\n  }\n  if (isFragment(child)) {\n    return /*#__PURE__*/React.createElement(\"span\", null, child);\n  }\n  return child;\n}\nexport function spaceChildren(children, needInserted) {\n  let isPrevChildPure = false;\n  const childList = [];\n  React.Children.forEach(children, child => {\n    const type = typeof child;\n    const isCurrentChildPure = type === 'string' || type === 'number';\n    if (isPrevChildPure && isCurrentChildPure) {\n      const lastIndex = childList.length - 1;\n      const lastChild = childList[lastIndex];\n      childList[lastIndex] = `${lastChild}${child}`;\n    } else {\n      childList.push(child);\n    }\n    isPrevChildPure = isCurrentChildPure;\n  });\n  return React.Children.map(childList, child => splitCNCharsBySpace(child, needInserted));\n}\nconst _ButtonTypes = ['default', 'primary', 'dashed', 'link', 'text'];\nconst _ButtonShapes = ['default', 'circle', 'round'];\nconst _ButtonHTMLTypes = ['submit', 'button', 'reset'];\nexport const _ButtonVariantTypes = ['outlined', 'dashed', 'solid', 'filled', 'text', 'link'];\nexport const _ButtonColorTypes = ['default', 'primary', 'danger'].concat(_toConsumableArray(PresetColors));"]},"metadata":{},"sourceType":"module"}