{"ast":null,"code":"import { isValidElement, useMemo } from 'react';\n\nconst useTooltipProps = (tooltip, editConfigText, children) => useMemo(() => {\n  if (tooltip === true) {\n    return {\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    };\n  }\n\n  if ( /*#__PURE__*/isValidElement(tooltip)) {\n    return {\n      title: tooltip\n    };\n  }\n\n  if (typeof tooltip === 'object') {\n    return Object.assign({\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    }, tooltip);\n  }\n\n  return {\n    title: tooltip\n  };\n}, [tooltip, editConfigText, children]);\n\nexport default useTooltipProps;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/typography/hooks/useTooltipProps.js"],"names":["isValidElement","useMemo","useTooltipProps","tooltip","editConfigText","children","title","Object","assign"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,OAAxC;;AACA,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuCJ,OAAO,CAAC,MAAM;AAC3E,MAAIE,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO;AACLG,MAAAA,KAAK,EAAEF,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuDA,cAAvD,GAAwEC;AAD1E,KAAP;AAGD;;AACD,OAAI,aAAaL,cAAc,CAACG,OAAD,CAA/B,EAA0C;AACxC,WAAO;AACLG,MAAAA,KAAK,EAAEH;AADF,KAAP;AAGD;;AACD,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAOI,MAAM,CAACC,MAAP,CAAc;AACnBF,MAAAA,KAAK,EAAEF,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuDA,cAAvD,GAAwEC;AAD5D,KAAd,EAEJF,OAFI,CAAP;AAGD;;AACD,SAAO;AACLG,IAAAA,KAAK,EAAEH;AADF,GAAP;AAGD,CAnBqE,EAmBnE,CAACA,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,CAnBmE,CAAtE;;AAoBA,eAAeH,eAAf","sourcesContent":["import { isValidElement, useMemo } from 'react';\nconst useTooltipProps = (tooltip, editConfigText, children) => useMemo(() => {\n  if (tooltip === true) {\n    return {\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    };\n  }\n  if (/*#__PURE__*/isValidElement(tooltip)) {\n    return {\n      title: tooltip\n    };\n  }\n  if (typeof tooltip === 'object') {\n    return Object.assign({\n      title: editConfigText !== null && editConfigText !== void 0 ? editConfigText : children\n    }, tooltip);\n  }\n  return {\n    title: tooltip\n  };\n}, [tooltip, editConfigText, children]);\nexport default useTooltipProps;"]},"metadata":{},"sourceType":"module"}