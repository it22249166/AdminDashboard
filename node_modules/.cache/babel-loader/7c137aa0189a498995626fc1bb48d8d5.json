{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport classNames from 'classnames';\nimport RcUpload from 'rc-upload';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport useStyle from './style';\nimport UploadList from './UploadList';\nimport { file2Obj, getFileItem, removeFileItem, updateFileList } from './utils';\nexport const LIST_IGNORE = `__LIST_IGNORE_${Date.now()}__`;\n\nconst InternalUpload = (props, ref) => {\n  const {\n    fileList,\n    defaultFileList,\n    onRemove,\n    showUploadList = true,\n    listType = 'text',\n    onPreview,\n    onDownload,\n    onChange,\n    onDrop,\n    previewFile,\n    disabled: customDisabled,\n    locale: propLocale,\n    iconRender,\n    isImageUrl,\n    progress,\n    prefixCls: customizePrefixCls,\n    className,\n    type = 'select',\n    children,\n    style,\n    itemRender,\n    maxCount,\n    data = {},\n    multiple = false,\n    hasControlInside = true,\n    action = '',\n    accept = '',\n    supportServerRender = true,\n    rootClassName\n  } = props; // ===================== Disabled =====================\n\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  const [mergedFileList, setMergedFileList] = useMergedState(defaultFileList || [], {\n    value: fileList,\n    postState: list => list !== null && list !== void 0 ? list : []\n  });\n  const [dragState, setDragState] = React.useState('drop');\n  const upload = React.useRef(null);\n  const wrapRef = React.useRef(null);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Upload');\n    process.env.NODE_ENV !== \"production\" ? warning('fileList' in props || !('value' in props), 'usage', '`value` is not a valid prop, do you mean `fileList`?') : void 0;\n    warning.deprecated(!('transformFile' in props), 'transformFile', 'beforeUpload');\n  } // Control mode will auto fill file uid if not provided\n\n\n  React.useMemo(() => {\n    const timestamp = Date.now();\n    (fileList || []).forEach((file, index) => {\n      if (!file.uid && !Object.isFrozen(file)) {\n        file.uid = `__AUTO__${timestamp}_${index}__`;\n      }\n    });\n  }, [fileList]);\n\n  const onInternalChange = (file, changedFileList, event) => {\n    let cloneList = _toConsumableArray(changedFileList);\n\n    let exceedMaxCount = false; // Cut to match count\n\n    if (maxCount === 1) {\n      cloneList = cloneList.slice(-1);\n    } else if (maxCount) {\n      exceedMaxCount = cloneList.length > maxCount;\n      cloneList = cloneList.slice(0, maxCount);\n    } // Prevent React18 auto batch since input[upload] trigger process at same time\n    // which makes fileList closure problem\n    // eslint-disable-next-line react-dom/no-flush-sync\n\n\n    flushSync(() => {\n      setMergedFileList(cloneList);\n    });\n    const changeInfo = {\n      file: file,\n      fileList: cloneList\n    };\n\n    if (event) {\n      changeInfo.event = event;\n    }\n\n    if (!exceedMaxCount || file.status === 'removed' || // We should ignore event if current file is exceed `maxCount`\n    cloneList.some(f => f.uid === file.uid)) {\n      // eslint-disable-next-line react-dom/no-flush-sync\n      flushSync(() => {\n        onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);\n      });\n    }\n  };\n\n  const mergedBeforeUpload = (file, fileListArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const {\n      beforeUpload,\n      transformFile\n    } = props;\n    let parsedFile = file;\n\n    if (beforeUpload) {\n      const result = yield beforeUpload(file, fileListArgs);\n\n      if (result === false) {\n        return false;\n      } // Hack for LIST_IGNORE, we add additional info to remove from the list\n\n\n      delete file[LIST_IGNORE];\n\n      if (result === LIST_IGNORE) {\n        Object.defineProperty(file, LIST_IGNORE, {\n          value: true,\n          configurable: true\n        });\n        return false;\n      }\n\n      if (typeof result === 'object' && result) {\n        parsedFile = result;\n      }\n    }\n\n    if (transformFile) {\n      parsedFile = yield transformFile(parsedFile);\n    }\n\n    return parsedFile;\n  });\n\n  const onBatchStart = batchFileInfoList => {\n    // Skip file which marked as `LIST_IGNORE`, these file will not add to file list\n    const filteredFileInfoList = batchFileInfoList.filter(info => !info.file[LIST_IGNORE]); // Nothing to do since no file need upload\n\n    if (!filteredFileInfoList.length) {\n      return;\n    }\n\n    const objectFileList = filteredFileInfoList.map(info => file2Obj(info.file)); // Concat new files with prev files\n\n    let newFileList = _toConsumableArray(mergedFileList);\n\n    objectFileList.forEach(fileObj => {\n      // Replace file if exist\n      newFileList = updateFileList(fileObj, newFileList);\n    });\n    objectFileList.forEach((fileObj, index) => {\n      // Repeat trigger `onChange` event for compatible\n      let triggerFileObj = fileObj;\n\n      if (!filteredFileInfoList[index].parsedFile) {\n        // `beforeUpload` return false\n        const {\n          originFileObj\n        } = fileObj;\n        let clone;\n\n        try {\n          clone = new File([originFileObj], originFileObj.name, {\n            type: originFileObj.type\n          });\n        } catch (_a) {\n          clone = new Blob([originFileObj], {\n            type: originFileObj.type\n          });\n          clone.name = originFileObj.name;\n          clone.lastModifiedDate = new Date();\n          clone.lastModified = new Date().getTime();\n        }\n\n        clone.uid = fileObj.uid;\n        triggerFileObj = clone;\n      } else {\n        // Inject `uploading` status\n        fileObj.status = 'uploading';\n      }\n\n      onInternalChange(triggerFileObj, newFileList);\n    });\n  };\n\n  const onSuccess = (response, file, xhr) => {\n    try {\n      if (typeof response === 'string') {\n        // biome-ignore lint/style/noParameterAssign: we need to modify response\n        response = JSON.parse(response);\n      }\n    } catch (_a) {\n      /* do nothing */\n    } // removed\n\n\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.status = 'done';\n    targetItem.percent = 100;\n    targetItem.response = response;\n    targetItem.xhr = xhr;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  const onProgress = (e, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.status = 'uploading';\n    targetItem.percent = e.percent;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList, e);\n  };\n\n  const onError = (error, response, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.error = error;\n    targetItem.response = response;\n    targetItem.status = 'error';\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  const handleRemove = file => {\n    let currentFile;\n    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n      var _a; // Prevent removing file\n\n\n      if (ret === false) {\n        return;\n      }\n\n      const removedFileList = removeFileItem(file, mergedFileList);\n\n      if (removedFileList) {\n        currentFile = Object.assign(Object.assign({}, file), {\n          status: 'removed'\n        });\n        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(item => {\n          const matchKey = currentFile.uid !== undefined ? 'uid' : 'name';\n\n          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {\n            item.status = 'removed';\n          }\n        });\n        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);\n        onInternalChange(currentFile, removedFileList);\n      }\n    });\n  };\n\n  const onFileDrop = e => {\n    setDragState(e.type);\n\n    if (e.type === 'drop') {\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);\n    }\n  }; // Test needs\n\n\n  React.useImperativeHandle(ref, () => ({\n    onBatchStart,\n    onSuccess,\n    onProgress,\n    onError,\n    fileList: mergedFileList,\n    upload: upload.current,\n    nativeElement: wrapRef.current\n  }));\n  const {\n    getPrefixCls,\n    direction,\n    upload: ctxUpload\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('upload', customizePrefixCls);\n  const rcUploadProps = Object.assign(Object.assign({\n    onBatchStart,\n    onError,\n    onProgress,\n    onSuccess\n  }, props), {\n    data,\n    multiple,\n    action,\n    accept,\n    supportServerRender,\n    prefixCls,\n    disabled: mergedDisabled,\n    beforeUpload: mergedBeforeUpload,\n    onChange: undefined,\n    hasControlInside\n  });\n  delete rcUploadProps.className;\n  delete rcUploadProps.style; // Remove id to avoid open by label when trigger is hidden\n  // !children: https://github.com/ant-design/ant-design/issues/14298\n  // disabled: https://github.com/ant-design/ant-design/issues/16478\n  //           https://github.com/ant-design/ant-design/issues/24197\n\n  if (!children || mergedDisabled) {\n    delete rcUploadProps.id;\n  }\n\n  const wrapperCls = `${prefixCls}-wrapper`;\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, wrapperCls);\n  const [contextLocale] = useLocale('Upload', defaultLocale.Upload);\n  const {\n    showRemoveIcon,\n    showPreviewIcon,\n    showDownloadIcon,\n    removeIcon,\n    previewIcon,\n    downloadIcon,\n    extra\n  } = typeof showUploadList === 'boolean' ? {} : showUploadList; // use showRemoveIcon if it is specified explicitly\n\n  const realShowRemoveIcon = typeof showRemoveIcon === 'undefined' ? !mergedDisabled : showRemoveIcon;\n\n  const renderUploadList = (button, buttonVisible) => {\n    if (!showUploadList) {\n      return button;\n    }\n\n    return /*#__PURE__*/React.createElement(UploadList, {\n      prefixCls: prefixCls,\n      listType: listType,\n      items: mergedFileList,\n      previewFile: previewFile,\n      onPreview: onPreview,\n      onDownload: onDownload,\n      onRemove: handleRemove,\n      showRemoveIcon: realShowRemoveIcon,\n      showPreviewIcon: showPreviewIcon,\n      showDownloadIcon: showDownloadIcon,\n      removeIcon: removeIcon,\n      previewIcon: previewIcon,\n      downloadIcon: downloadIcon,\n      iconRender: iconRender,\n      extra: extra,\n      locale: Object.assign(Object.assign({}, contextLocale), propLocale),\n      isImageUrl: isImageUrl,\n      progress: progress,\n      appendAction: button,\n      appendActionVisible: buttonVisible,\n      itemRender: itemRender,\n      disabled: mergedDisabled\n    });\n  };\n\n  const mergedCls = classNames(wrapperCls, className, rootClassName, hashId, cssVarCls, ctxUpload === null || ctxUpload === void 0 ? void 0 : ctxUpload.className, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-picture-card-wrapper`]: listType === 'picture-card',\n    [`${prefixCls}-picture-circle-wrapper`]: listType === 'picture-circle'\n  });\n  const mergedStyle = Object.assign(Object.assign({}, ctxUpload === null || ctxUpload === void 0 ? void 0 : ctxUpload.style), style); // ======================== Render ========================\n\n  if (type === 'drag') {\n    const dragCls = classNames(hashId, prefixCls, `${prefixCls}-drag`, {\n      [`${prefixCls}-drag-uploading`]: mergedFileList.some(file => file.status === 'uploading'),\n      [`${prefixCls}-drag-hover`]: dragState === 'dragover',\n      [`${prefixCls}-disabled`]: mergedDisabled,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    });\n    return wrapCSSVar( /*#__PURE__*/React.createElement(\"span\", {\n      className: mergedCls,\n      ref: wrapRef\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: dragCls,\n      style: mergedStyle,\n      onDrop: onFileDrop,\n      onDragOver: onFileDrop,\n      onDragLeave: onFileDrop\n    }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n      ref: upload,\n      className: `${prefixCls}-btn`\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-drag-container`\n    }, children))), renderUploadList()));\n  }\n\n  const uploadBtnCls = classNames(prefixCls, `${prefixCls}-select`, {\n    [`${prefixCls}-disabled`]: mergedDisabled,\n    [`${prefixCls}-hidden`]: !children\n  });\n  const uploadButton = /*#__PURE__*/React.createElement(\"div\", {\n    className: uploadBtnCls\n  }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n    ref: upload\n  })));\n\n  if (listType === 'picture-card' || listType === 'picture-circle') {\n    return wrapCSSVar( /*#__PURE__*/React.createElement(\"span\", {\n      className: mergedCls,\n      ref: wrapRef\n    }, renderUploadList(uploadButton, !!children)));\n  }\n\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"span\", {\n    className: mergedCls,\n    ref: wrapRef\n  }, uploadButton, renderUploadList()));\n};\n\nconst Upload = /*#__PURE__*/React.forwardRef(InternalUpload);\n\nif (process.env.NODE_ENV !== 'production') {\n  Upload.displayName = 'Upload';\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/upload/Upload.js"],"names":["_toConsumableArray","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","React","flushSync","classNames","RcUpload","useMergedState","devUseWarning","ConfigContext","DisabledContext","useLocale","defaultLocale","useStyle","UploadList","file2Obj","getFileItem","removeFileItem","updateFileList","LIST_IGNORE","Date","now","InternalUpload","props","ref","fileList","defaultFileList","onRemove","showUploadList","listType","onPreview","onDownload","onChange","onDrop","previewFile","disabled","customDisabled","locale","propLocale","iconRender","isImageUrl","progress","prefixCls","customizePrefixCls","className","type","children","style","itemRender","maxCount","data","multiple","hasControlInside","action","accept","supportServerRender","rootClassName","useContext","mergedDisabled","mergedFileList","setMergedFileList","postState","list","dragState","setDragState","useState","upload","useRef","wrapRef","process","env","NODE_ENV","warning","deprecated","useMemo","timestamp","forEach","file","index","uid","Object","isFrozen","onInternalChange","changedFileList","event","cloneList","exceedMaxCount","slice","length","changeInfo","status","some","f","mergedBeforeUpload","fileListArgs","beforeUpload","transformFile","parsedFile","defineProperty","configurable","onBatchStart","batchFileInfoList","filteredFileInfoList","filter","info","objectFileList","map","newFileList","fileObj","triggerFileObj","originFileObj","clone","File","name","_a","Blob","lastModifiedDate","lastModified","getTime","onSuccess","response","xhr","JSON","parse","targetItem","percent","nextFileList","onProgress","onError","error","handleRemove","currentFile","ret","removedFileList","assign","item","matchKey","undefined","current","abort","onFileDrop","useImperativeHandle","nativeElement","getPrefixCls","direction","ctxUpload","rcUploadProps","id","wrapperCls","wrapCSSVar","hashId","cssVarCls","contextLocale","Upload","showRemoveIcon","showPreviewIcon","showDownloadIcon","removeIcon","previewIcon","downloadIcon","extra","realShowRemoveIcon","renderUploadList","button","buttonVisible","createElement","items","appendAction","appendActionVisible","mergedCls","mergedStyle","dragCls","onDragOver","onDragLeave","uploadBtnCls","uploadButton","forwardRef","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport classNames from 'classnames';\nimport RcUpload from 'rc-upload';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nimport useStyle from './style';\nimport UploadList from './UploadList';\nimport { file2Obj, getFileItem, removeFileItem, updateFileList } from './utils';\nexport const LIST_IGNORE = `__LIST_IGNORE_${Date.now()}__`;\nconst InternalUpload = (props, ref) => {\n  const {\n    fileList,\n    defaultFileList,\n    onRemove,\n    showUploadList = true,\n    listType = 'text',\n    onPreview,\n    onDownload,\n    onChange,\n    onDrop,\n    previewFile,\n    disabled: customDisabled,\n    locale: propLocale,\n    iconRender,\n    isImageUrl,\n    progress,\n    prefixCls: customizePrefixCls,\n    className,\n    type = 'select',\n    children,\n    style,\n    itemRender,\n    maxCount,\n    data = {},\n    multiple = false,\n    hasControlInside = true,\n    action = '',\n    accept = '',\n    supportServerRender = true,\n    rootClassName\n  } = props;\n  // ===================== Disabled =====================\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  const [mergedFileList, setMergedFileList] = useMergedState(defaultFileList || [], {\n    value: fileList,\n    postState: list => list !== null && list !== void 0 ? list : []\n  });\n  const [dragState, setDragState] = React.useState('drop');\n  const upload = React.useRef(null);\n  const wrapRef = React.useRef(null);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Upload');\n    process.env.NODE_ENV !== \"production\" ? warning('fileList' in props || !('value' in props), 'usage', '`value` is not a valid prop, do you mean `fileList`?') : void 0;\n    warning.deprecated(!('transformFile' in props), 'transformFile', 'beforeUpload');\n  }\n  // Control mode will auto fill file uid if not provided\n  React.useMemo(() => {\n    const timestamp = Date.now();\n    (fileList || []).forEach((file, index) => {\n      if (!file.uid && !Object.isFrozen(file)) {\n        file.uid = `__AUTO__${timestamp}_${index}__`;\n      }\n    });\n  }, [fileList]);\n  const onInternalChange = (file, changedFileList, event) => {\n    let cloneList = _toConsumableArray(changedFileList);\n    let exceedMaxCount = false;\n    // Cut to match count\n    if (maxCount === 1) {\n      cloneList = cloneList.slice(-1);\n    } else if (maxCount) {\n      exceedMaxCount = cloneList.length > maxCount;\n      cloneList = cloneList.slice(0, maxCount);\n    }\n    // Prevent React18 auto batch since input[upload] trigger process at same time\n    // which makes fileList closure problem\n    // eslint-disable-next-line react-dom/no-flush-sync\n    flushSync(() => {\n      setMergedFileList(cloneList);\n    });\n    const changeInfo = {\n      file: file,\n      fileList: cloneList\n    };\n    if (event) {\n      changeInfo.event = event;\n    }\n    if (!exceedMaxCount || file.status === 'removed' ||\n    // We should ignore event if current file is exceed `maxCount`\n    cloneList.some(f => f.uid === file.uid)) {\n      // eslint-disable-next-line react-dom/no-flush-sync\n      flushSync(() => {\n        onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);\n      });\n    }\n  };\n  const mergedBeforeUpload = (file, fileListArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const {\n      beforeUpload,\n      transformFile\n    } = props;\n    let parsedFile = file;\n    if (beforeUpload) {\n      const result = yield beforeUpload(file, fileListArgs);\n      if (result === false) {\n        return false;\n      }\n      // Hack for LIST_IGNORE, we add additional info to remove from the list\n      delete file[LIST_IGNORE];\n      if (result === LIST_IGNORE) {\n        Object.defineProperty(file, LIST_IGNORE, {\n          value: true,\n          configurable: true\n        });\n        return false;\n      }\n      if (typeof result === 'object' && result) {\n        parsedFile = result;\n      }\n    }\n    if (transformFile) {\n      parsedFile = yield transformFile(parsedFile);\n    }\n    return parsedFile;\n  });\n  const onBatchStart = batchFileInfoList => {\n    // Skip file which marked as `LIST_IGNORE`, these file will not add to file list\n    const filteredFileInfoList = batchFileInfoList.filter(info => !info.file[LIST_IGNORE]);\n    // Nothing to do since no file need upload\n    if (!filteredFileInfoList.length) {\n      return;\n    }\n    const objectFileList = filteredFileInfoList.map(info => file2Obj(info.file));\n    // Concat new files with prev files\n    let newFileList = _toConsumableArray(mergedFileList);\n    objectFileList.forEach(fileObj => {\n      // Replace file if exist\n      newFileList = updateFileList(fileObj, newFileList);\n    });\n    objectFileList.forEach((fileObj, index) => {\n      // Repeat trigger `onChange` event for compatible\n      let triggerFileObj = fileObj;\n      if (!filteredFileInfoList[index].parsedFile) {\n        // `beforeUpload` return false\n        const {\n          originFileObj\n        } = fileObj;\n        let clone;\n        try {\n          clone = new File([originFileObj], originFileObj.name, {\n            type: originFileObj.type\n          });\n        } catch (_a) {\n          clone = new Blob([originFileObj], {\n            type: originFileObj.type\n          });\n          clone.name = originFileObj.name;\n          clone.lastModifiedDate = new Date();\n          clone.lastModified = new Date().getTime();\n        }\n        clone.uid = fileObj.uid;\n        triggerFileObj = clone;\n      } else {\n        // Inject `uploading` status\n        fileObj.status = 'uploading';\n      }\n      onInternalChange(triggerFileObj, newFileList);\n    });\n  };\n  const onSuccess = (response, file, xhr) => {\n    try {\n      if (typeof response === 'string') {\n        // biome-ignore lint/style/noParameterAssign: we need to modify response\n        response = JSON.parse(response);\n      }\n    } catch (_a) {\n      /* do nothing */\n    }\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.status = 'done';\n    targetItem.percent = 100;\n    targetItem.response = response;\n    targetItem.xhr = xhr;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n  const onProgress = (e, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.status = 'uploading';\n    targetItem.percent = e.percent;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList, e);\n  };\n  const onError = (error, response, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.error = error;\n    targetItem.response = response;\n    targetItem.status = 'error';\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n  const handleRemove = file => {\n    let currentFile;\n    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n      var _a;\n      // Prevent removing file\n      if (ret === false) {\n        return;\n      }\n      const removedFileList = removeFileItem(file, mergedFileList);\n      if (removedFileList) {\n        currentFile = Object.assign(Object.assign({}, file), {\n          status: 'removed'\n        });\n        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(item => {\n          const matchKey = currentFile.uid !== undefined ? 'uid' : 'name';\n          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {\n            item.status = 'removed';\n          }\n        });\n        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);\n        onInternalChange(currentFile, removedFileList);\n      }\n    });\n  };\n  const onFileDrop = e => {\n    setDragState(e.type);\n    if (e.type === 'drop') {\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);\n    }\n  };\n  // Test needs\n  React.useImperativeHandle(ref, () => ({\n    onBatchStart,\n    onSuccess,\n    onProgress,\n    onError,\n    fileList: mergedFileList,\n    upload: upload.current,\n    nativeElement: wrapRef.current\n  }));\n  const {\n    getPrefixCls,\n    direction,\n    upload: ctxUpload\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('upload', customizePrefixCls);\n  const rcUploadProps = Object.assign(Object.assign({\n    onBatchStart,\n    onError,\n    onProgress,\n    onSuccess\n  }, props), {\n    data,\n    multiple,\n    action,\n    accept,\n    supportServerRender,\n    prefixCls,\n    disabled: mergedDisabled,\n    beforeUpload: mergedBeforeUpload,\n    onChange: undefined,\n    hasControlInside\n  });\n  delete rcUploadProps.className;\n  delete rcUploadProps.style;\n  // Remove id to avoid open by label when trigger is hidden\n  // !children: https://github.com/ant-design/ant-design/issues/14298\n  // disabled: https://github.com/ant-design/ant-design/issues/16478\n  //           https://github.com/ant-design/ant-design/issues/24197\n  if (!children || mergedDisabled) {\n    delete rcUploadProps.id;\n  }\n  const wrapperCls = `${prefixCls}-wrapper`;\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, wrapperCls);\n  const [contextLocale] = useLocale('Upload', defaultLocale.Upload);\n  const {\n    showRemoveIcon,\n    showPreviewIcon,\n    showDownloadIcon,\n    removeIcon,\n    previewIcon,\n    downloadIcon,\n    extra\n  } = typeof showUploadList === 'boolean' ? {} : showUploadList;\n  // use showRemoveIcon if it is specified explicitly\n  const realShowRemoveIcon = typeof showRemoveIcon === 'undefined' ? !mergedDisabled : showRemoveIcon;\n  const renderUploadList = (button, buttonVisible) => {\n    if (!showUploadList) {\n      return button;\n    }\n    return /*#__PURE__*/React.createElement(UploadList, {\n      prefixCls: prefixCls,\n      listType: listType,\n      items: mergedFileList,\n      previewFile: previewFile,\n      onPreview: onPreview,\n      onDownload: onDownload,\n      onRemove: handleRemove,\n      showRemoveIcon: realShowRemoveIcon,\n      showPreviewIcon: showPreviewIcon,\n      showDownloadIcon: showDownloadIcon,\n      removeIcon: removeIcon,\n      previewIcon: previewIcon,\n      downloadIcon: downloadIcon,\n      iconRender: iconRender,\n      extra: extra,\n      locale: Object.assign(Object.assign({}, contextLocale), propLocale),\n      isImageUrl: isImageUrl,\n      progress: progress,\n      appendAction: button,\n      appendActionVisible: buttonVisible,\n      itemRender: itemRender,\n      disabled: mergedDisabled\n    });\n  };\n  const mergedCls = classNames(wrapperCls, className, rootClassName, hashId, cssVarCls, ctxUpload === null || ctxUpload === void 0 ? void 0 : ctxUpload.className, {\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-picture-card-wrapper`]: listType === 'picture-card',\n    [`${prefixCls}-picture-circle-wrapper`]: listType === 'picture-circle'\n  });\n  const mergedStyle = Object.assign(Object.assign({}, ctxUpload === null || ctxUpload === void 0 ? void 0 : ctxUpload.style), style);\n  // ======================== Render ========================\n  if (type === 'drag') {\n    const dragCls = classNames(hashId, prefixCls, `${prefixCls}-drag`, {\n      [`${prefixCls}-drag-uploading`]: mergedFileList.some(file => file.status === 'uploading'),\n      [`${prefixCls}-drag-hover`]: dragState === 'dragover',\n      [`${prefixCls}-disabled`]: mergedDisabled,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    });\n    return wrapCSSVar(/*#__PURE__*/React.createElement(\"span\", {\n      className: mergedCls,\n      ref: wrapRef\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: dragCls,\n      style: mergedStyle,\n      onDrop: onFileDrop,\n      onDragOver: onFileDrop,\n      onDragLeave: onFileDrop\n    }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n      ref: upload,\n      className: `${prefixCls}-btn`\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-drag-container`\n    }, children))), renderUploadList()));\n  }\n  const uploadBtnCls = classNames(prefixCls, `${prefixCls}-select`, {\n    [`${prefixCls}-disabled`]: mergedDisabled,\n    [`${prefixCls}-hidden`]: !children\n  });\n  const uploadButton = /*#__PURE__*/React.createElement(\"div\", {\n    className: uploadBtnCls\n  }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n    ref: upload\n  })));\n  if (listType === 'picture-card' || listType === 'picture-circle') {\n    return wrapCSSVar(/*#__PURE__*/React.createElement(\"span\", {\n      className: mergedCls,\n      ref: wrapRef\n    }, renderUploadList(uploadButton, !!children)));\n  }\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"span\", {\n    className: mergedCls,\n    ref: wrapRef\n  }, uploadButton, renderUploadList()));\n};\nconst Upload = /*#__PURE__*/React.forwardRef(InternalUpload);\nif (process.env.NODE_ENV !== 'production') {\n  Upload.displayName = 'Upload';\n}\nexport default Upload;"]},"metadata":{},"sourceType":"module"}