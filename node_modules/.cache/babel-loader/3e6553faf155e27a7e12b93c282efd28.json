{"ast":null,"code":"import React from 'react';\nimport toList from '../_util/toList';\nexport const FontGap = 3;\n\nconst prepareCanvas = function (width, height) {\n  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute('width', `${realWidth}px`);\n  canvas.setAttribute('height', `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}; // Get boundary of rotated text\n\n\nconst getRotatePos = (x, y, angle) => {\n  const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n  const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n  return [targetX, targetY];\n};\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\n\n\nconst useClips = () => {\n  // Get single clips\n  const getClips = (content, rotate, ratio, width, height, font, gapX, gapY) => {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = 'top';\n      const contents = toList(content);\n      contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item !== null && item !== void 0 ? item : '', contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    } // ==================== Rotate ====================\n\n\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio); // Copy from `ctx` and rotate\n\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(_ref => {\n      let [x, y] = _ref;\n      const [targetX, targetY] = getRotatePos(x, y, angle);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top; // ================ Fill Alternate ================\n\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n\n    const drawImg = function () {\n      let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    };\n\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  };\n\n  return React.useCallback(getClips, []);\n};\n\nexport default useClips;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/watermark/useClips.js"],"names":["React","toList","FontGap","prepareCanvas","width","height","ratio","arguments","length","undefined","canvas","document","createElement","ctx","getContext","realWidth","realHeight","setAttribute","save","getRotatePos","x","y","angle","targetX","Math","cos","sin","targetY","useClips","getClips","content","rotate","font","gapX","gapY","contentWidth","contentHeight","HTMLImageElement","drawImage","color","fontSize","fontStyle","fontWeight","fontFamily","textAlign","mergedFontSize","Number","fillStyle","textBaseline","contents","forEach","item","index","fillText","PI","maxSize","max","rCtx","rCanvas","realMaxSize","translate","left","right","top","bottom","halfWidth","halfHeight","points","_ref","min","cutLeft","cutTop","cutWidth","cutHeight","realGapX","realGapY","filledWidth","filledHeight","fCtx","fCanvas","drawImg","toDataURL","useCallback"],"mappings":"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","sourcesContent":["import React from 'react';\nimport toList from '../_util/toList';\nexport const FontGap = 3;\nconst prepareCanvas = function (width, height) {\n  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute('width', `${realWidth}px`);\n  canvas.setAttribute('height', `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n};\n// Get boundary of rotated text\nconst getRotatePos = (x, y, angle) => {\n  const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n  const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n  return [targetX, targetY];\n};\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\nconst useClips = () => {\n  // Get single clips\n  const getClips = (content, rotate, ratio, width, height, font, gapX, gapY) => {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = 'top';\n      const contents = toList(content);\n      contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item !== null && item !== void 0 ? item : '', contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    // ==================== Rotate ====================\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    // Copy from `ctx` and rotate\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(_ref => {\n      let [x, y] = _ref;\n      const [targetX, targetY] = getRotatePos(x, y, angle);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    // ================ Fill Alternate ================\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    const drawImg = function () {\n      let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    };\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  };\n  return React.useCallback(getClips, []);\n};\nexport default useClips;"]},"metadata":{},"sourceType":"module"}