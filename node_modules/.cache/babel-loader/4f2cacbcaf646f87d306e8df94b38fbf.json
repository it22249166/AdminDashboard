{"ast":null,"code":"import { generate as generateColor } from '@ant-design/colors';\nimport { updateCSS } from \"@rc-component/util/es/Dom/dynamicCSS\";\nimport { getShadowRoot } from \"@rc-component/util/es/Dom/shadow\";\nimport warn from \"@rc-component/util/es/warning\";\nimport React, { useContext, useEffect } from 'react';\nimport IconContext from \"./components/Context\";\n\nfunction camelCase(input) {\n  return input.replace(/-(.)/g, (match, g) => g.toUpperCase());\n}\n\nexport function warning(valid, message) {\n  warn(valid, `[@ant-design/icons] ${message}`);\n}\nexport function isIconDefinition(target) {\n  return typeof target === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (typeof target.icon === 'object' || typeof target.icon === 'function');\n}\nexport function normalizeAttrs(attrs = {}) {\n  return Object.keys(attrs).reduce((acc, key) => {\n    const val = attrs[key];\n\n    switch (key) {\n      case 'class':\n        acc.className = val;\n        delete acc.class;\n        break;\n\n      default:\n        delete acc[key];\n        acc[camelCase(key)] = val;\n    }\n\n    return acc;\n  }, {});\n}\nexport function generate(node, key, rootProps) {\n  if (!rootProps) {\n    return /*#__PURE__*/React.createElement(node.tag, {\n      key,\n      ...normalizeAttrs(node.attrs)\n    }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n  }\n\n  return /*#__PURE__*/React.createElement(node.tag, {\n    key,\n    ...normalizeAttrs(node.attrs),\n    ...rootProps\n  }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n}\nexport function getSecondaryColor(primaryColor) {\n  // choose the second color\n  return generateColor(primaryColor)[0];\n}\nexport function normalizeTwoToneColors(twoToneColor) {\n  if (!twoToneColor) {\n    return [];\n  }\n\n  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];\n} // These props make sure that the SVG behaviours like general text.\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\n\nexport const svgBaseProps = {\n  width: '1em',\n  height: '1em',\n  fill: 'currentColor',\n  'aria-hidden': 'true',\n  focusable: 'false'\n};\nexport const iconStyles = `\n.anticon {\n  display: inline-flex;\n  align-items: center;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\nexport const useInsertStyles = eleRef => {\n  const {\n    csp,\n    prefixCls,\n    layer\n  } = useContext(IconContext);\n  let mergedStyleStr = iconStyles;\n\n  if (prefixCls) {\n    mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);\n  }\n\n  if (layer) {\n    mergedStyleStr = `@layer ${layer} {\\n${mergedStyleStr}\\n}`;\n  }\n\n  useEffect(() => {\n    const ele = eleRef.current;\n    const shadowRoot = getShadowRoot(ele);\n    updateCSS(mergedStyleStr, '@ant-design-icons', {\n      prepend: !layer,\n      csp,\n      attachTo: shadowRoot\n    });\n  }, []);\n};","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@ant-design/icons/es/utils.js"],"names":["generate","generateColor","updateCSS","getShadowRoot","warn","React","useContext","useEffect","IconContext","camelCase","input","replace","match","g","toUpperCase","warning","valid","message","isIconDefinition","target","name","theme","icon","normalizeAttrs","attrs","Object","keys","reduce","acc","key","val","className","class","node","rootProps","createElement","tag","children","map","child","index","getSecondaryColor","primaryColor","normalizeTwoToneColors","twoToneColor","Array","isArray","svgBaseProps","width","height","fill","focusable","iconStyles","useInsertStyles","eleRef","csp","prefixCls","layer","mergedStyleStr","ele","current","shadowRoot","prepend","attachTo"],"mappings":"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","sourcesContent":["import { generate as generateColor } from '@ant-design/colors';\nimport { updateCSS } from \"@rc-component/util/es/Dom/dynamicCSS\";\nimport { getShadowRoot } from \"@rc-component/util/es/Dom/shadow\";\nimport warn from \"@rc-component/util/es/warning\";\nimport React, { useContext, useEffect } from 'react';\nimport IconContext from \"./components/Context\";\nfunction camelCase(input) {\n  return input.replace(/-(.)/g, (match, g) => g.toUpperCase());\n}\nexport function warning(valid, message) {\n  warn(valid, `[@ant-design/icons] ${message}`);\n}\nexport function isIconDefinition(target) {\n  return typeof target === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (typeof target.icon === 'object' || typeof target.icon === 'function');\n}\nexport function normalizeAttrs(attrs = {}) {\n  return Object.keys(attrs).reduce((acc, key) => {\n    const val = attrs[key];\n    switch (key) {\n      case 'class':\n        acc.className = val;\n        delete acc.class;\n        break;\n      default:\n        delete acc[key];\n        acc[camelCase(key)] = val;\n    }\n    return acc;\n  }, {});\n}\nexport function generate(node, key, rootProps) {\n  if (!rootProps) {\n    return /*#__PURE__*/React.createElement(node.tag, {\n      key,\n      ...normalizeAttrs(node.attrs)\n    }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n  }\n  return /*#__PURE__*/React.createElement(node.tag, {\n    key,\n    ...normalizeAttrs(node.attrs),\n    ...rootProps\n  }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n}\nexport function getSecondaryColor(primaryColor) {\n  // choose the second color\n  return generateColor(primaryColor)[0];\n}\nexport function normalizeTwoToneColors(twoToneColor) {\n  if (!twoToneColor) {\n    return [];\n  }\n  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];\n}\n\n// These props make sure that the SVG behaviours like general text.\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\nexport const svgBaseProps = {\n  width: '1em',\n  height: '1em',\n  fill: 'currentColor',\n  'aria-hidden': 'true',\n  focusable: 'false'\n};\nexport const iconStyles = `\n.anticon {\n  display: inline-flex;\n  align-items: center;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\nexport const useInsertStyles = eleRef => {\n  const {\n    csp,\n    prefixCls,\n    layer\n  } = useContext(IconContext);\n  let mergedStyleStr = iconStyles;\n  if (prefixCls) {\n    mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);\n  }\n  if (layer) {\n    mergedStyleStr = `@layer ${layer} {\\n${mergedStyleStr}\\n}`;\n  }\n  useEffect(() => {\n    const ele = eleRef.current;\n    const shadowRoot = getShadowRoot(ele);\n    updateCSS(mergedStyleStr, '@ant-design-icons', {\n      prepend: !layer,\n      csp,\n      attachTo: shadowRoot\n    });\n  }, []);\n};"]},"metadata":{},"sourceType":"module"}