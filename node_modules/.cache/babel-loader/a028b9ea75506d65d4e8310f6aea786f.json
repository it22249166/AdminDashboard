{"ast":null,"code":"import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genCollapseMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genDirectoryStyle } from './directory'; // ============================ Keyframes =============================\n\nconst treeNodeFX = new Keyframes('ant-tree-node-fx-do-not-use', {\n  '0%': {\n    opacity: 0\n  },\n  '100%': {\n    opacity: 1\n  }\n}); // ============================== Switch ==============================\n\nconst getSwitchStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-switcher-icon`]: {\n    display: 'inline-block',\n    fontSize: 10,\n    verticalAlign: 'baseline',\n    svg: {\n      transition: `transform ${token.motionDurationSlow}`\n    }\n  }\n}); // =============================== Drop ===============================\n\n\nconst getDropIndicatorStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-drop-indicator`]: {\n    position: 'absolute',\n    // it should displayed over the following node\n    zIndex: 1,\n    height: 2,\n    backgroundColor: token.colorPrimary,\n    borderRadius: 1,\n    pointerEvents: 'none',\n    '&:after': {\n      position: 'absolute',\n      top: -3,\n      insetInlineStart: -6,\n      width: 8,\n      height: 8,\n      backgroundColor: 'transparent',\n      border: `${unit(token.lineWidthBold)} solid ${token.colorPrimary}`,\n      borderRadius: '50%',\n      content: '\"\"'\n    }\n  }\n});\n\nexport const genBaseStyle = (prefixCls, token) => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    titleHeight,\n    indentSize,\n    nodeSelectedBg,\n    nodeHoverBg,\n    colorTextQuaternary,\n    controlItemBgActiveDisabled\n  } = token;\n  return {\n    [treeCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      background: token.colorBgContainer,\n      borderRadius: token.borderRadius,\n      transition: `background-color ${token.motionDurationSlow}`,\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [`&${treeCls}-rtl ${treeCls}-switcher_close ${treeCls}-switcher-icon svg`]: {\n        transform: 'rotate(90deg)'\n      },\n      [`&-focused:not(:hover):not(${treeCls}-active-focused)`]: Object.assign({}, genFocusOutline(token)),\n      // =================== Virtual List ===================\n      [`${treeCls}-list-holder-inner`]: {\n        alignItems: 'flex-start'\n      },\n      [`&${treeCls}-block-node`]: {\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            flex: 'auto'\n          },\n          // >>> Drag\n          [`${treeNodeCls}.dragging:after`]: {\n            position: 'absolute',\n            inset: 0,\n            border: `1px solid ${token.colorPrimary}`,\n            opacity: 0,\n            animationName: treeNodeFX,\n            animationDuration: token.motionDurationSlow,\n            animationPlayState: 'running',\n            animationFillMode: 'forwards',\n            content: '\"\"',\n            pointerEvents: 'none',\n            borderRadius: token.borderRadius\n          }\n        }\n      },\n      // ===================== TreeNode =====================\n      [treeNodeCls]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        marginBottom: treeNodePadding,\n        lineHeight: unit(titleHeight),\n        position: 'relative',\n        // 非常重要，避免 drop-indicator 在拖拽过程中闪烁\n        '&:before': {\n          content: '\"\"',\n          position: 'absolute',\n          zIndex: 1,\n          insetInlineStart: 0,\n          width: '100%',\n          top: '100%',\n          height: treeNodePadding\n        },\n        // Disabled\n        [`&-disabled ${treeCls}-node-content-wrapper`]: {\n          color: token.colorTextDisabled,\n          cursor: 'not-allowed',\n          '&:hover': {\n            background: 'transparent'\n          }\n        },\n        [`${treeCls}-checkbox-disabled + ${treeCls}-node-selected,&${treeNodeCls}-disabled${treeNodeCls}-selected ${treeCls}-node-content-wrapper`]: {\n          backgroundColor: controlItemBgActiveDisabled\n        },\n        // we can not set pointer-events to none for checkbox in tree\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-2605234058\n        [`${treeCls}-checkbox-disabled`]: {\n          pointerEvents: 'unset'\n        },\n        // not disable\n        [`&:not(${treeNodeCls}-disabled)`]: {\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            '&:hover': {\n              color: token.nodeHoverColor\n            }\n          }\n        },\n        [`&-active ${treeCls}-node-content-wrapper`]: {\n          background: token.controlItemBgHover\n        },\n        [`&:not(${treeNodeCls}-disabled).filter-node ${treeCls}-title`]: {\n          color: token.colorPrimary,\n          fontWeight: 500\n        },\n        '&-draggable': {\n          cursor: 'grab',\n          [`${treeCls}-draggable-icon`]: {\n            // https://github.com/ant-design/ant-design/issues/41915\n            flexShrink: 0,\n            width: titleHeight,\n            textAlign: 'center',\n            visibility: 'visible',\n            color: colorTextQuaternary\n          },\n          [`&${treeNodeCls}-disabled ${treeCls}-draggable-icon`]: {\n            visibility: 'hidden'\n          }\n        }\n      },\n      // >>> Indent\n      [`${treeCls}-indent`]: {\n        alignSelf: 'stretch',\n        whiteSpace: 'nowrap',\n        userSelect: 'none',\n        '&-unit': {\n          display: 'inline-block',\n          width: indentSize\n        }\n      },\n      // >>> Drag Handler\n      [`${treeCls}-draggable-icon`]: {\n        visibility: 'hidden'\n      },\n      // Switcher / Checkbox\n      [`${treeCls}-switcher, ${treeCls}-checkbox`]: {\n        marginInlineEnd: token.calc(token.calc(titleHeight).sub(token.controlInteractiveSize)).div(2).equal()\n      },\n      // >>> Switcher\n      [`${treeCls}-switcher`]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token)), {\n        position: 'relative',\n        flex: 'none',\n        alignSelf: 'stretch',\n        width: titleHeight,\n        textAlign: 'center',\n        cursor: 'pointer',\n        userSelect: 'none',\n        transition: `all ${token.motionDurationSlow}`,\n        '&-noop': {\n          cursor: 'unset'\n        },\n        '&:before': {\n          pointerEvents: 'none',\n          content: '\"\"',\n          width: titleHeight,\n          height: titleHeight,\n          position: 'absolute',\n          left: {\n            _skip_check_: true,\n            value: 0\n          },\n          top: 0,\n          borderRadius: token.borderRadius,\n          transition: `all ${token.motionDurationSlow}`\n        },\n        [`&:not(${treeCls}-switcher-noop):hover:before`]: {\n          backgroundColor: token.colorBgTextHover\n        },\n        [`&_close ${treeCls}-switcher-icon svg`]: {\n          transform: 'rotate(-90deg)'\n        },\n        '&-loading-icon': {\n          color: token.colorPrimary\n        },\n        '&-leaf-line': {\n          position: 'relative',\n          zIndex: 1,\n          display: 'inline-block',\n          width: '100%',\n          height: '100%',\n          // https://github.com/ant-design/ant-design/issues/31884\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            marginInlineStart: -1,\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&:after': {\n            position: 'absolute',\n            width: token.calc(token.calc(titleHeight).div(2).equal()).mul(0.8).equal(),\n            height: token.calc(titleHeight).div(2).equal(),\n            borderBottom: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          }\n        }\n      }),\n      // >>> Title\n      // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`\n      [`${treeCls}-node-content-wrapper`]: Object.assign(Object.assign({\n        position: 'relative',\n        minHeight: titleHeight,\n        paddingBlock: 0,\n        paddingInline: token.paddingXS,\n        background: 'transparent',\n        borderRadius: token.borderRadius,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s`\n      }, getDropIndicatorStyle(prefixCls, token)), {\n        '&:hover': {\n          backgroundColor: nodeHoverBg\n        },\n        [`&${treeCls}-node-selected`]: {\n          color: token.nodeSelectedColor,\n          backgroundColor: nodeSelectedBg\n        },\n        // Icon\n        [`${treeCls}-iconEle`]: {\n          display: 'inline-block',\n          width: titleHeight,\n          height: titleHeight,\n          textAlign: 'center',\n          verticalAlign: 'top',\n          '&:empty': {\n            display: 'none'\n          }\n        }\n      }),\n      // https://github.com/ant-design/ant-design/issues/28217\n      [`${treeCls}-unselectable ${treeCls}-node-content-wrapper:hover`]: {\n        backgroundColor: 'transparent'\n      },\n      [`${treeNodeCls}.drop-container > [draggable]`]: {\n        boxShadow: `0 0 0 2px ${token.colorPrimary}`\n      },\n      // ==================== Show Line =====================\n      '&-show-line': {\n        // ================ Indent lines ================\n        [`${treeCls}-indent-unit`]: {\n          position: 'relative',\n          height: '100%',\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&-end:before': {\n            display: 'none'\n          }\n        },\n        // ============== Cover Background ==============\n        [`${treeCls}-switcher`]: {\n          background: 'transparent',\n          '&-line-icon': {\n            // https://github.com/ant-design/ant-design/issues/32813\n            verticalAlign: '-0.15em'\n          }\n        }\n      },\n      [`${treeNodeCls}-leaf-last ${treeCls}-switcher-leaf-line:before`]: {\n        top: 'auto !important',\n        bottom: 'auto !important',\n        height: `${unit(token.calc(titleHeight).div(2).equal())} !important`\n      }\n    })\n  };\n}; // ============================== Merged ==============================\n\nexport const genTreeStyle = function (prefixCls, token) {\n  let enableDirectory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const treeCls = `.${prefixCls}`;\n  const treeNodeCls = `${treeCls}-treenode`;\n  const treeNodePadding = token.calc(token.paddingXS).div(2).equal();\n  const treeToken = mergeToken(token, {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding\n  });\n  return [// Basic\n  genBaseStyle(prefixCls, treeToken), // Directory\n  enableDirectory && genDirectoryStyle(treeToken)].filter(Boolean);\n};\nexport const initComponentToken = token => {\n  const {\n    controlHeightSM,\n    controlItemBgHover,\n    controlItemBgActive\n  } = token;\n  const titleHeight = controlHeightSM;\n  return {\n    titleHeight,\n    indentSize: titleHeight,\n    nodeHoverBg: controlItemBgHover,\n    nodeHoverColor: token.colorText,\n    nodeSelectedBg: controlItemBgActive,\n    nodeSelectedColor: token.colorText\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    colorTextLightSolid,\n    colorPrimary\n  } = token;\n  return Object.assign(Object.assign({}, initComponentToken(token)), {\n    directoryNodeSelectedColor: colorTextLightSolid,\n    directoryNodeSelectedBg: colorPrimary\n  });\n};\nexport default genStyleHooks('Tree', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [{\n    [token.componentCls]: getCheckboxStyle(`${prefixCls}-checkbox`, token)\n  }, genTreeStyle(prefixCls, token), genCollapseMotion(token)];\n}, prepareComponentToken);","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/tree/style/index.js"],"names":["Keyframes","unit","getStyle","getCheckboxStyle","genFocusOutline","resetComponent","genCollapseMotion","genStyleHooks","mergeToken","genDirectoryStyle","treeNodeFX","opacity","getSwitchStyle","prefixCls","token","display","fontSize","verticalAlign","svg","transition","motionDurationSlow","getDropIndicatorStyle","position","zIndex","height","backgroundColor","colorPrimary","borderRadius","pointerEvents","top","insetInlineStart","width","border","lineWidthBold","content","genBaseStyle","treeCls","treeNodeCls","treeNodePadding","titleHeight","indentSize","nodeSelectedBg","nodeHoverBg","colorTextQuaternary","controlItemBgActiveDisabled","Object","assign","background","colorBgContainer","direction","transform","alignItems","flex","inset","animationName","animationDuration","animationPlayState","animationFillMode","marginBottom","lineHeight","color","colorTextDisabled","cursor","nodeHoverColor","controlItemBgHover","fontWeight","flexShrink","textAlign","visibility","alignSelf","whiteSpace","userSelect","marginInlineEnd","calc","sub","controlInteractiveSize","div","equal","left","_skip_check_","value","colorBgTextHover","insetInlineEnd","bottom","mul","marginInlineStart","borderInlineEnd","colorBorder","borderBottom","minHeight","paddingBlock","paddingInline","paddingXS","motionDurationMid","nodeSelectedColor","boxShadow","genTreeStyle","enableDirectory","arguments","length","undefined","treeToken","filter","Boolean","initComponentToken","controlHeightSM","controlItemBgActive","colorText","prepareComponentToken","colorTextLightSolid","directoryNodeSelectedColor","directoryNodeSelectedBg","_ref","componentCls"],"mappings":"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","sourcesContent":["import { Keyframes, unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genCollapseMotion } from '../../style/motion';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genDirectoryStyle } from './directory';\n// ============================ Keyframes =============================\nconst treeNodeFX = new Keyframes('ant-tree-node-fx-do-not-use', {\n  '0%': {\n    opacity: 0\n  },\n  '100%': {\n    opacity: 1\n  }\n});\n// ============================== Switch ==============================\nconst getSwitchStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-switcher-icon`]: {\n    display: 'inline-block',\n    fontSize: 10,\n    verticalAlign: 'baseline',\n    svg: {\n      transition: `transform ${token.motionDurationSlow}`\n    }\n  }\n});\n// =============================== Drop ===============================\nconst getDropIndicatorStyle = (prefixCls, token) => ({\n  [`.${prefixCls}-drop-indicator`]: {\n    position: 'absolute',\n    // it should displayed over the following node\n    zIndex: 1,\n    height: 2,\n    backgroundColor: token.colorPrimary,\n    borderRadius: 1,\n    pointerEvents: 'none',\n    '&:after': {\n      position: 'absolute',\n      top: -3,\n      insetInlineStart: -6,\n      width: 8,\n      height: 8,\n      backgroundColor: 'transparent',\n      border: `${unit(token.lineWidthBold)} solid ${token.colorPrimary}`,\n      borderRadius: '50%',\n      content: '\"\"'\n    }\n  }\n});\nexport const genBaseStyle = (prefixCls, token) => {\n  const {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding,\n    titleHeight,\n    indentSize,\n    nodeSelectedBg,\n    nodeHoverBg,\n    colorTextQuaternary,\n    controlItemBgActiveDisabled\n  } = token;\n  return {\n    [treeCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      background: token.colorBgContainer,\n      borderRadius: token.borderRadius,\n      transition: `background-color ${token.motionDurationSlow}`,\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      [`&${treeCls}-rtl ${treeCls}-switcher_close ${treeCls}-switcher-icon svg`]: {\n        transform: 'rotate(90deg)'\n      },\n      [`&-focused:not(:hover):not(${treeCls}-active-focused)`]: Object.assign({}, genFocusOutline(token)),\n      // =================== Virtual List ===================\n      [`${treeCls}-list-holder-inner`]: {\n        alignItems: 'flex-start'\n      },\n      [`&${treeCls}-block-node`]: {\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            flex: 'auto'\n          },\n          // >>> Drag\n          [`${treeNodeCls}.dragging:after`]: {\n            position: 'absolute',\n            inset: 0,\n            border: `1px solid ${token.colorPrimary}`,\n            opacity: 0,\n            animationName: treeNodeFX,\n            animationDuration: token.motionDurationSlow,\n            animationPlayState: 'running',\n            animationFillMode: 'forwards',\n            content: '\"\"',\n            pointerEvents: 'none',\n            borderRadius: token.borderRadius\n          }\n        }\n      },\n      // ===================== TreeNode =====================\n      [treeNodeCls]: {\n        display: 'flex',\n        alignItems: 'flex-start',\n        marginBottom: treeNodePadding,\n        lineHeight: unit(titleHeight),\n        position: 'relative',\n        // 非常重要，避免 drop-indicator 在拖拽过程中闪烁\n        '&:before': {\n          content: '\"\"',\n          position: 'absolute',\n          zIndex: 1,\n          insetInlineStart: 0,\n          width: '100%',\n          top: '100%',\n          height: treeNodePadding\n        },\n        // Disabled\n        [`&-disabled ${treeCls}-node-content-wrapper`]: {\n          color: token.colorTextDisabled,\n          cursor: 'not-allowed',\n          '&:hover': {\n            background: 'transparent'\n          }\n        },\n        [`${treeCls}-checkbox-disabled + ${treeCls}-node-selected,&${treeNodeCls}-disabled${treeNodeCls}-selected ${treeCls}-node-content-wrapper`]: {\n          backgroundColor: controlItemBgActiveDisabled\n        },\n        // we can not set pointer-events to none for checkbox in tree\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-2605234058\n        [`${treeCls}-checkbox-disabled`]: {\n          pointerEvents: 'unset'\n        },\n        // not disable\n        [`&:not(${treeNodeCls}-disabled)`]: {\n          // >>> Title\n          [`${treeCls}-node-content-wrapper`]: {\n            '&:hover': {\n              color: token.nodeHoverColor\n            }\n          }\n        },\n        [`&-active ${treeCls}-node-content-wrapper`]: {\n          background: token.controlItemBgHover\n        },\n        [`&:not(${treeNodeCls}-disabled).filter-node ${treeCls}-title`]: {\n          color: token.colorPrimary,\n          fontWeight: 500\n        },\n        '&-draggable': {\n          cursor: 'grab',\n          [`${treeCls}-draggable-icon`]: {\n            // https://github.com/ant-design/ant-design/issues/41915\n            flexShrink: 0,\n            width: titleHeight,\n            textAlign: 'center',\n            visibility: 'visible',\n            color: colorTextQuaternary\n          },\n          [`&${treeNodeCls}-disabled ${treeCls}-draggable-icon`]: {\n            visibility: 'hidden'\n          }\n        }\n      },\n      // >>> Indent\n      [`${treeCls}-indent`]: {\n        alignSelf: 'stretch',\n        whiteSpace: 'nowrap',\n        userSelect: 'none',\n        '&-unit': {\n          display: 'inline-block',\n          width: indentSize\n        }\n      },\n      // >>> Drag Handler\n      [`${treeCls}-draggable-icon`]: {\n        visibility: 'hidden'\n      },\n      // Switcher / Checkbox\n      [`${treeCls}-switcher, ${treeCls}-checkbox`]: {\n        marginInlineEnd: token.calc(token.calc(titleHeight).sub(token.controlInteractiveSize)).div(2).equal()\n      },\n      // >>> Switcher\n      [`${treeCls}-switcher`]: Object.assign(Object.assign({}, getSwitchStyle(prefixCls, token)), {\n        position: 'relative',\n        flex: 'none',\n        alignSelf: 'stretch',\n        width: titleHeight,\n        textAlign: 'center',\n        cursor: 'pointer',\n        userSelect: 'none',\n        transition: `all ${token.motionDurationSlow}`,\n        '&-noop': {\n          cursor: 'unset'\n        },\n        '&:before': {\n          pointerEvents: 'none',\n          content: '\"\"',\n          width: titleHeight,\n          height: titleHeight,\n          position: 'absolute',\n          left: {\n            _skip_check_: true,\n            value: 0\n          },\n          top: 0,\n          borderRadius: token.borderRadius,\n          transition: `all ${token.motionDurationSlow}`\n        },\n        [`&:not(${treeCls}-switcher-noop):hover:before`]: {\n          backgroundColor: token.colorBgTextHover\n        },\n        [`&_close ${treeCls}-switcher-icon svg`]: {\n          transform: 'rotate(-90deg)'\n        },\n        '&-loading-icon': {\n          color: token.colorPrimary\n        },\n        '&-leaf-line': {\n          position: 'relative',\n          zIndex: 1,\n          display: 'inline-block',\n          width: '100%',\n          height: '100%',\n          // https://github.com/ant-design/ant-design/issues/31884\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            marginInlineStart: -1,\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&:after': {\n            position: 'absolute',\n            width: token.calc(token.calc(titleHeight).div(2).equal()).mul(0.8).equal(),\n            height: token.calc(titleHeight).div(2).equal(),\n            borderBottom: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          }\n        }\n      }),\n      // >>> Title\n      // add `${treeCls}-checkbox + span` to cover checkbox `${checkboxCls} + span`\n      [`${treeCls}-node-content-wrapper`]: Object.assign(Object.assign({\n        position: 'relative',\n        minHeight: titleHeight,\n        paddingBlock: 0,\n        paddingInline: token.paddingXS,\n        background: 'transparent',\n        borderRadius: token.borderRadius,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s`\n      }, getDropIndicatorStyle(prefixCls, token)), {\n        '&:hover': {\n          backgroundColor: nodeHoverBg\n        },\n        [`&${treeCls}-node-selected`]: {\n          color: token.nodeSelectedColor,\n          backgroundColor: nodeSelectedBg\n        },\n        // Icon\n        [`${treeCls}-iconEle`]: {\n          display: 'inline-block',\n          width: titleHeight,\n          height: titleHeight,\n          textAlign: 'center',\n          verticalAlign: 'top',\n          '&:empty': {\n            display: 'none'\n          }\n        }\n      }),\n      // https://github.com/ant-design/ant-design/issues/28217\n      [`${treeCls}-unselectable ${treeCls}-node-content-wrapper:hover`]: {\n        backgroundColor: 'transparent'\n      },\n      [`${treeNodeCls}.drop-container > [draggable]`]: {\n        boxShadow: `0 0 0 2px ${token.colorPrimary}`\n      },\n      // ==================== Show Line =====================\n      '&-show-line': {\n        // ================ Indent lines ================\n        [`${treeCls}-indent-unit`]: {\n          position: 'relative',\n          height: '100%',\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            insetInlineEnd: token.calc(titleHeight).div(2).equal(),\n            bottom: token.calc(treeNodePadding).mul(-1).equal(),\n            borderInlineEnd: `1px solid ${token.colorBorder}`,\n            content: '\"\"'\n          },\n          '&-end:before': {\n            display: 'none'\n          }\n        },\n        // ============== Cover Background ==============\n        [`${treeCls}-switcher`]: {\n          background: 'transparent',\n          '&-line-icon': {\n            // https://github.com/ant-design/ant-design/issues/32813\n            verticalAlign: '-0.15em'\n          }\n        }\n      },\n      [`${treeNodeCls}-leaf-last ${treeCls}-switcher-leaf-line:before`]: {\n        top: 'auto !important',\n        bottom: 'auto !important',\n        height: `${unit(token.calc(titleHeight).div(2).equal())} !important`\n      }\n    })\n  };\n};\n// ============================== Merged ==============================\nexport const genTreeStyle = function (prefixCls, token) {\n  let enableDirectory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const treeCls = `.${prefixCls}`;\n  const treeNodeCls = `${treeCls}-treenode`;\n  const treeNodePadding = token.calc(token.paddingXS).div(2).equal();\n  const treeToken = mergeToken(token, {\n    treeCls,\n    treeNodeCls,\n    treeNodePadding\n  });\n  return [\n  // Basic\n  genBaseStyle(prefixCls, treeToken),\n  // Directory\n  enableDirectory && genDirectoryStyle(treeToken)].filter(Boolean);\n};\nexport const initComponentToken = token => {\n  const {\n    controlHeightSM,\n    controlItemBgHover,\n    controlItemBgActive\n  } = token;\n  const titleHeight = controlHeightSM;\n  return {\n    titleHeight,\n    indentSize: titleHeight,\n    nodeHoverBg: controlItemBgHover,\n    nodeHoverColor: token.colorText,\n    nodeSelectedBg: controlItemBgActive,\n    nodeSelectedColor: token.colorText\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    colorTextLightSolid,\n    colorPrimary\n  } = token;\n  return Object.assign(Object.assign({}, initComponentToken(token)), {\n    directoryNodeSelectedColor: colorTextLightSolid,\n    directoryNodeSelectedBg: colorPrimary\n  });\n};\nexport default genStyleHooks('Tree', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [{\n    [token.componentCls]: getCheckboxStyle(`${prefixCls}-checkbox`, token)\n  }, genTreeStyle(prefixCls, token), genCollapseMotion(token)];\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}