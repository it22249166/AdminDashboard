{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Icon from \"./Icon\";\nconst customCache = new Set();\n\nfunction isValidCustomScriptUrl(scriptUrl) {\n  return Boolean(typeof scriptUrl === 'string' && scriptUrl.length && !customCache.has(scriptUrl));\n}\n\nfunction createScriptUrlElements(scriptUrls, index = 0) {\n  const currentScriptUrl = scriptUrls[index];\n\n  if (isValidCustomScriptUrl(currentScriptUrl)) {\n    const script = document.createElement('script');\n    script.setAttribute('src', currentScriptUrl);\n    script.setAttribute('data-namespace', currentScriptUrl);\n\n    if (scriptUrls.length > index + 1) {\n      script.onload = () => {\n        createScriptUrlElements(scriptUrls, index + 1);\n      };\n\n      script.onerror = () => {\n        createScriptUrlElements(scriptUrls, index + 1);\n      };\n    }\n\n    customCache.add(currentScriptUrl);\n    document.body.appendChild(script);\n  }\n}\n\nexport default function create(options = {}) {\n  const {\n    scriptUrl,\n    extraCommonProps = {}\n  } = options;\n  /**\n   * DOM API required.\n   * Make sure in browser environment.\n   * The Custom Icon will create a <script/>\n   * that loads SVG symbols and insert the SVG Element into the document body.\n   */\n\n  if (scriptUrl && typeof document !== 'undefined' && typeof window !== 'undefined' && typeof document.createElement === 'function') {\n    if (Array.isArray(scriptUrl)) {\n      // 因为iconfont资源会把svg插入before，所以前加载相同type会覆盖后加载，为了数组覆盖顺序，倒叙插入\n      createScriptUrlElements(scriptUrl.reverse());\n    } else {\n      createScriptUrlElements([scriptUrl]);\n    }\n  }\n\n  const Iconfont = /*#__PURE__*/React.forwardRef((props, ref) => {\n    const {\n      type,\n      children,\n      ...restProps\n    } = props; // children > type\n\n    let content = null;\n\n    if (props.type) {\n      content = /*#__PURE__*/React.createElement(\"use\", {\n        xlinkHref: `#${type}`\n      });\n    }\n\n    if (children) {\n      content = children;\n    }\n\n    return /*#__PURE__*/React.createElement(Icon, _extends({}, extraCommonProps, restProps, {\n      ref: ref\n    }), content);\n  });\n  Iconfont.displayName = 'Iconfont';\n  return Iconfont;\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@ant-design/icons/es/components/IconFont.js"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","Icon","customCache","Set","isValidCustomScriptUrl","scriptUrl","Boolean","has","createScriptUrlElements","scriptUrls","index","currentScriptUrl","script","document","createElement","setAttribute","onload","onerror","add","body","appendChild","create","options","extraCommonProps","window","Array","isArray","reverse","Iconfont","forwardRef","props","ref","type","children","restProps","content","xlinkHref","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport Icon from \"./Icon\";\nconst customCache = new Set();\nfunction isValidCustomScriptUrl(scriptUrl) {\n  return Boolean(typeof scriptUrl === 'string' && scriptUrl.length && !customCache.has(scriptUrl));\n}\nfunction createScriptUrlElements(scriptUrls, index = 0) {\n  const currentScriptUrl = scriptUrls[index];\n  if (isValidCustomScriptUrl(currentScriptUrl)) {\n    const script = document.createElement('script');\n    script.setAttribute('src', currentScriptUrl);\n    script.setAttribute('data-namespace', currentScriptUrl);\n    if (scriptUrls.length > index + 1) {\n      script.onload = () => {\n        createScriptUrlElements(scriptUrls, index + 1);\n      };\n      script.onerror = () => {\n        createScriptUrlElements(scriptUrls, index + 1);\n      };\n    }\n    customCache.add(currentScriptUrl);\n    document.body.appendChild(script);\n  }\n}\nexport default function create(options = {}) {\n  const {\n    scriptUrl,\n    extraCommonProps = {}\n  } = options;\n\n  /**\n   * DOM API required.\n   * Make sure in browser environment.\n   * The Custom Icon will create a <script/>\n   * that loads SVG symbols and insert the SVG Element into the document body.\n   */\n  if (scriptUrl && typeof document !== 'undefined' && typeof window !== 'undefined' && typeof document.createElement === 'function') {\n    if (Array.isArray(scriptUrl)) {\n      // 因为iconfont资源会把svg插入before，所以前加载相同type会覆盖后加载，为了数组覆盖顺序，倒叙插入\n      createScriptUrlElements(scriptUrl.reverse());\n    } else {\n      createScriptUrlElements([scriptUrl]);\n    }\n  }\n  const Iconfont = /*#__PURE__*/React.forwardRef((props, ref) => {\n    const {\n      type,\n      children,\n      ...restProps\n    } = props;\n\n    // children > type\n    let content = null;\n    if (props.type) {\n      content = /*#__PURE__*/React.createElement(\"use\", {\n        xlinkHref: `#${type}`\n      });\n    }\n    if (children) {\n      content = children;\n    }\n    return /*#__PURE__*/React.createElement(Icon, _extends({}, extraCommonProps, restProps, {\n      ref: ref\n    }), content);\n  });\n  Iconfont.displayName = 'Iconfont';\n  return Iconfont;\n}"]},"metadata":{},"sourceType":"module"}