{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport { isValidText } from './util';\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\n\nconst getNodesLen = nodeList => nodeList.reduce((totalLen, node) => totalLen + (isValidText(node) ? String(node).length : 1), 0);\n\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    const node = nodeList[i];\n    const canCut = isValidText(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n} // Measure for the `text` is exceed the `rows` or not\n\n\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_PREPARE = 1;\nconst STATUS_MEASURE_START = 2;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 3;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 4;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  const {\n    enableMeasure,\n    width,\n    text,\n    children,\n    rows,\n    expanded,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]); // ========================= Full Content =========================\n  // Used for measure only, which means it's always render as no need ellipsis\n\n  const fullContent = React.useMemo(() => children(nodeList, false), [text]); // ========================= Cut Content ==========================\n\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null); // ========================= NeedEllipsis =========================\n\n  const measureWhiteSpaceRef = React.useRef(null);\n  const needEllipsisRef = React.useRef(null); // Measure for `rows-1` height, to avoid operation exceed the line height\n\n  const descRowsEllipsisRef = React.useRef(null);\n  const symbolRowEllipsisRef = React.useRef(null);\n  const [canEllipsis, setCanEllipsis] = React.useState(false);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  const [parentWhiteSpace, setParentWhiteSpace] = React.useState(null); // Trigger start measure\n\n  useLayoutEffect(() => {\n    if (enableMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_PREPARE);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enableMeasure, nodeList]); // Measure process\n\n  useLayoutEffect(() => {\n    var _a, _b, _c, _d;\n\n    if (needEllipsis === STATUS_MEASURE_PREPARE) {\n      setNeedEllipsis(STATUS_MEASURE_START); // Parent ref `white-space`\n\n      const nextWhiteSpace = measureWhiteSpaceRef.current && getComputedStyle(measureWhiteSpaceRef.current).whiteSpace;\n      setParentWhiteSpace(nextWhiteSpace);\n    } else if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      setCanEllipsis(isOverflow); // Get the basic height of ellipsis rows\n\n      const baseRowsEllipsisHeight = ((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0; // Get the height of `rows - 1` + symbol height\n\n      const descRowsEllipsisHeight = rows === 1 ? 0 : ((_c = descRowsEllipsisRef.current) === null || _c === void 0 ? void 0 : _c.getHeight()) || 0;\n      const symbolRowEllipsisHeight = ((_d = symbolRowEllipsisRef.current) === null || _d === void 0 ? void 0 : _d.getHeight()) || 0;\n      const maxRowsHeight = Math.max(baseRowsEllipsisHeight, // height of rows with ellipsis\n      descRowsEllipsisHeight + symbolRowEllipsisHeight);\n      setEllipsisHeight(maxRowsHeight + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]); // ========================= Cut Measure ==========================\n\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(() => {\n    var _a;\n\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n\n      setEllipsisCutIndex(isOverflow ? [minIndex, targetMidIndex] : [targetMidIndex, maxIndex]);\n    }\n  }, [ellipsisCutIndex, cutMidIndex]); // ========================= Text Content =========================\n\n  const finalContent = React.useMemo(() => {\n    // Skip everything if `enableMeasure` is disabled\n    if (!enableMeasure) {\n      return children(nodeList, false);\n    }\n\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false); // Limit the max line count to avoid scrollbar blink unless no need ellipsis\n      // https://github.com/ant-design/ant-design/issues/42958\n\n      if ([STATUS_MEASURE_NO_NEED_ELLIPSIS, STATUS_MEASURE_NONE].includes(needEllipsis)) {\n        return content;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: Object.assign(Object.assign({}, lineClipStyle), {\n          WebkitLineClamp: rows\n        })\n      }, content);\n    }\n\n    return children(expanded ? nodeList : sliceNodes(nodeList, ellipsisCutIndex[0]), canEllipsis);\n  }, [expanded, needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps))); // ============================ Render ============================\n\n  const measureStyle = {\n    width,\n    margin: 0,\n    padding: 0,\n    whiteSpace: parentWhiteSpace === 'nowrap' ? 'normal' : 'inherit'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows - 1\n    }),\n    ref: descRowsEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: 1\n    }),\n    ref: symbolRowEllipsisRef\n  }, children([], true))), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true)), needEllipsis === STATUS_MEASURE_PREPARE && /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'inherit'\n    },\n    ref: measureWhiteSpaceRef\n  }));\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/typography/Base/Ellipsis.js"],"names":["_toConsumableArray","React","toArray","useLayoutEffect","isValidText","MeasureText","forwardRef","_ref","ref","style","children","spanRef","useRef","useImperativeHandle","isExceed","span","current","scrollHeight","clientHeight","getHeight","createElement","Object","assign","position","display","left","top","pointerEvents","backgroundColor","getNodesLen","nodeList","reduce","totalLen","node","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","STATUS_MEASURE_NONE","STATUS_MEASURE_PREPARE","STATUS_MEASURE_START","STATUS_MEASURE_NEED_ELLIPSIS","STATUS_MEASURE_NO_NEED_ELLIPSIS","lineClipStyle","overflow","WebkitBoxOrient","EllipsisMeasure","props","enableMeasure","width","text","rows","expanded","miscDeps","onEllipsis","useMemo","fullContent","ellipsisCutIndex","setEllipsisCutIndex","useState","cutMidRef","measureWhiteSpaceRef","needEllipsisRef","descRowsEllipsisRef","symbolRowEllipsisRef","canEllipsis","setCanEllipsis","needEllipsis","setNeedEllipsis","ellipsisHeight","setEllipsisHeight","parentWhiteSpace","setParentWhiteSpace","_a","_b","_c","_d","nextWhiteSpace","getComputedStyle","whiteSpace","isOverflow","baseRowsEllipsisHeight","descRowsEllipsisHeight","symbolRowEllipsisHeight","maxRowsHeight","Math","max","cutMidIndex","ceil","minIndex","maxIndex","midHeight","targetMidIndex","finalContent","content","includes","WebkitLineClamp","concat","measureStyle","margin","padding","Fragment"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport { isValidText } from './util';\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nconst getNodesLen = nodeList => nodeList.reduce((totalLen, node) => totalLen + (isValidText(node) ? String(node).length : 1), 0);\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = isValidText(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_PREPARE = 1;\nconst STATUS_MEASURE_START = 2;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 3;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 4;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  const {\n    enableMeasure,\n    width,\n    text,\n    children,\n    rows,\n    expanded,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  // Used for measure only, which means it's always render as no need ellipsis\n  const fullContent = React.useMemo(() => children(nodeList, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const measureWhiteSpaceRef = React.useRef(null);\n  const needEllipsisRef = React.useRef(null);\n  // Measure for `rows-1` height, to avoid operation exceed the line height\n  const descRowsEllipsisRef = React.useRef(null);\n  const symbolRowEllipsisRef = React.useRef(null);\n  const [canEllipsis, setCanEllipsis] = React.useState(false);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  const [parentWhiteSpace, setParentWhiteSpace] = React.useState(null);\n  // Trigger start measure\n  useLayoutEffect(() => {\n    if (enableMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_PREPARE);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enableMeasure, nodeList]);\n  // Measure process\n  useLayoutEffect(() => {\n    var _a, _b, _c, _d;\n    if (needEllipsis === STATUS_MEASURE_PREPARE) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n      // Parent ref `white-space`\n      const nextWhiteSpace = measureWhiteSpaceRef.current && getComputedStyle(measureWhiteSpaceRef.current).whiteSpace;\n      setParentWhiteSpace(nextWhiteSpace);\n    } else if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      setCanEllipsis(isOverflow);\n      // Get the basic height of ellipsis rows\n      const baseRowsEllipsisHeight = ((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0;\n      // Get the height of `rows - 1` + symbol height\n      const descRowsEllipsisHeight = rows === 1 ? 0 : ((_c = descRowsEllipsisRef.current) === null || _c === void 0 ? void 0 : _c.getHeight()) || 0;\n      const symbolRowEllipsisHeight = ((_d = symbolRowEllipsisRef.current) === null || _d === void 0 ? void 0 : _d.getHeight()) || 0;\n      const maxRowsHeight = Math.max(baseRowsEllipsisHeight,\n      // height of rows with ellipsis\n      descRowsEllipsisHeight + symbolRowEllipsisHeight);\n      setEllipsisHeight(maxRowsHeight + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      setEllipsisCutIndex(isOverflow ? [minIndex, targetMidIndex] : [targetMidIndex, maxIndex]);\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    // Skip everything if `enableMeasure` is disabled\n    if (!enableMeasure) {\n      return children(nodeList, false);\n    }\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false);\n      // Limit the max line count to avoid scrollbar blink unless no need ellipsis\n      // https://github.com/ant-design/ant-design/issues/42958\n      if ([STATUS_MEASURE_NO_NEED_ELLIPSIS, STATUS_MEASURE_NONE].includes(needEllipsis)) {\n        return content;\n      }\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: Object.assign(Object.assign({}, lineClipStyle), {\n          WebkitLineClamp: rows\n        })\n      }, content);\n    }\n    return children(expanded ? nodeList : sliceNodes(nodeList, ellipsisCutIndex[0]), canEllipsis);\n  }, [expanded, needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    margin: 0,\n    padding: 0,\n    whiteSpace: parentWhiteSpace === 'nowrap' ? 'normal' : 'inherit'\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && (/*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows - 1\n    }),\n    ref: descRowsEllipsisRef\n  }, fullContent), /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: 1\n    }),\n    ref: symbolRowEllipsisRef\n  }, children([], true)))), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && (/*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true))), needEllipsis === STATUS_MEASURE_PREPARE && (/*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: 'inherit'\n    },\n    ref: measureWhiteSpaceRef\n  })));\n}"]},"metadata":{},"sourceType":"module"}