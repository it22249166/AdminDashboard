{"ast":null,"code":"import * as React from 'react';\nconst AUTO_INTERVAL = 200;\nconst STEP_BUCKETS = [[30, 0.05], [70, 0.03], [96, 0.01]];\nexport default function usePercent(spinning, percent) {\n  const [mockPercent, setMockPercent] = React.useState(0);\n  const mockIntervalRef = React.useRef(null);\n  const isAuto = percent === 'auto';\n  React.useEffect(() => {\n    if (isAuto && spinning) {\n      setMockPercent(0);\n      mockIntervalRef.current = setInterval(() => {\n        setMockPercent(prev => {\n          const restPTG = 100 - prev;\n\n          for (let i = 0; i < STEP_BUCKETS.length; i += 1) {\n            const [limit, stepPtg] = STEP_BUCKETS[i];\n\n            if (prev <= limit) {\n              return prev + restPTG * stepPtg;\n            }\n          }\n\n          return prev;\n        });\n      }, AUTO_INTERVAL);\n    }\n\n    return () => {\n      clearInterval(mockIntervalRef.current);\n    };\n  }, [isAuto, spinning]);\n  return isAuto ? mockPercent : percent;\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/spin/usePercent.js"],"names":["React","AUTO_INTERVAL","STEP_BUCKETS","usePercent","spinning","percent","mockPercent","setMockPercent","useState","mockIntervalRef","useRef","isAuto","useEffect","current","setInterval","prev","restPTG","i","length","limit","stepPtg","clearInterval"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC,EAAD,EAAK,IAAL,CAAD,EAAa,CAAC,EAAD,EAAK,IAAL,CAAb,EAAyB,CAAC,EAAD,EAAK,IAAL,CAAzB,CAArB;AACA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuC;AACpD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAAtC;AACA,QAAMC,eAAe,GAAGT,KAAK,CAACU,MAAN,CAAa,IAAb,CAAxB;AACA,QAAMC,MAAM,GAAGN,OAAO,KAAK,MAA3B;AACAL,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAID,MAAM,IAAIP,QAAd,EAAwB;AACtBG,MAAAA,cAAc,CAAC,CAAD,CAAd;AACAE,MAAAA,eAAe,CAACI,OAAhB,GAA0BC,WAAW,CAAC,MAAM;AAC1CP,QAAAA,cAAc,CAACQ,IAAI,IAAI;AACrB,gBAAMC,OAAO,GAAG,MAAMD,IAAtB;;AACA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,YAAY,CAACgB,MAAjC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;AAC/C,kBAAM,CAACE,KAAD,EAAQC,OAAR,IAAmBlB,YAAY,CAACe,CAAD,CAArC;;AACA,gBAAIF,IAAI,IAAII,KAAZ,EAAmB;AACjB,qBAAOJ,IAAI,GAAGC,OAAO,GAAGI,OAAxB;AACD;AACF;;AACD,iBAAOL,IAAP;AACD,SATa,CAAd;AAUD,OAXoC,EAWlCd,aAXkC,CAArC;AAYD;;AACD,WAAO,MAAM;AACXoB,MAAAA,aAAa,CAACZ,eAAe,CAACI,OAAjB,CAAb;AACD,KAFD;AAGD,GAnBD,EAmBG,CAACF,MAAD,EAASP,QAAT,CAnBH;AAoBA,SAAOO,MAAM,GAAGL,WAAH,GAAiBD,OAA9B;AACD","sourcesContent":["import * as React from 'react';\nconst AUTO_INTERVAL = 200;\nconst STEP_BUCKETS = [[30, 0.05], [70, 0.03], [96, 0.01]];\nexport default function usePercent(spinning, percent) {\n  const [mockPercent, setMockPercent] = React.useState(0);\n  const mockIntervalRef = React.useRef(null);\n  const isAuto = percent === 'auto';\n  React.useEffect(() => {\n    if (isAuto && spinning) {\n      setMockPercent(0);\n      mockIntervalRef.current = setInterval(() => {\n        setMockPercent(prev => {\n          const restPTG = 100 - prev;\n          for (let i = 0; i < STEP_BUCKETS.length; i += 1) {\n            const [limit, stepPtg] = STEP_BUCKETS[i];\n            if (prev <= limit) {\n              return prev + restPTG * stepPtg;\n            }\n          }\n          return prev;\n        });\n      }, AUTO_INTERVAL);\n    }\n    return () => {\n      clearInterval(mockIntervalRef.current);\n    };\n  }, [isAuto, spinning]);\n  return isAuto ? mockPercent : percent;\n}"]},"metadata":{},"sourceType":"module"}