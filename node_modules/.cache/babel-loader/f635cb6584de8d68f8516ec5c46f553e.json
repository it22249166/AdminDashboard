{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport usePrevious from '../hooks/usePrevious';\nimport useTooltipProps from '../hooks/useTooltipProps';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\nimport { isEleEllipsis, isValidText } from './util';\n\nfunction wrapperDecorations(_ref, content) {\n  let {\n    mark,\n    code,\n    underline,\n    delete: del,\n    strong,\n    keyboard,\n    italic\n  } = _ref;\n  let currentContent = content;\n\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\n\nconst ELLIPSIS_STR = '...';\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a;\n\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    style,\n    type,\n    disabled,\n    children,\n    ellipsis,\n    editable,\n    copyable,\n    component,\n    title\n  } = props,\n        restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null); // ============================ MISC ============================\n\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, ['mark', 'code', 'delete', 'underline', 'strong', 'keyboard', 'italic']); // ========================== Editable ==========================\n\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n\n  const triggerEdit = edit => {\n    var _a;\n\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n\n    setEditing(edit);\n  }; // Focus edit icon when back\n\n\n  const prevEditing = usePrevious(editing);\n  useLayoutEffect(() => {\n    var _a;\n\n    if (!editing && prevEditing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n\n  const onEditChange = value => {\n    var _a;\n\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n\n  const onEditCancel = () => {\n    var _a;\n\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  }; // ========================== Copyable ==========================\n\n\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  }); // ========================== Ellipsis ==========================\n\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible'); // Shared prop to reduce bundle size\n\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() => // Disable ellipsis\n  mergedEnableEllipsis && ( // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis || // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]); // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n\n  useLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis; // >>>>> Expand\n\n  const onExpandClick = (e, info) => {\n    var _a;\n\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n\n  const onResize = _ref2 => {\n    let {\n      offsetWidth\n    } = _ref2;\n    setEllipsisWidth(offsetWidth);\n  }; // >>>>> JS Ellipsis\n\n\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n\n    setIsJsEllipsis(jsEllipsis); // Trigger if changed\n\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  }; // >>>>> Native ellipsis\n\n\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = isEleEllipsis(textEle);\n\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]); // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n\n\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]); // ========================== Tooltip ===========================\n\n  const tooltipProps = useTooltipProps(ellipsisConfig.tooltip, editConfig.text, children);\n  const topAriaLabel = React.useMemo(() => {\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n\n    return [editConfig.text, children, title, tooltipProps.title].find(isValidText);\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]); // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_a = editConfig.text) !== null && _a !== void 0 ? _a : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  } // >>>>>>>>>>> Typography\n  // Expand\n\n\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    return expandable ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol) : null;\n  }; // Edit\n\n\n  const renderEdit = () => {\n    if (!enableEdit) {\n      return;\n    }\n\n    const {\n      icon,\n      tooltip,\n      tabIndex\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? /*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel,\n      tabIndex: tabIndex\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    }))) : null;\n  }; // Copy\n\n\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n\n  const renderOperations = canEllipsis => [canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => /*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading, enableEdit, enableCopy, textLocale]\n  }, (node, canEllipsis) => wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, node.length > 0 && canEllipsis && !expanded && topAriaLabel ? /*#__PURE__*/React.createElement(\"span\", {\n    key: \"show-content\",\n    \"aria-hidden\": true\n  }, node) : node, renderEllipsis(canEllipsis)))))));\n});\nexport default Base;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/typography/Base/index.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","EditOutlined","classNames","ResizeObserver","toArray","useLayoutEffect","useMergedState","omit","composeRef","isStyleSupport","ConfigContext","useLocale","Tooltip","Editable","useCopyClick","useMergedConfig","usePrevious","useTooltipProps","Typography","CopyBtn","Ellipsis","EllipsisTooltip","isEleEllipsis","isValidText","wrapperDecorations","_ref","content","mark","code","underline","delete","del","strong","keyboard","italic","currentContent","wrap","tag","needed","createElement","ELLIPSIS_STR","Base","forwardRef","props","ref","_a","prefixCls","customizePrefixCls","className","style","type","disabled","children","ellipsis","editable","copyable","component","title","restProps","getPrefixCls","direction","useContext","textLocale","typographyRef","useRef","editIconRef","textProps","enableEdit","editConfig","editing","setEditing","value","triggerType","triggerEdit","edit","onStart","prevEditing","current","focus","onEditClick","preventDefault","onEditChange","onChange","onEditCancel","onCancel","enableCopy","copyConfig","copied","copyLoading","onClick","onCopyClick","isLineClampSupport","setIsLineClampSupport","useState","isTextOverflowSupport","setIsTextOverflowSupport","isJsEllipsis","setIsJsEllipsis","isNativeEllipsis","setIsNativeEllipsis","isNativeVisible","setIsNativeVisible","enableEllipsis","ellipsisConfig","expandable","symbol","isExpanded","collapse","expand","expanded","setExpanded","defaultExpanded","mergedEnableEllipsis","rows","needMeasureEllipsis","useMemo","suffix","undefined","onEllipsis","cssEllipsis","setCssEllipsis","canUseCssEllipsis","isMergedEllipsis","cssTextOverflow","cssLineClamp","onExpandClick","info","onExpand","ellipsisWidth","setEllipsisWidth","onResize","_ref2","offsetWidth","onJsEllipsis","jsEllipsis","useEffect","textEle","currentEllipsis","IntersectionObserver","observer","offsetParent","observe","disconnect","tooltipProps","tooltip","text","topAriaLabel","find","onSave","onEnd","maxLength","autoSize","enterIcon","renderExpand","key","renderEdit","icon","tabIndex","editTitle","ariaLabel","includes","role","renderCopy","assign","locale","onCopy","loading","iconOnly","renderOperations","canEllipsis","renderEllipsis","resizeRef","isEllipsis","WebkitLineClamp","toString","enableMeasure","width","miscDeps","node","Fragment"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport usePrevious from '../hooks/usePrevious';\nimport useTooltipProps from '../hooks/useTooltipProps';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\nimport { isEleEllipsis, isValidText } from './util';\nfunction wrapperDecorations(_ref, content) {\n  let {\n    mark,\n    code,\n    underline,\n    delete: del,\n    strong,\n    keyboard,\n    italic\n  } = _ref;\n  let currentContent = content;\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a;\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      style,\n      type,\n      disabled,\n      children,\n      ellipsis,\n      editable,\n      copyable,\n      component,\n      title\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null);\n  // ============================ MISC ============================\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, ['mark', 'code', 'delete', 'underline', 'strong', 'keyboard', 'italic']);\n  // ========================== Editable ==========================\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n  const triggerEdit = edit => {\n    var _a;\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n    setEditing(edit);\n  };\n  // Focus edit icon when back\n  const prevEditing = usePrevious(editing);\n  useLayoutEffect(() => {\n    var _a;\n    if (!editing && prevEditing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n  const onEditChange = value => {\n    var _a;\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n  const onEditCancel = () => {\n    var _a;\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  };\n  // ========================== Copyable ==========================\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  });\n  // ========================== Ellipsis ==========================\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible');\n  // Shared prop to reduce bundle size\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() =>\n  // Disable ellipsis\n  mergedEnableEllipsis && (\n  // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis ||\n  // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);\n  // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n  useLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;\n  // >>>>> Expand\n  const onExpandClick = (e, info) => {\n    var _a;\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n  const onResize = _ref2 => {\n    let {\n      offsetWidth\n    } = _ref2;\n    setEllipsisWidth(offsetWidth);\n  };\n  // >>>>> JS Ellipsis\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n    setIsJsEllipsis(jsEllipsis);\n    // Trigger if changed\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  };\n  // >>>>> Native ellipsis\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = isEleEllipsis(textEle);\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]);\n  // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]);\n  // ========================== Tooltip ===========================\n  const tooltipProps = useTooltipProps(ellipsisConfig.tooltip, editConfig.text, children);\n  const topAriaLabel = React.useMemo(() => {\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n    return [editConfig.text, children, title, tooltipProps.title].find(isValidText);\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);\n  // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_a = editConfig.text) !== null && _a !== void 0 ? _a : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  }\n  // >>>>>>>>>>> Typography\n  // Expand\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    return expandable ? (/*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol)) : null;\n  };\n  // Edit\n  const renderEdit = () => {\n    if (!enableEdit) {\n      return;\n    }\n    const {\n      icon,\n      tooltip,\n      tabIndex\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? (/*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel,\n      tabIndex: tabIndex\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    })))) : null;\n  };\n  // Copy\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n  const renderOperations = canEllipsis => [canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && (/*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR)), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => (/*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading, enableEdit, enableCopy, textLocale]\n  }, (node, canEllipsis) => wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, node.length > 0 && canEllipsis && !expanded && topAriaLabel ? (/*#__PURE__*/React.createElement(\"span\", {\n    key: \"show-content\",\n    \"aria-hidden\": true\n  }, node)) : node, renderEllipsis(canEllipsis))))))));\n});\nexport default Base;"]},"metadata":{},"sourceType":"module"}