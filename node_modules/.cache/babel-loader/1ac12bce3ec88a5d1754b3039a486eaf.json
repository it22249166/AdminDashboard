{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport ContextIsolator from '../_util/ContextIsolator';\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext } from '../form/context';\nimport Popover from '../popover';\nimport { useCompactItemContext } from '../space/Compact';\nimport { AggregationColor } from './color';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useModeColor from './hooks/useModeColor';\nimport useStyle from './style';\nimport { genAlphaColor, generateColor, getColorAlpha } from './util';\n\nconst ColorPicker = props => {\n  const {\n    mode,\n    value,\n    defaultValue,\n    format,\n    defaultFormat,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    panelRender,\n    showText,\n    style,\n    className,\n    size: customizeSize,\n    rootClassName,\n    prefixCls: customizePrefixCls,\n    styles,\n    disabledAlpha = false,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    onChangeComplete,\n    getPopupContainer,\n    autoAdjustOverflow = true,\n    destroyTooltipOnHide,\n    disabledFormat\n  } = props,\n        rest = __rest(props, [\"mode\", \"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"prefixCls\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\", \"disabledFormat\"]);\n\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls); // ================== Value & Mode =================\n\n  const [mergedColor, setColor, modeState, setModeState, modeOptions] = useModeColor(defaultValue, value, mode);\n  const isAlphaColor = useMemo(() => getColorAlpha(mergedColor) < 100, [mergedColor]); // ==================== Change =====================\n  // To enhance user experience, we cache the gradient color when switch from gradient to single\n  // If user not modify single color, we will use the cached gradient color.\n\n  const [cachedGradientColor, setCachedGradientColor] = React.useState(null);\n\n  const onInternalChangeComplete = color => {\n    if (onChangeComplete) {\n      let changeColor = generateColor(color); // ignore alpha color\n\n      if (disabledAlpha && isAlphaColor) {\n        changeColor = genAlphaColor(color);\n      }\n\n      onChangeComplete(changeColor);\n    }\n  };\n\n  const onInternalChange = (data, changeFromPickerDrag) => {\n    let color = generateColor(data); // ignore alpha color\n\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n\n    setColor(color);\n    setCachedGradientColor(null); // Trigger change event\n\n    if (onChange) {\n      onChange(color, color.toCssString());\n    } // Only for drag-and-drop color picking\n\n\n    if (!changeFromPickerDrag) {\n      onInternalChangeComplete(color);\n    }\n  }; // =================== Gradient ====================\n\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  const [gradientDragging, setGradientDragging] = React.useState(false); // Mode change should also trigger color change\n\n  const onInternalModeChange = newMode => {\n    setModeState(newMode);\n\n    if (newMode === 'single' && mergedColor.isGradient()) {\n      setActiveIndex(0);\n      onInternalChange(new AggregationColor(mergedColor.getColors()[0].color)); // Should after `onInternalChange` since it will clear the cached color\n\n      setCachedGradientColor(mergedColor);\n    } else if (newMode === 'gradient' && !mergedColor.isGradient()) {\n      const baseColor = isAlphaColor ? genAlphaColor(mergedColor) : mergedColor;\n      onInternalChange(new AggregationColor(cachedGradientColor || [{\n        percent: 0,\n        color: baseColor\n      }, {\n        percent: 100,\n        color: baseColor\n      }]));\n    }\n  }; // ================== Form Status ==================\n\n\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext); // ==================== Compact ====================\n\n  const {\n    compactSize,\n    compactItemClassnames\n  } = useCompactItemContext(prefixCls, direction); // ===================== Style =====================\n\n  const mergedSize = useSize(ctx => {\n    var _a;\n\n    return (_a = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a !== void 0 ? _a : ctx;\n  });\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergedRootCls = classNames(rootClassName, cssVarCls, rootCls, rtlCls);\n  const mergedCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, compactItemClassnames, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergedRootCls, className, hashId);\n  const mergedPopupCls = classNames(prefixCls, mergedRootCls); // ===================== Warning ======================\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style); // ============================ zIndex ============================\n\n  return wrapCSSVar( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    styles: {\n      body: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner\n    },\n    onOpenChange: visible => {\n      if (!visible || !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ContextIsolator, {\n      form: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, {\n      mode: modeState,\n      onModeChange: onInternalModeChange,\n      modeOptions: modeOptions,\n      prefixCls: prefixCls,\n      value: mergedColor,\n      allowClear: allowClear,\n      disabled: mergedDisabled,\n      disabledAlpha: disabledAlpha,\n      presets: presets,\n      panelRender: panelRender,\n      format: formatValue,\n      onFormatChange: setFormatValue,\n      onChange: onInternalChange,\n      onChangeComplete: onInternalChangeComplete,\n      onClear: onClear,\n      activeIndex: activeIndex,\n      onActive: setActiveIndex,\n      gradientDragging: gradientDragging,\n      onGradientDragging: setGradientDragging,\n      disabledFormat: disabledFormat\n    })),\n    classNames: {\n      root: mergedPopupCls\n    }\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    activeIndex: popupOpen ? activeIndex : -1,\n    open: popupOpen,\n    className: mergedCls,\n    style: mergedStyle,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    showText: showText,\n    format: formatValue\n  }, rest, {\n    color: mergedColor\n  }))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nconst PurePanel = genPurePanel(ColorPicker, undefined, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}), 'color-picker',\n/* istanbul ignore next */\nprefixCls => prefixCls);\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/color-picker/ColorPicker.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","useContext","useMemo","classNames","useMergedState","ContextIsolator","genPurePanel","getStatusClassNames","devUseWarning","ConfigContext","DisabledContext","useCSSVarCls","useSize","FormItemInputContext","Popover","useCompactItemContext","AggregationColor","ColorPickerPanel","ColorTrigger","useModeColor","useStyle","genAlphaColor","generateColor","getColorAlpha","ColorPicker","props","mode","value","defaultValue","format","defaultFormat","allowClear","presets","children","trigger","open","disabled","placement","arrow","panelRender","showText","style","className","size","customizeSize","rootClassName","prefixCls","customizePrefixCls","styles","disabledAlpha","onFormatChange","onChange","onClear","onOpenChange","onChangeComplete","getPopupContainer","autoAdjustOverflow","destroyTooltipOnHide","disabledFormat","rest","getPrefixCls","direction","colorPicker","contextDisabled","mergedDisabled","popupOpen","setPopupOpen","postState","openData","formatValue","setFormatValue","mergedColor","setColor","modeState","setModeState","modeOptions","isAlphaColor","cachedGradientColor","setCachedGradientColor","useState","onInternalChangeComplete","color","changeColor","onInternalChange","data","changeFromPickerDrag","toCssString","activeIndex","setActiveIndex","gradientDragging","setGradientDragging","onInternalModeChange","newMode","isGradient","getColors","baseColor","percent","status","contextStatus","compactSize","compactItemClassnames","mergedSize","ctx","_a","rootCls","wrapCSSVar","hashId","cssVarCls","rtlCls","mergedRootCls","mergedCls","mergedPopupCls","process","env","NODE_ENV","warning","popoverProps","mergedStyle","assign","createElement","popup","body","popupOverlayInner","visible","content","form","onModeChange","onActive","onGradientDragging","root","displayName","PurePanel","undefined","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport ContextIsolator from '../_util/ContextIsolator';\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext } from '../form/context';\nimport Popover from '../popover';\nimport { useCompactItemContext } from '../space/Compact';\nimport { AggregationColor } from './color';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useModeColor from './hooks/useModeColor';\nimport useStyle from './style';\nimport { genAlphaColor, generateColor, getColorAlpha } from './util';\nconst ColorPicker = props => {\n  const {\n      mode,\n      value,\n      defaultValue,\n      format,\n      defaultFormat,\n      allowClear = false,\n      presets,\n      children,\n      trigger = 'click',\n      open,\n      disabled,\n      placement = 'bottomLeft',\n      arrow = true,\n      panelRender,\n      showText,\n      style,\n      className,\n      size: customizeSize,\n      rootClassName,\n      prefixCls: customizePrefixCls,\n      styles,\n      disabledAlpha = false,\n      onFormatChange,\n      onChange,\n      onClear,\n      onOpenChange,\n      onChangeComplete,\n      getPopupContainer,\n      autoAdjustOverflow = true,\n      destroyTooltipOnHide,\n      disabledFormat\n    } = props,\n    rest = __rest(props, [\"mode\", \"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"prefixCls\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\", \"disabledFormat\"]);\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  // ================== Value & Mode =================\n  const [mergedColor, setColor, modeState, setModeState, modeOptions] = useModeColor(defaultValue, value, mode);\n  const isAlphaColor = useMemo(() => getColorAlpha(mergedColor) < 100, [mergedColor]);\n  // ==================== Change =====================\n  // To enhance user experience, we cache the gradient color when switch from gradient to single\n  // If user not modify single color, we will use the cached gradient color.\n  const [cachedGradientColor, setCachedGradientColor] = React.useState(null);\n  const onInternalChangeComplete = color => {\n    if (onChangeComplete) {\n      let changeColor = generateColor(color);\n      // ignore alpha color\n      if (disabledAlpha && isAlphaColor) {\n        changeColor = genAlphaColor(color);\n      }\n      onChangeComplete(changeColor);\n    }\n  };\n  const onInternalChange = (data, changeFromPickerDrag) => {\n    let color = generateColor(data);\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n    setColor(color);\n    setCachedGradientColor(null);\n    // Trigger change event\n    if (onChange) {\n      onChange(color, color.toCssString());\n    }\n    // Only for drag-and-drop color picking\n    if (!changeFromPickerDrag) {\n      onInternalChangeComplete(color);\n    }\n  };\n  // =================== Gradient ====================\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  const [gradientDragging, setGradientDragging] = React.useState(false);\n  // Mode change should also trigger color change\n  const onInternalModeChange = newMode => {\n    setModeState(newMode);\n    if (newMode === 'single' && mergedColor.isGradient()) {\n      setActiveIndex(0);\n      onInternalChange(new AggregationColor(mergedColor.getColors()[0].color));\n      // Should after `onInternalChange` since it will clear the cached color\n      setCachedGradientColor(mergedColor);\n    } else if (newMode === 'gradient' && !mergedColor.isGradient()) {\n      const baseColor = isAlphaColor ? genAlphaColor(mergedColor) : mergedColor;\n      onInternalChange(new AggregationColor(cachedGradientColor || [{\n        percent: 0,\n        color: baseColor\n      }, {\n        percent: 100,\n        color: baseColor\n      }]));\n    }\n  };\n  // ================== Form Status ==================\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext);\n  // ==================== Compact ====================\n  const {\n    compactSize,\n    compactItemClassnames\n  } = useCompactItemContext(prefixCls, direction);\n  // ===================== Style =====================\n  const mergedSize = useSize(ctx => {\n    var _a;\n    return (_a = customizeSize !== null && customizeSize !== void 0 ? customizeSize : compactSize) !== null && _a !== void 0 ? _a : ctx;\n  });\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergedRootCls = classNames(rootClassName, cssVarCls, rootCls, rtlCls);\n  const mergedCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, compactItemClassnames, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergedRootCls, className, hashId);\n  const mergedPopupCls = classNames(prefixCls, mergedRootCls);\n  // ===================== Warning ======================\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  // ============================ zIndex ============================\n  return wrapCSSVar(/*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    styles: {\n      body: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner\n    },\n    onOpenChange: visible => {\n      if (!visible || !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ContextIsolator, {\n      form: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, {\n      mode: modeState,\n      onModeChange: onInternalModeChange,\n      modeOptions: modeOptions,\n      prefixCls: prefixCls,\n      value: mergedColor,\n      allowClear: allowClear,\n      disabled: mergedDisabled,\n      disabledAlpha: disabledAlpha,\n      presets: presets,\n      panelRender: panelRender,\n      format: formatValue,\n      onFormatChange: setFormatValue,\n      onChange: onInternalChange,\n      onChangeComplete: onInternalChangeComplete,\n      onClear: onClear,\n      activeIndex: activeIndex,\n      onActive: setActiveIndex,\n      gradientDragging: gradientDragging,\n      onGradientDragging: setGradientDragging,\n      disabledFormat: disabledFormat\n    })),\n    classNames: {\n      root: mergedPopupCls\n    }\n  }, popoverProps), children || (/*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    activeIndex: popupOpen ? activeIndex : -1,\n    open: popupOpen,\n    className: mergedCls,\n    style: mergedStyle,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    showText: showText,\n    format: formatValue\n  }, rest, {\n    color: mergedColor\n  })))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, undefined, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}), 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls);\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}