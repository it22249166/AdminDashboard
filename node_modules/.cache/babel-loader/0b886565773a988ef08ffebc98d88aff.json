{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\n\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\n\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth,\n    steps\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n\n    if (type === 'dashboard') {\n      return 75;\n    }\n\n    return undefined;\n  }, [gapDegree, type]);\n  const percentArray = getPercentage(props);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined; // using className to style stroke color\n\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    steps: steps,\n    percent: steps ? percentArray[1] : percentArray,\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: steps ? strokeColor[1] : strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  const smallCircle = width <= 20;\n  const node = /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleContent, !smallCircle && children);\n\n  if (smallCircle) {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: children\n    }, node);\n  }\n\n  return node;\n};\n\nexport default Circle;","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/antd/es/progress/Circle.js"],"names":["React","classNames","Circle","RCCircle","Tooltip","getPercentage","getSize","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","trailColor","strokeLinecap","gapPosition","gapDegree","originWidth","type","children","success","size","steps","height","strokeWidth","undefined","Math","max","circleStyle","fontSize","realGapDegree","useMemo","percentArray","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","smallCircle","node","className","style","title"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,aAAnC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,aAAT,EAAwBC,OAAxB,EAAiCC,cAAjC,QAAuD,SAAvD;AACA,MAAMC,uBAAuB,GAAG,CAAhC;;AACA,MAAMC,aAAa,GAAGC,KAAK,IAAIF,uBAAuB,GAAGE,KAA1B,GAAkC,GAAjE;;AACA,MAAMR,MAAM,GAAGS,KAAK,IAAI;AACtB,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,UAAU,GAAG,IAFT;AAGJC,IAAAA,aAAa,GAAG,OAHZ;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,SALI;AAMJN,IAAAA,KAAK,EAAEO,WAAW,GAAG,GANjB;AAOJC,IAAAA,IAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,IAAI,GAAGJ,WAVH;AAWJK,IAAAA;AAXI,MAYFX,KAZJ;AAaA,QAAM,CAACD,KAAD,EAAQa,MAAR,IAAkBjB,OAAO,CAACe,IAAD,EAAO,QAAP,CAA/B;AACA,MAAI;AACFG,IAAAA;AADE,MAEAb,KAFJ;;AAGA,MAAIa,WAAW,KAAKC,SAApB,EAA+B;AAC7BD,IAAAA,WAAW,GAAGE,IAAI,CAACC,GAAL,CAASlB,aAAa,CAACC,KAAD,CAAtB,EAA+B,CAA/B,CAAd;AACD;;AACD,QAAMkB,WAAW,GAAG;AAClBlB,IAAAA,KADkB;AAElBa,IAAAA,MAFkB;AAGlBM,IAAAA,QAAQ,EAAEnB,KAAK,GAAG,IAAR,GAAe;AAHP,GAApB;AAKA,QAAMoB,aAAa,GAAG9B,KAAK,CAAC+B,OAAN,CAAc,MAAM;AACxC;AACA,QAAIf,SAAS,IAAIA,SAAS,KAAK,CAA/B,EAAkC;AAChC,aAAOA,SAAP;AACD;;AACD,QAAIE,IAAI,KAAK,WAAb,EAA0B;AACxB,aAAO,EAAP;AACD;;AACD,WAAOO,SAAP;AACD,GATqB,EASnB,CAACT,SAAD,EAAYE,IAAZ,CATmB,CAAtB;AAUA,QAAMc,YAAY,GAAG3B,aAAa,CAACM,KAAD,CAAlC;AACA,QAAMsB,MAAM,GAAGlB,WAAW,IAAIG,IAAI,KAAK,WAAT,IAAwB,QAAvC,IAAmDO,SAAlE,CArCsB,CAsCtB;;AACA,QAAMS,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B3B,KAAK,CAAC4B,WAArC,MAAsD,iBAAzE;AACA,QAAMA,WAAW,GAAGhC,cAAc,CAAC;AACjCa,IAAAA,OADiC;AAEjCmB,IAAAA,WAAW,EAAE5B,KAAK,CAAC4B;AAFc,GAAD,CAAlC;AAIA,QAAMC,gBAAgB,GAAGvC,UAAU,CAAE,GAAEW,SAAU,QAAd,EAAuB;AACxD,KAAE,GAAEA,SAAU,kBAAd,GAAkCsB;AADsB,GAAvB,CAAnC;AAGA,QAAMO,aAAa,GAAG,aAAazC,KAAK,CAAC0C,aAAN,CAAoBvC,QAApB,EAA8B;AAC/DmB,IAAAA,KAAK,EAAEA,KADwD;AAE/DqB,IAAAA,OAAO,EAAErB,KAAK,GAAGU,YAAY,CAAC,CAAD,CAAf,GAAqBA,YAF4B;AAG/DR,IAAAA,WAAW,EAAEA,WAHkD;AAI/DoB,IAAAA,UAAU,EAAEpB,WAJmD;AAK/De,IAAAA,WAAW,EAAEjB,KAAK,GAAGiB,WAAW,CAAC,CAAD,CAAd,GAAoBA,WALyB;AAM/DzB,IAAAA,aAAa,EAAEA,aANgD;AAO/DD,IAAAA,UAAU,EAAEA,UAPmD;AAQ/DD,IAAAA,SAAS,EAAEA,SARoD;AAS/DI,IAAAA,SAAS,EAAEc,aAToD;AAU/Df,IAAAA,WAAW,EAAEkB;AAVkD,GAA9B,CAAnC;AAYA,QAAMY,WAAW,GAAGnC,KAAK,IAAI,EAA7B;AACA,QAAMoC,IAAI,GAAG,aAAa9C,KAAK,CAAC0C,aAAN,CAAoB,KAApB,EAA2B;AACnDK,IAAAA,SAAS,EAAEP,gBADwC;AAEnDQ,IAAAA,KAAK,EAAEpB;AAF4C,GAA3B,EAGvBa,aAHuB,EAGR,CAACI,WAAD,IAAgB1B,QAHR,CAA1B;;AAIA,MAAI0B,WAAJ,EAAiB;AACf,WAAO,aAAa7C,KAAK,CAAC0C,aAAN,CAAoBtC,OAApB,EAA6B;AAC/C6C,MAAAA,KAAK,EAAE9B;AADwC,KAA7B,EAEjB2B,IAFiB,CAApB;AAGD;;AACD,SAAOA,IAAP;AACD,CAtED;;AAuEA,eAAe5C,MAAf","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth,\n    steps\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const percentArray = getPercentage(props);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    steps: steps,\n    percent: steps ? percentArray[1] : percentArray,\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: steps ? strokeColor[1] : strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  const smallCircle = width <= 20;\n  const node = /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleContent, !smallCircle && children);\n  if (smallCircle) {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: children\n    }, node);\n  }\n  return node;\n};\nexport default Circle;"]},"metadata":{},"sourceType":"module"}