{"ast":null,"code":"import { FastColor } from '@ant-design/fast-color';\nconst hueStep = 2; // 色相阶梯\n\nconst saturationStep = 0.16; // 饱和度阶梯，浅色部分\n\nconst saturationStep2 = 0.05; // 饱和度阶梯，深色部分\n\nconst brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\n\nconst brightnessStep2 = 0.15; // 亮度阶梯，深色部分\n\nconst lightColorCount = 5; // 浅色数量，主色上\n\nconst darkColorCount = 4; // 深色数量，主色下\n// 暗色主题颜色映射关系表\n\nconst darkColorMap = [{\n  index: 7,\n  amount: 15\n}, {\n  index: 6,\n  amount: 25\n}, {\n  index: 5,\n  amount: 30\n}, {\n  index: 5,\n  amount: 45\n}, {\n  index: 5,\n  amount: 65\n}, {\n  index: 5,\n  amount: 85\n}, {\n  index: 4,\n  amount: 90\n}, {\n  index: 3,\n  amount: 95\n}, {\n  index: 2,\n  amount: 97\n}, {\n  index: 1,\n  amount: 98\n}];\n\nfunction getHue(hsv, i, light) {\n  let hue; // 根据色相不同，色相转向不同\n\n  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\n    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\n  } else {\n    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\n  }\n\n  if (hue < 0) {\n    hue += 360;\n  } else if (hue >= 360) {\n    hue -= 360;\n  }\n\n  return hue;\n}\n\nfunction getSaturation(hsv, i, light) {\n  // grey color don't change saturation\n  if (hsv.h === 0 && hsv.s === 0) {\n    return hsv.s;\n  }\n\n  let saturation;\n\n  if (light) {\n    saturation = hsv.s - saturationStep * i;\n  } else if (i === darkColorCount) {\n    saturation = hsv.s + saturationStep;\n  } else {\n    saturation = hsv.s + saturationStep2 * i;\n  } // 边界值修正\n\n\n  if (saturation > 1) {\n    saturation = 1;\n  } // 第一格的 s 限制在 0.06-0.1 之间\n\n\n  if (light && i === lightColorCount && saturation > 0.1) {\n    saturation = 0.1;\n  }\n\n  if (saturation < 0.06) {\n    saturation = 0.06;\n  }\n\n  return Math.round(saturation * 100) / 100;\n}\n\nfunction getValue(hsv, i, light) {\n  let value;\n\n  if (light) {\n    value = hsv.v + brightnessStep1 * i;\n  } else {\n    value = hsv.v - brightnessStep2 * i;\n  } // Clamp value between 0 and 1\n\n\n  value = Math.max(0, Math.min(1, value));\n  return Math.round(value * 100) / 100;\n}\n\nexport default function generate(color, opts = {}) {\n  const patterns = [];\n  const pColor = new FastColor(color);\n  const hsv = pColor.toHsv();\n\n  for (let i = lightColorCount; i > 0; i -= 1) {\n    const c = new FastColor({\n      h: getHue(hsv, i, true),\n      s: getSaturation(hsv, i, true),\n      v: getValue(hsv, i, true)\n    });\n    patterns.push(c);\n  }\n\n  patterns.push(pColor);\n\n  for (let i = 1; i <= darkColorCount; i += 1) {\n    const c = new FastColor({\n      h: getHue(hsv, i),\n      s: getSaturation(hsv, i),\n      v: getValue(hsv, i)\n    });\n    patterns.push(c);\n  } // dark theme patterns\n\n\n  if (opts.theme === 'dark') {\n    return darkColorMap.map(({\n      index,\n      amount\n    }) => new FastColor(opts.backgroundColor || '#141414').mix(patterns[index], amount).toHexString());\n  }\n\n  return patterns.map(c => c.toHexString());\n}","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@ant-design/colors/es/generate.js"],"names":["FastColor","hueStep","saturationStep","saturationStep2","brightnessStep1","brightnessStep2","lightColorCount","darkColorCount","darkColorMap","index","amount","getHue","hsv","i","light","hue","Math","round","h","getSaturation","s","saturation","getValue","value","v","max","min","generate","color","opts","patterns","pColor","toHsv","c","push","theme","map","backgroundColor","mix","toHexString"],"mappings":"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","sourcesContent":["import { FastColor } from '@ant-design/fast-color';\nconst hueStep = 2; // 色相阶梯\nconst saturationStep = 0.16; // 饱和度阶梯，浅色部分\nconst saturationStep2 = 0.05; // 饱和度阶梯，深色部分\nconst brightnessStep1 = 0.05; // 亮度阶梯，浅色部分\nconst brightnessStep2 = 0.15; // 亮度阶梯，深色部分\nconst lightColorCount = 5; // 浅色数量，主色上\nconst darkColorCount = 4; // 深色数量，主色下\n\n// 暗色主题颜色映射关系表\nconst darkColorMap = [{\n  index: 7,\n  amount: 15\n}, {\n  index: 6,\n  amount: 25\n}, {\n  index: 5,\n  amount: 30\n}, {\n  index: 5,\n  amount: 45\n}, {\n  index: 5,\n  amount: 65\n}, {\n  index: 5,\n  amount: 85\n}, {\n  index: 4,\n  amount: 90\n}, {\n  index: 3,\n  amount: 95\n}, {\n  index: 2,\n  amount: 97\n}, {\n  index: 1,\n  amount: 98\n}];\nfunction getHue(hsv, i, light) {\n  let hue;\n  // 根据色相不同，色相转向不同\n  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\n    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\n  } else {\n    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\n  }\n  if (hue < 0) {\n    hue += 360;\n  } else if (hue >= 360) {\n    hue -= 360;\n  }\n  return hue;\n}\nfunction getSaturation(hsv, i, light) {\n  // grey color don't change saturation\n  if (hsv.h === 0 && hsv.s === 0) {\n    return hsv.s;\n  }\n  let saturation;\n  if (light) {\n    saturation = hsv.s - saturationStep * i;\n  } else if (i === darkColorCount) {\n    saturation = hsv.s + saturationStep;\n  } else {\n    saturation = hsv.s + saturationStep2 * i;\n  }\n  // 边界值修正\n  if (saturation > 1) {\n    saturation = 1;\n  }\n  // 第一格的 s 限制在 0.06-0.1 之间\n  if (light && i === lightColorCount && saturation > 0.1) {\n    saturation = 0.1;\n  }\n  if (saturation < 0.06) {\n    saturation = 0.06;\n  }\n  return Math.round(saturation * 100) / 100;\n}\nfunction getValue(hsv, i, light) {\n  let value;\n  if (light) {\n    value = hsv.v + brightnessStep1 * i;\n  } else {\n    value = hsv.v - brightnessStep2 * i;\n  }\n  // Clamp value between 0 and 1\n  value = Math.max(0, Math.min(1, value));\n  return Math.round(value * 100) / 100;\n}\nexport default function generate(color, opts = {}) {\n  const patterns = [];\n  const pColor = new FastColor(color);\n  const hsv = pColor.toHsv();\n  for (let i = lightColorCount; i > 0; i -= 1) {\n    const c = new FastColor({\n      h: getHue(hsv, i, true),\n      s: getSaturation(hsv, i, true),\n      v: getValue(hsv, i, true)\n    });\n    patterns.push(c);\n  }\n  patterns.push(pColor);\n  for (let i = 1; i <= darkColorCount; i += 1) {\n    const c = new FastColor({\n      h: getHue(hsv, i),\n      s: getSaturation(hsv, i),\n      v: getValue(hsv, i)\n    });\n    patterns.push(c);\n  }\n\n  // dark theme patterns\n  if (opts.theme === 'dark') {\n    return darkColorMap.map(({\n      index,\n      amount\n    }) => new FastColor(opts.backgroundColor || '#141414').mix(patterns[index], amount).toHexString());\n  }\n  return patterns.map(c => c.toHexString());\n}"]},"metadata":{},"sourceType":"module"}