{"ast":null,"code":"import { isValidElement, version } from 'react';\nimport { ForwardRef, isMemo } from 'react-is';\nimport useMemo from \"./hooks/useMemo\";\nimport isFragment from \"./React/isFragment\";\nconst ReactMajorVersion = Number(version.split('.')[0]);\nexport const fillRef = (ref, node) => {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (typeof ref === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n};\n/**\n * Merge refs into one ref function to support ref passing.\n */\n\nexport const composeRef = (...refs) => {\n  const refList = refs.filter(Boolean);\n\n  if (refList.length <= 1) {\n    return refList[0];\n  }\n\n  return node => {\n    refs.forEach(ref => {\n      fillRef(ref, node);\n    });\n  };\n};\nexport const useComposeRef = (...refs) => {\n  return useMemo(() => composeRef(...refs), // eslint-disable-next-line react-hooks/exhaustive-deps\n  refs, (prev, next) => prev.length !== next.length || prev.every((ref, i) => ref !== next[i]));\n};\nexport const supportRef = nodeOrComponent => {\n  var _type$prototype, _nodeOrComponent$prot;\n\n  if (!nodeOrComponent) {\n    return false;\n  } // React 19 no need `forwardRef` anymore. So just pass if is a React element.\n\n\n  if (isReactElement(nodeOrComponent) && ReactMajorVersion >= 19) {\n    return true;\n  }\n\n  const type = isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node\n\n  if (typeof type === 'function' && !((_type$prototype = type.prototype) === null || _type$prototype === void 0 ? void 0 : _type$prototype.render) && type.$$typeof !== ForwardRef) {\n    return false;\n  } // Class component\n\n\n  if (typeof nodeOrComponent === 'function' && !((_nodeOrComponent$prot = nodeOrComponent.prototype) === null || _nodeOrComponent$prot === void 0 ? void 0 : _nodeOrComponent$prot.render) && nodeOrComponent.$$typeof !== ForwardRef) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction isReactElement(node) {\n  return /*#__PURE__*/isValidElement(node) && !isFragment(node);\n}\n\nexport const supportNodeRef = node => {\n  return isReactElement(node) && supportRef(node);\n};\n/**\n * In React 19. `ref` is not a property from node.\n * But a property from `props.ref`.\n * To check if `props.ref` exist or fallback to `ref`.\n */\n\nexport const getNodeRef = node => {\n  if (node && isReactElement(node)) {\n    const ele = node; // Source from:\n    // https://github.com/mui/material-ui/blob/master/packages/mui-utils/src/getReactNodeRef/getReactNodeRef.ts\n\n    return ele.props.propertyIsEnumerable('ref') ? ele.props.ref : ele.ref;\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/malith_bandara/Desktop/AdminDashboard/node_modules/@rc-component/util/es/ref.js"],"names":["isValidElement","version","ForwardRef","isMemo","useMemo","isFragment","ReactMajorVersion","Number","split","fillRef","ref","node","current","composeRef","refs","refList","filter","Boolean","length","forEach","useComposeRef","prev","next","every","i","supportRef","nodeOrComponent","isReactElement","type","prototype","render","$$typeof","supportNodeRef","getNodeRef","ele","props","propertyIsEnumerable"],"mappings":"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","sourcesContent":["import { isValidElement, version } from 'react';\nimport { ForwardRef, isMemo } from 'react-is';\nimport useMemo from \"./hooks/useMemo\";\nimport isFragment from \"./React/isFragment\";\nconst ReactMajorVersion = Number(version.split('.')[0]);\nexport const fillRef = (ref, node) => {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (typeof ref === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n};\n\n/**\n * Merge refs into one ref function to support ref passing.\n */\nexport const composeRef = (...refs) => {\n  const refList = refs.filter(Boolean);\n  if (refList.length <= 1) {\n    return refList[0];\n  }\n  return node => {\n    refs.forEach(ref => {\n      fillRef(ref, node);\n    });\n  };\n};\nexport const useComposeRef = (...refs) => {\n  return useMemo(() => composeRef(...refs),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  refs, (prev, next) => prev.length !== next.length || prev.every((ref, i) => ref !== next[i]));\n};\nexport const supportRef = nodeOrComponent => {\n  if (!nodeOrComponent) {\n    return false;\n  }\n\n  // React 19 no need `forwardRef` anymore. So just pass if is a React element.\n  if (isReactElement(nodeOrComponent) && ReactMajorVersion >= 19) {\n    return true;\n  }\n  const type = isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type;\n\n  // Function component node\n  if (typeof type === 'function' && !type.prototype?.render && type.$$typeof !== ForwardRef) {\n    return false;\n  }\n\n  // Class component\n  if (typeof nodeOrComponent === 'function' && !nodeOrComponent.prototype?.render && nodeOrComponent.$$typeof !== ForwardRef) {\n    return false;\n  }\n  return true;\n};\nfunction isReactElement(node) {\n  return /*#__PURE__*/isValidElement(node) && !isFragment(node);\n}\nexport const supportNodeRef = node => {\n  return isReactElement(node) && supportRef(node);\n};\n\n/**\n * In React 19. `ref` is not a property from node.\n * But a property from `props.ref`.\n * To check if `props.ref` exist or fallback to `ref`.\n */\nexport const getNodeRef = node => {\n  if (node && isReactElement(node)) {\n    const ele = node;\n\n    // Source from:\n    // https://github.com/mui/material-ui/blob/master/packages/mui-utils/src/getReactNodeRef/getReactNodeRef.ts\n    return ele.props.propertyIsEnumerable('ref') ? ele.props.ref : ele.ref;\n  }\n  return null;\n};"]},"metadata":{},"sourceType":"module"}